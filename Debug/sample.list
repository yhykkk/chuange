
sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007e08  08007e08  00008e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800825c  0800825c  0000a1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800825c  0800825c  0000925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008264  08008264  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008264  08008264  00009264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008268  08008268  00009268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800826c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001d8  08008444  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08008444  0000a42c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6c4  00000000  00000000  0000a201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0a  00000000  00000000  000158c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000177d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a26  00000000  00000000  000184e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171ad  00000000  00000000  00018f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb9c  00000000  00000000  000300b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c2b8  00000000  00000000  0003fc4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbf07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b28  00000000  00000000  000cbf4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000d0a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007df0 	.word	0x08007df0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08007df0 	.word	0x08007df0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca4 <MX_GPIO_Init+0xd0>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca4 <MX_GPIO_Init+0xd0>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca4 <MX_GPIO_Init+0xd0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0310 	and.w	r3, r3, #16
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c00:	4b28      	ldr	r3, [pc, #160]	@ (8000ca4 <MX_GPIO_Init+0xd0>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a27      	ldr	r2, [pc, #156]	@ (8000ca4 <MX_GPIO_Init+0xd0>)
 8000c06:	f043 0320 	orr.w	r3, r3, #32
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b25      	ldr	r3, [pc, #148]	@ (8000ca4 <MX_GPIO_Init+0xd0>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0320 	and.w	r3, r3, #32
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <MX_GPIO_Init+0xd0>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a21      	ldr	r2, [pc, #132]	@ (8000ca4 <MX_GPIO_Init+0xd0>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_GPIO_Init+0xd0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_GPIO_Init+0xd0>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca4 <MX_GPIO_Init+0xd0>)
 8000c36:	f043 0308 	orr.w	r3, r3, #8
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <MX_GPIO_Init+0xd0>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c4e:	4816      	ldr	r0, [pc, #88]	@ (8000ca8 <MX_GPIO_Init+0xd4>)
 8000c50:	f000 fee8 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <MX_GPIO_Init+0xd8>)
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4619      	mov	r1, r3
 8000c68:	4811      	ldr	r0, [pc, #68]	@ (8000cb0 <MX_GPIO_Init+0xdc>)
 8000c6a:	f000 fd57 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4619      	mov	r1, r3
 8000c86:	4808      	ldr	r0, [pc, #32]	@ (8000ca8 <MX_GPIO_Init+0xd4>)
 8000c88:	f000 fd48 	bl	800171c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	210e      	movs	r1, #14
 8000c90:	2028      	movs	r0, #40	@ 0x28
 8000c92:	f000 fd0c 	bl	80016ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c96:	2028      	movs	r0, #40	@ 0x28
 8000c98:	f000 fd25 	bl	80016e6 <HAL_NVIC_EnableIRQ>

}
 8000c9c:	bf00      	nop
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	10210000 	.word	0x10210000
 8000cb0:	40010c00 	.word	0x40010c00

08000cb4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <MX_I2C1_Init+0x50>)
 8000cba:	4a13      	ldr	r2, [pc, #76]	@ (8000d08 <MX_I2C1_Init+0x54>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <MX_I2C1_Init+0x50>)
 8000cc0:	4a12      	ldr	r2, [pc, #72]	@ (8000d0c <MX_I2C1_Init+0x58>)
 8000cc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <MX_I2C1_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <MX_I2C1_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <MX_I2C1_Init+0x50>)
 8000cd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <MX_I2C1_Init+0x50>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <MX_I2C1_Init+0x50>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <MX_I2C1_Init+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <MX_I2C1_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	@ (8000d04 <MX_I2C1_Init+0x50>)
 8000cf2:	f000 fed1 	bl	8001a98 <HAL_I2C_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cfc:	f000 f8ab 	bl	8000e56 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200001f4 	.word	0x200001f4
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	00061a80 	.word	0x00061a80

08000d10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a15      	ldr	r2, [pc, #84]	@ (8000d80 <HAL_I2C_MspInit+0x70>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d123      	bne.n	8000d78 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <HAL_I2C_MspInit+0x74>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a13      	ldr	r2, [pc, #76]	@ (8000d84 <HAL_I2C_MspInit+0x74>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_I2C_MspInit+0x74>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d48:	23c0      	movs	r3, #192	@ 0xc0
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4c:	2312      	movs	r3, #18
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480b      	ldr	r0, [pc, #44]	@ (8000d88 <HAL_I2C_MspInit+0x78>)
 8000d5c:	f000 fcde 	bl	800171c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <HAL_I2C_MspInit+0x74>)
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	4a07      	ldr	r2, [pc, #28]	@ (8000d84 <HAL_I2C_MspInit+0x74>)
 8000d66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d6a:	61d3      	str	r3, [r2, #28]
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <HAL_I2C_MspInit+0x74>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40005400 	.word	0x40005400
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010c00 	.word	0x40010c00

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f000 fb54 	bl	800143c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f81a 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f7ff ff1c 	bl	8000bd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d9c:	f7ff ff8a 	bl	8000cb4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000da0:	f000 f998 	bl	80010d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000da4:	f000 fa18 	bl	80011d8 <MX_TIM2_Init>
  //启动输入捕获
  HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_4);//开启通道4的输入捕获,启用定时器对应通道的输入捕获功能
   char message [50] = "";
#endif
#ifdef PWM
	HAL_TIM_PWM_Init(&htim2);
 8000da8:	4806      	ldr	r0, [pc, #24]	@ (8000dc4 <main+0x38>)
 8000daa:	f001 fc04 	bl	80025b6 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000dae:	2104      	movs	r1, #4
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <main+0x38>)
 8000db2:	f001 fc59 	bl	8002668 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#ifdef PWM
	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,count);
 8000db6:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <main+0x3c>)
 8000db8:	881a      	ldrh	r2, [r3, #0]
 8000dba:	4b02      	ldr	r3, [pc, #8]	@ (8000dc4 <main+0x38>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <main+0x34>
 8000dc4:	20000294 	.word	0x20000294
 8000dc8:	20000000 	.word	0x20000000

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b090      	sub	sp, #64	@ 0x40
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	2228      	movs	r2, #40	@ 0x28
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 fc39 	bl	8004652 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2302      	movs	r3, #2
 8000e02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e0a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 ff83 	bl	8001d20 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e20:	f000 f819 	bl	8000e56 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 f9f0 	bl	8002224 <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e4a:	f000 f804 	bl	8000e56 <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3740      	adds	r7, #64	@ 0x40
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5a:	b672      	cpsid	i
}
 8000e5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5e:	bf00      	nop
 8000e60:	e7fd      	b.n	8000e5e <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_MspInit+0x5c>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a14      	ldr	r2, [pc, #80]	@ (8000ec0 <HAL_MspInit+0x5c>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_MspInit+0x5c>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <HAL_MspInit+0x5c>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec0 <HAL_MspInit+0x5c>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <HAL_MspInit+0x5c>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_MspInit+0x60>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <HAL_MspInit+0x60>)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <NMI_Handler+0x4>

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <UsageFault_Handler+0x4>

08000ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 fad6 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <TIM1_CC_IRQHandler+0x10>)
 8000f26:	f001 fc99 	bl	800285c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000024c 	.word	0x2000024c

08000f34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000f38:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000f3c:	f000 fd8a 	bl	8001a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return 1;
 8000f48:	2301      	movs	r3, #1
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <_kill>:

int _kill(int pid, int sig)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f5c:	f003 fbcc 	bl	80046f8 <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2216      	movs	r2, #22
 8000f64:	601a      	str	r2, [r3, #0]
  return -1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_exit>:

void _exit (int status)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffe7 	bl	8000f52 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <_exit+0x12>

08000f88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	e00a      	b.n	8000fb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f9a:	f3af 8000 	nop.w
 8000f9e:	4601      	mov	r1, r0
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	60ba      	str	r2, [r7, #8]
 8000fa6:	b2ca      	uxtb	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbf0      	blt.n	8000f9a <_read+0x12>
  }

  return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e009      	b.n	8000fe8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf1      	blt.n	8000fd4 <_write+0x12>
  }
  return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_close>:

int _close(int file)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001020:	605a      	str	r2, [r3, #4]
  return 0;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <_isatty>:

int _isatty(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001042:	b480      	push	{r7}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
	...

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	@ (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800108c:	f003 fb34 	bl	80046f8 <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e009      	b.n	80010b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a2:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <_sbrk+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20005000 	.word	0x20005000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	20000248 	.word	0x20000248
 80010c4:	20000430 	.word	0x20000430

080010c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010fe:	4b34      	ldr	r3, [pc, #208]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001100:	4a34      	ldr	r2, [pc, #208]	@ (80011d4 <MX_TIM1_Init+0x100>)
 8001102:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001104:	4b32      	ldr	r3, [pc, #200]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001106:	2247      	movs	r2, #71	@ 0x47
 8001108:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001110:	4b2f      	ldr	r3, [pc, #188]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001116:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001118:	4b2d      	ldr	r3, [pc, #180]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800111e:	4b2c      	ldr	r3, [pc, #176]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b2a      	ldr	r3, [pc, #168]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800112a:	4829      	ldr	r0, [pc, #164]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 800112c:	f001 f9f4 	bl	8002518 <HAL_TIM_Base_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001136:	f7ff fe8e 	bl	8000e56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	4619      	mov	r1, r3
 8001146:	4822      	ldr	r0, [pc, #136]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001148:	f001 fdd6 	bl	8002cf8 <HAL_TIM_ConfigClockSource>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001152:	f7ff fe80 	bl	8000e56 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001156:	481e      	ldr	r0, [pc, #120]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001158:	f001 fb28 	bl	80027ac <HAL_TIM_IC_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001162:	f7ff fe78 	bl	8000e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4619      	mov	r1, r3
 8001174:	4816      	ldr	r0, [pc, #88]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 8001176:	f002 fa71 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001180:	f7ff fe69 	bl	8000e56 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001184:	2300      	movs	r3, #0
 8001186:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001188:	2301      	movs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	2208      	movs	r2, #8
 8001198:	4619      	mov	r1, r3
 800119a:	480d      	ldr	r0, [pc, #52]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 800119c:	f001 fc4e 	bl	8002a3c <HAL_TIM_IC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80011a6:	f7ff fe56 	bl	8000e56 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011aa:	2302      	movs	r3, #2
 80011ac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80011ae:	2302      	movs	r3, #2
 80011b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	220c      	movs	r2, #12
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_TIM1_Init+0xfc>)
 80011ba:	f001 fc3f 	bl	8002a3c <HAL_TIM_IC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80011c4:	f7ff fe47 	bl	8000e56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	@ 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2000024c 	.word	0x2000024c
 80011d4:	40012c00 	.word	0x40012c00

080011d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	@ 0x38
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	f107 0320 	add.w	r3, r7, #32
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001208:	4b33      	ldr	r3, [pc, #204]	@ (80012d8 <MX_TIM2_Init+0x100>)
 800120a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800120e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8001210:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <MX_TIM2_Init+0x100>)
 8001212:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001216:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <MX_TIM2_Init+0x100>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800121e:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <MX_TIM2_Init+0x100>)
 8001220:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001224:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b2c      	ldr	r3, [pc, #176]	@ (80012d8 <MX_TIM2_Init+0x100>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	4b2a      	ldr	r3, [pc, #168]	@ (80012d8 <MX_TIM2_Init+0x100>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001232:	4829      	ldr	r0, [pc, #164]	@ (80012d8 <MX_TIM2_Init+0x100>)
 8001234:	f001 f970 	bl	8002518 <HAL_TIM_Base_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800123e:	f7ff fe0a 	bl	8000e56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001248:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124c:	4619      	mov	r1, r3
 800124e:	4822      	ldr	r0, [pc, #136]	@ (80012d8 <MX_TIM2_Init+0x100>)
 8001250:	f001 fd52 	bl	8002cf8 <HAL_TIM_ConfigClockSource>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800125a:	f7ff fdfc 	bl	8000e56 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800125e:	481e      	ldr	r0, [pc, #120]	@ (80012d8 <MX_TIM2_Init+0x100>)
 8001260:	f001 f9a9 	bl	80025b6 <HAL_TIM_PWM_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800126a:	f7ff fdf4 	bl	8000e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	4619      	mov	r1, r3
 800127c:	4816      	ldr	r0, [pc, #88]	@ (80012d8 <MX_TIM2_Init+0x100>)
 800127e:	f002 f9ed 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001288:	f7ff fde5 	bl	8000e56 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128c:	2360      	movs	r3, #96	@ 0x60
 800128e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <MX_TIM2_Init+0x100>)
 80012a4:	f001 fc66 	bl	8002b74 <HAL_TIM_PWM_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80012ae:	f7ff fdd2 	bl	8000e56 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2204      	movs	r2, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <MX_TIM2_Init+0x100>)
 80012ba:	f001 fc5b 	bl	8002b74 <HAL_TIM_PWM_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80012c4:	f7ff fdc7 	bl	8000e56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012c8:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <MX_TIM2_Init+0x100>)
 80012ca:	f000 f861 	bl	8001390 <HAL_TIM_MspPostInit>

}
 80012ce:	bf00      	nop
 80012d0:	3738      	adds	r7, #56	@ 0x38
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000294 	.word	0x20000294

080012dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0318 	add.w	r3, r7, #24
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a23      	ldr	r2, [pc, #140]	@ (8001384 <HAL_TIM_Base_MspInit+0xa8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d12d      	bne.n	8001358 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <HAL_TIM_Base_MspInit+0xac>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <HAL_TIM_Base_MspInit+0xac>)
 8001302:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <HAL_TIM_Base_MspInit+0xac>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <HAL_TIM_Base_MspInit+0xac>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a1b      	ldr	r2, [pc, #108]	@ (8001388 <HAL_TIM_Base_MspInit+0xac>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <HAL_TIM_Base_MspInit+0xac>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800132c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	4619      	mov	r1, r3
 8001340:	4812      	ldr	r0, [pc, #72]	@ (800138c <HAL_TIM_Base_MspInit+0xb0>)
 8001342:	f000 f9eb 	bl	800171c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	201b      	movs	r0, #27
 800134c:	f000 f9af 	bl	80016ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001350:	201b      	movs	r0, #27
 8001352:	f000 f9c8 	bl	80016e6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001356:	e010      	b.n	800137a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001360:	d10b      	bne.n	800137a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_TIM_Base_MspInit+0xac>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <HAL_TIM_Base_MspInit+0xac>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	61d3      	str	r3, [r2, #28]
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_TIM_Base_MspInit+0xac>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	@ 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40012c00 	.word	0x40012c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40010800 	.word	0x40010800

08001390 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013ae:	d117      	bne.n	80013e0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <HAL_TIM_MspPostInit+0x58>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a0c      	ldr	r2, [pc, #48]	@ (80013e8 <HAL_TIM_MspPostInit+0x58>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_TIM_MspPostInit+0x58>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013c8:	2303      	movs	r3, #3
 80013ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	4804      	ldr	r0, [pc, #16]	@ (80013ec <HAL_TIM_MspPostInit+0x5c>)
 80013dc:	f000 f99e 	bl	800171c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010800 	.word	0x40010800

080013f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f0:	f7ff fe6a 	bl	80010c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f4:	480b      	ldr	r0, [pc, #44]	@ (8001424 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013f6:	490c      	ldr	r1, [pc, #48]	@ (8001428 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013f8:	4a0c      	ldr	r2, [pc, #48]	@ (800142c <LoopFillZerobss+0x16>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013fc:	e002      	b.n	8001404 <LoopCopyDataInit>

080013fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001402:	3304      	adds	r3, #4

08001404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001408:	d3f9      	bcc.n	80013fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140a:	4a09      	ldr	r2, [pc, #36]	@ (8001430 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800140c:	4c09      	ldr	r4, [pc, #36]	@ (8001434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001410:	e001      	b.n	8001416 <LoopFillZerobss>

08001412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001414:	3204      	adds	r2, #4

08001416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001418:	d3fb      	bcc.n	8001412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141a:	f003 f973 	bl	8004704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800141e:	f7ff fcb5 	bl	8000d8c <main>
  bx lr
 8001422:	4770      	bx	lr
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800142c:	0800826c 	.word	0x0800826c
  ldr r2, =_sbss
 8001430:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001434:	2000042c 	.word	0x2000042c

08001438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC1_2_IRQHandler>
	...

0800143c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_Init+0x28>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <HAL_Init+0x28>)
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 f923 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001452:	2001      	movs	r0, #1
 8001454:	f000 f808 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001458:	f7ff fd04 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40022000 	.word	0x40022000

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_InitTick+0x54>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_InitTick+0x58>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f93b 	bl	8001702 <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f000 f903 	bl	80016ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	@ (80014c4 <HAL_InitTick+0x5c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000004 	.word	0x20000004
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	20000008 	.word	0x20000008

080014c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <HAL_IncTick+0x1c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <HAL_IncTick+0x20>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a03      	ldr	r2, [pc, #12]	@ (80014e8 <HAL_IncTick+0x20>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	2000000c 	.word	0x2000000c
 80014e8:	200002dc 	.word	0x200002dc

080014ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b02      	ldr	r3, [pc, #8]	@ (80014fc <HAL_GetTick+0x10>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	200002dc 	.word	0x200002dc

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4906      	ldr	r1, [pc, #24]	@ (8001598 <__NVIC_EnableIRQ+0x34>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	@ (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	@ 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	@ 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff90 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff2d 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff42 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff90 	bl	80015f0 <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5f 	bl	800159c <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff35 	bl	8001564 <__NVIC_EnableIRQ>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffa2 	bl	8001654 <SysTick_Config>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b08b      	sub	sp, #44	@ 0x2c
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172e:	e169      	b.n	8001a04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001730:	2201      	movs	r2, #1
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	429a      	cmp	r2, r3
 800174a:	f040 8158 	bne.w	80019fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4a9a      	ldr	r2, [pc, #616]	@ (80019bc <HAL_GPIO_Init+0x2a0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d05e      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 8001758:	4a98      	ldr	r2, [pc, #608]	@ (80019bc <HAL_GPIO_Init+0x2a0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d875      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 800175e:	4a98      	ldr	r2, [pc, #608]	@ (80019c0 <HAL_GPIO_Init+0x2a4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d058      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 8001764:	4a96      	ldr	r2, [pc, #600]	@ (80019c0 <HAL_GPIO_Init+0x2a4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d86f      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 800176a:	4a96      	ldr	r2, [pc, #600]	@ (80019c4 <HAL_GPIO_Init+0x2a8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d052      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 8001770:	4a94      	ldr	r2, [pc, #592]	@ (80019c4 <HAL_GPIO_Init+0x2a8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d869      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 8001776:	4a94      	ldr	r2, [pc, #592]	@ (80019c8 <HAL_GPIO_Init+0x2ac>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d04c      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 800177c:	4a92      	ldr	r2, [pc, #584]	@ (80019c8 <HAL_GPIO_Init+0x2ac>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d863      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 8001782:	4a92      	ldr	r2, [pc, #584]	@ (80019cc <HAL_GPIO_Init+0x2b0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d046      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
 8001788:	4a90      	ldr	r2, [pc, #576]	@ (80019cc <HAL_GPIO_Init+0x2b0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d85d      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 800178e:	2b12      	cmp	r3, #18
 8001790:	d82a      	bhi.n	80017e8 <HAL_GPIO_Init+0xcc>
 8001792:	2b12      	cmp	r3, #18
 8001794:	d859      	bhi.n	800184a <HAL_GPIO_Init+0x12e>
 8001796:	a201      	add	r2, pc, #4	@ (adr r2, 800179c <HAL_GPIO_Init+0x80>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	08001817 	.word	0x08001817
 80017a0:	080017f1 	.word	0x080017f1
 80017a4:	08001803 	.word	0x08001803
 80017a8:	08001845 	.word	0x08001845
 80017ac:	0800184b 	.word	0x0800184b
 80017b0:	0800184b 	.word	0x0800184b
 80017b4:	0800184b 	.word	0x0800184b
 80017b8:	0800184b 	.word	0x0800184b
 80017bc:	0800184b 	.word	0x0800184b
 80017c0:	0800184b 	.word	0x0800184b
 80017c4:	0800184b 	.word	0x0800184b
 80017c8:	0800184b 	.word	0x0800184b
 80017cc:	0800184b 	.word	0x0800184b
 80017d0:	0800184b 	.word	0x0800184b
 80017d4:	0800184b 	.word	0x0800184b
 80017d8:	0800184b 	.word	0x0800184b
 80017dc:	0800184b 	.word	0x0800184b
 80017e0:	080017f9 	.word	0x080017f9
 80017e4:	0800180d 	.word	0x0800180d
 80017e8:	4a79      	ldr	r2, [pc, #484]	@ (80019d0 <HAL_GPIO_Init+0x2b4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ee:	e02c      	b.n	800184a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	623b      	str	r3, [r7, #32]
          break;
 80017f6:	e029      	b.n	800184c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	3304      	adds	r3, #4
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e024      	b.n	800184c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	3308      	adds	r3, #8
 8001808:	623b      	str	r3, [r7, #32]
          break;
 800180a:	e01f      	b.n	800184c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	330c      	adds	r3, #12
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e01a      	b.n	800184c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800181e:	2304      	movs	r3, #4
 8001820:	623b      	str	r3, [r7, #32]
          break;
 8001822:	e013      	b.n	800184c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800182c:	2308      	movs	r3, #8
 800182e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	611a      	str	r2, [r3, #16]
          break;
 8001836:	e009      	b.n	800184c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001838:	2308      	movs	r3, #8
 800183a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	615a      	str	r2, [r3, #20]
          break;
 8001842:	e003      	b.n	800184c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x130>
          break;
 800184a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2bff      	cmp	r3, #255	@ 0xff
 8001850:	d801      	bhi.n	8001856 <HAL_GPIO_Init+0x13a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	e001      	b.n	800185a <HAL_GPIO_Init+0x13e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3304      	adds	r3, #4
 800185a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2bff      	cmp	r3, #255	@ 0xff
 8001860:	d802      	bhi.n	8001868 <HAL_GPIO_Init+0x14c>
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	e002      	b.n	800186e <HAL_GPIO_Init+0x152>
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	3b08      	subs	r3, #8
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	210f      	movs	r1, #15
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	6a39      	ldr	r1, [r7, #32]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	431a      	orrs	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 80b1 	beq.w	80019fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800189c:	4b4d      	ldr	r3, [pc, #308]	@ (80019d4 <HAL_GPIO_Init+0x2b8>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a4c      	ldr	r2, [pc, #304]	@ (80019d4 <HAL_GPIO_Init+0x2b8>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b4a      	ldr	r3, [pc, #296]	@ (80019d4 <HAL_GPIO_Init+0x2b8>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018b4:	4a48      	ldr	r2, [pc, #288]	@ (80019d8 <HAL_GPIO_Init+0x2bc>)
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4013      	ands	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a40      	ldr	r2, [pc, #256]	@ (80019dc <HAL_GPIO_Init+0x2c0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d013      	beq.n	8001908 <HAL_GPIO_Init+0x1ec>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a3f      	ldr	r2, [pc, #252]	@ (80019e0 <HAL_GPIO_Init+0x2c4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d00d      	beq.n	8001904 <HAL_GPIO_Init+0x1e8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a3e      	ldr	r2, [pc, #248]	@ (80019e4 <HAL_GPIO_Init+0x2c8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d007      	beq.n	8001900 <HAL_GPIO_Init+0x1e4>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a3d      	ldr	r2, [pc, #244]	@ (80019e8 <HAL_GPIO_Init+0x2cc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d101      	bne.n	80018fc <HAL_GPIO_Init+0x1e0>
 80018f8:	2303      	movs	r3, #3
 80018fa:	e006      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 80018fc:	2304      	movs	r3, #4
 80018fe:	e004      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 8001900:	2302      	movs	r3, #2
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_GPIO_Init+0x1ee>
 8001908:	2300      	movs	r3, #0
 800190a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800190c:	f002 0203 	and.w	r2, r2, #3
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	4093      	lsls	r3, r2
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800191a:	492f      	ldr	r1, [pc, #188]	@ (80019d8 <HAL_GPIO_Init+0x2bc>)
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001934:	4b2d      	ldr	r3, [pc, #180]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	492c      	ldr	r1, [pc, #176]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001942:	4b2a      	ldr	r3, [pc, #168]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	4928      	ldr	r1, [pc, #160]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 800194c:	4013      	ands	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800195c:	4b23      	ldr	r3, [pc, #140]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	4922      	ldr	r1, [pc, #136]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800196a:	4b20      	ldr	r3, [pc, #128]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	43db      	mvns	r3, r3
 8001972:	491e      	ldr	r1, [pc, #120]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 8001974:	4013      	ands	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4918      	ldr	r1, [pc, #96]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001992:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	43db      	mvns	r3, r3
 800199a:	4914      	ldr	r1, [pc, #80]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 800199c:	4013      	ands	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d021      	beq.n	80019f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ac:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	490e      	ldr	r1, [pc, #56]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]
 80019b8:	e021      	b.n	80019fe <HAL_GPIO_Init+0x2e2>
 80019ba:	bf00      	nop
 80019bc:	10320000 	.word	0x10320000
 80019c0:	10310000 	.word	0x10310000
 80019c4:	10220000 	.word	0x10220000
 80019c8:	10210000 	.word	0x10210000
 80019cc:	10120000 	.word	0x10120000
 80019d0:	10110000 	.word	0x10110000
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010000 	.word	0x40010000
 80019dc:	40010800 	.word	0x40010800
 80019e0:	40010c00 	.word	0x40010c00
 80019e4:	40011000 	.word	0x40011000
 80019e8:	40011400 	.word	0x40011400
 80019ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <HAL_GPIO_Init+0x304>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	4909      	ldr	r1, [pc, #36]	@ (8001a20 <HAL_GPIO_Init+0x304>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	3301      	adds	r3, #1
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f47f ae8e 	bne.w	8001730 <HAL_GPIO_Init+0x14>
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	372c      	adds	r7, #44	@ 0x2c
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	40010400 	.word	0x40010400

08001a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a34:	787b      	ldrb	r3, [r7, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a40:	e003      	b.n	8001a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	041a      	lsls	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	611a      	str	r2, [r3, #16]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a6a:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f806 	bl	8001a84 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40010400 	.word	0x40010400

08001a84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e12b      	b.n	8001d02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff f926 	bl	8000d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2224      	movs	r2, #36	@ 0x24
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001aea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001afa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001afc:	f000 fcda 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8001b00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a81      	ldr	r2, [pc, #516]	@ (8001d0c <HAL_I2C_Init+0x274>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d807      	bhi.n	8001b1c <HAL_I2C_Init+0x84>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4a80      	ldr	r2, [pc, #512]	@ (8001d10 <HAL_I2C_Init+0x278>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	bf94      	ite	ls
 8001b14:	2301      	movls	r3, #1
 8001b16:	2300      	movhi	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	e006      	b.n	8001b2a <HAL_I2C_Init+0x92>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4a7d      	ldr	r2, [pc, #500]	@ (8001d14 <HAL_I2C_Init+0x27c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	bf94      	ite	ls
 8001b24:	2301      	movls	r3, #1
 8001b26:	2300      	movhi	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0e7      	b.n	8001d02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4a78      	ldr	r2, [pc, #480]	@ (8001d18 <HAL_I2C_Init+0x280>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a6a      	ldr	r2, [pc, #424]	@ (8001d0c <HAL_I2C_Init+0x274>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d802      	bhi.n	8001b6c <HAL_I2C_Init+0xd4>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	e009      	b.n	8001b80 <HAL_I2C_Init+0xe8>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	4a69      	ldr	r2, [pc, #420]	@ (8001d1c <HAL_I2C_Init+0x284>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	3301      	adds	r3, #1
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	495c      	ldr	r1, [pc, #368]	@ (8001d0c <HAL_I2C_Init+0x274>)
 8001b9c:	428b      	cmp	r3, r1
 8001b9e:	d819      	bhi.n	8001bd4 <HAL_I2C_Init+0x13c>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1e59      	subs	r1, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bae:	1c59      	adds	r1, r3, #1
 8001bb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001bb4:	400b      	ands	r3, r1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00a      	beq.n	8001bd0 <HAL_I2C_Init+0x138>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1e59      	subs	r1, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bce:	e051      	b.n	8001c74 <HAL_I2C_Init+0x1dc>
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e04f      	b.n	8001c74 <HAL_I2C_Init+0x1dc>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d111      	bne.n	8001c00 <HAL_I2C_Init+0x168>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1e58      	subs	r0, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	440b      	add	r3, r1
 8001bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bf0c      	ite	eq
 8001bf8:	2301      	moveq	r3, #1
 8001bfa:	2300      	movne	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	e012      	b.n	8001c26 <HAL_I2C_Init+0x18e>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1e58      	subs	r0, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	0099      	lsls	r1, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_Init+0x196>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e022      	b.n	8001c74 <HAL_I2C_Init+0x1dc>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10e      	bne.n	8001c54 <HAL_I2C_Init+0x1bc>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1e58      	subs	r0, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6859      	ldr	r1, [r3, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	440b      	add	r3, r1
 8001c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c52:	e00f      	b.n	8001c74 <HAL_I2C_Init+0x1dc>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1e58      	subs	r0, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	0099      	lsls	r1, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	6809      	ldr	r1, [r1, #0]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69da      	ldr	r2, [r3, #28]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ca2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6911      	ldr	r1, [r2, #16]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68d2      	ldr	r2, [r2, #12]
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2220      	movs	r2, #32
 8001cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	000186a0 	.word	0x000186a0
 8001d10:	001e847f 	.word	0x001e847f
 8001d14:	003d08ff 	.word	0x003d08ff
 8001d18:	431bde83 	.word	0x431bde83
 8001d1c:	10624dd3 	.word	0x10624dd3

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e272      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8087 	beq.w	8001e4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d40:	4b92      	ldr	r3, [pc, #584]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d00c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d112      	bne.n	8001d7e <HAL_RCC_OscConfig+0x5e>
 8001d58:	4b8c      	ldr	r3, [pc, #560]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d64:	d10b      	bne.n	8001d7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d66:	4b89      	ldr	r3, [pc, #548]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d06c      	beq.n	8001e4c <HAL_RCC_OscConfig+0x12c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d168      	bne.n	8001e4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e24c      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x76>
 8001d88:	4b80      	ldr	r3, [pc, #512]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e02e      	b.n	8001df4 <HAL_RCC_OscConfig+0xd4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x98>
 8001d9e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7a      	ldr	r2, [pc, #488]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b78      	ldr	r3, [pc, #480]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a77      	ldr	r2, [pc, #476]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001db0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e01d      	b.n	8001df4 <HAL_RCC_OscConfig+0xd4>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0xbc>
 8001dc2:	4b72      	ldr	r3, [pc, #456]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a71      	ldr	r2, [pc, #452]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b6f      	ldr	r3, [pc, #444]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6e      	ldr	r2, [pc, #440]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0xd4>
 8001ddc:	4b6b      	ldr	r3, [pc, #428]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a6a      	ldr	r2, [pc, #424]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b68      	ldr	r3, [pc, #416]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a67      	ldr	r2, [pc, #412]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001df2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fb76 	bl	80014ec <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fb72 	bl	80014ec <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	@ 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e200      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	4b5d      	ldr	r3, [pc, #372]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0xe4>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fb62 	bl	80014ec <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff fb5e 	bl	80014ec <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	@ 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1ec      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	4b53      	ldr	r3, [pc, #332]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x10c>
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d063      	beq.n	8001f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e66:	4b49      	ldr	r3, [pc, #292]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d11c      	bne.n	8001eac <HAL_RCC_OscConfig+0x18c>
 8001e72:	4b46      	ldr	r3, [pc, #280]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d116      	bne.n	8001eac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	4b43      	ldr	r3, [pc, #268]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_RCC_OscConfig+0x176>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e1c0      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e96:	4b3d      	ldr	r3, [pc, #244]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4939      	ldr	r1, [pc, #228]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eaa:	e03a      	b.n	8001f22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb4:	4b36      	ldr	r3, [pc, #216]	@ (8001f90 <HAL_RCC_OscConfig+0x270>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7ff fb17 	bl	80014ec <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7ff fb13 	bl	80014ec <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e1a1      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4927      	ldr	r1, [pc, #156]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]
 8001ef4:	e015      	b.n	8001f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef6:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff faf6 	bl	80014ec <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f04:	f7ff faf2 	bl	80014ec <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e180      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d03a      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d019      	beq.n	8001f6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f36:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <HAL_RCC_OscConfig+0x274>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fad6 	bl	80014ec <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f44:	f7ff fad2 	bl	80014ec <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e160      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f000 faba 	bl	80024dc <RCC_Delay>
 8001f68:	e01c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f70:	f7ff fabc 	bl	80014ec <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f76:	e00f      	b.n	8001f98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f78:	f7ff fab8 	bl	80014ec <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d908      	bls.n	8001f98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e146      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	42420000 	.word	0x42420000
 8001f94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	4b92      	ldr	r3, [pc, #584]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e9      	bne.n	8001f78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80a6 	beq.w	80020fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb6:	4b8b      	ldr	r3, [pc, #556]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10d      	bne.n	8001fde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	4b88      	ldr	r3, [pc, #544]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4a87      	ldr	r2, [pc, #540]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	61d3      	str	r3, [r2, #28]
 8001fce:	4b85      	ldr	r3, [pc, #532]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fde:	4b82      	ldr	r3, [pc, #520]	@ (80021e8 <HAL_RCC_OscConfig+0x4c8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d118      	bne.n	800201c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fea:	4b7f      	ldr	r3, [pc, #508]	@ (80021e8 <HAL_RCC_OscConfig+0x4c8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7e      	ldr	r2, [pc, #504]	@ (80021e8 <HAL_RCC_OscConfig+0x4c8>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff fa79 	bl	80014ec <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7ff fa75 	bl	80014ec <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b64      	cmp	r3, #100	@ 0x64
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e103      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	4b75      	ldr	r3, [pc, #468]	@ (80021e8 <HAL_RCC_OscConfig+0x4c8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x312>
 8002024:	4b6f      	ldr	r3, [pc, #444]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4a6e      	ldr	r2, [pc, #440]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6213      	str	r3, [r2, #32]
 8002030:	e02d      	b.n	800208e <HAL_RCC_OscConfig+0x36e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x334>
 800203a:	4b6a      	ldr	r3, [pc, #424]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a69      	ldr	r2, [pc, #420]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	4b67      	ldr	r3, [pc, #412]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a66      	ldr	r2, [pc, #408]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6213      	str	r3, [r2, #32]
 8002052:	e01c      	b.n	800208e <HAL_RCC_OscConfig+0x36e>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b05      	cmp	r3, #5
 800205a:	d10c      	bne.n	8002076 <HAL_RCC_OscConfig+0x356>
 800205c:	4b61      	ldr	r3, [pc, #388]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4a60      	ldr	r2, [pc, #384]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	6213      	str	r3, [r2, #32]
 8002068:	4b5e      	ldr	r3, [pc, #376]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4a5d      	ldr	r2, [pc, #372]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	e00b      	b.n	800208e <HAL_RCC_OscConfig+0x36e>
 8002076:	4b5b      	ldr	r3, [pc, #364]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a5a      	ldr	r2, [pc, #360]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	4b58      	ldr	r3, [pc, #352]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a57      	ldr	r2, [pc, #348]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	f023 0304 	bic.w	r3, r3, #4
 800208c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d015      	beq.n	80020c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7ff fa29 	bl	80014ec <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff fa25 	bl	80014ec <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0b1      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	4b4b      	ldr	r3, [pc, #300]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ee      	beq.n	800209e <HAL_RCC_OscConfig+0x37e>
 80020c0:	e014      	b.n	80020ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7ff fa13 	bl	80014ec <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7ff fa0f 	bl	80014ec <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e09b      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e0:	4b40      	ldr	r3, [pc, #256]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1ee      	bne.n	80020ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d105      	bne.n	80020fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f2:	4b3c      	ldr	r3, [pc, #240]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a3b      	ldr	r2, [pc, #236]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8087 	beq.w	8002216 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002108:	4b36      	ldr	r3, [pc, #216]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b08      	cmp	r3, #8
 8002112:	d061      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d146      	bne.n	80021aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211c:	4b33      	ldr	r3, [pc, #204]	@ (80021ec <HAL_RCC_OscConfig+0x4cc>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff f9e3 	bl	80014ec <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212a:	f7ff f9df 	bl	80014ec <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e06d      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213c:	4b29      	ldr	r3, [pc, #164]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002150:	d108      	bne.n	8002164 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002152:	4b24      	ldr	r3, [pc, #144]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	4921      	ldr	r1, [pc, #132]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002164:	4b1f      	ldr	r3, [pc, #124]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a19      	ldr	r1, [r3, #32]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	430b      	orrs	r3, r1
 8002176:	491b      	ldr	r1, [pc, #108]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800217c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <HAL_RCC_OscConfig+0x4cc>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff f9b3 	bl	80014ec <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218a:	f7ff f9af 	bl	80014ec <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e03d      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x46a>
 80021a8:	e035      	b.n	8002216 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <HAL_RCC_OscConfig+0x4cc>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff f99c 	bl	80014ec <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff f998 	bl	80014ec <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e026      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ca:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x498>
 80021d6:	e01e      	b.n	8002216 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e019      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40007000 	.word	0x40007000
 80021ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_RCC_OscConfig+0x500>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	429a      	cmp	r2, r3
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000

08002224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0d0      	b.n	80023da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b6a      	ldr	r3, [pc, #424]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d910      	bls.n	8002268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b67      	ldr	r3, [pc, #412]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 0207 	bic.w	r2, r3, #7
 800224e:	4965      	ldr	r1, [pc, #404]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b63      	ldr	r3, [pc, #396]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0b8      	b.n	80023da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002280:	4b59      	ldr	r3, [pc, #356]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a58      	ldr	r2, [pc, #352]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800228a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002298:	4b53      	ldr	r3, [pc, #332]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a52      	ldr	r2, [pc, #328]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b50      	ldr	r3, [pc, #320]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	494d      	ldr	r1, [pc, #308]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d040      	beq.n	8002344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b47      	ldr	r3, [pc, #284]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d115      	bne.n	8002302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e07f      	b.n	80023da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e2:	4b41      	ldr	r3, [pc, #260]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e073      	b.n	80023da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	4b3d      	ldr	r3, [pc, #244]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e06b      	b.n	80023da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002302:	4b39      	ldr	r3, [pc, #228]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f023 0203 	bic.w	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4936      	ldr	r1, [pc, #216]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002314:	f7ff f8ea 	bl	80014ec <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	e00a      	b.n	8002332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231c:	f7ff f8e6 	bl	80014ec <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e053      	b.n	80023da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	4b2d      	ldr	r3, [pc, #180]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 020c 	and.w	r2, r3, #12
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	429a      	cmp	r2, r3
 8002342:	d1eb      	bne.n	800231c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002344:	4b27      	ldr	r3, [pc, #156]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d210      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b24      	ldr	r3, [pc, #144]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 0207 	bic.w	r2, r3, #7
 800235a:	4922      	ldr	r1, [pc, #136]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b20      	ldr	r3, [pc, #128]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e032      	b.n	80023da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002380:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4916      	ldr	r1, [pc, #88]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800239e:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	490e      	ldr	r1, [pc, #56]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023b2:	f000 f821 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	490a      	ldr	r1, [pc, #40]	@ (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80023c4:	5ccb      	ldrb	r3, [r1, r3]
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a09      	ldr	r2, [pc, #36]	@ (80023f0 <HAL_RCC_ClockConfig+0x1cc>)
 80023cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ce:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <HAL_RCC_ClockConfig+0x1d0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff f848 	bl	8001468 <HAL_InitTick>

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40022000 	.word	0x40022000
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08007e08 	.word	0x08007e08
 80023f0:	20000004 	.word	0x20000004
 80023f4:	20000008 	.word	0x20000008

080023f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002412:	4b1e      	ldr	r3, [pc, #120]	@ (800248c <HAL_RCC_GetSysClockFreq+0x94>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d002      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x30>
 8002422:	2b08      	cmp	r3, #8
 8002424:	d003      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0x36>
 8002426:	e027      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x98>)
 800242a:	613b      	str	r3, [r7, #16]
      break;
 800242c:	e027      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	0c9b      	lsrs	r3, r3, #18
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	4a17      	ldr	r2, [pc, #92]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002438:	5cd3      	ldrb	r3, [r2, r3]
 800243a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d010      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_RCC_GetSysClockFreq+0x94>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	0c5b      	lsrs	r3, r3, #17
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	4a11      	ldr	r2, [pc, #68]	@ (8002498 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x98>)
 800245a:	fb03 f202 	mul.w	r2, r3, r2
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	e004      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a0c      	ldr	r2, [pc, #48]	@ (800249c <HAL_RCC_GetSysClockFreq+0xa4>)
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	613b      	str	r3, [r7, #16]
      break;
 8002476:	e002      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x98>)
 800247a:	613b      	str	r3, [r7, #16]
      break;
 800247c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247e:	693b      	ldr	r3, [r7, #16]
}
 8002480:	4618      	mov	r0, r3
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	007a1200 	.word	0x007a1200
 8002494:	08007e20 	.word	0x08007e20
 8002498:	08007e30 	.word	0x08007e30
 800249c:	003d0900 	.word	0x003d0900

080024a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a4:	4b02      	ldr	r3, [pc, #8]	@ (80024b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024b8:	f7ff fff2 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4903      	ldr	r1, [pc, #12]	@ (80024d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	08007e18 	.word	0x08007e18

080024dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <RCC_Delay+0x34>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002514 <RCC_Delay+0x38>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0a5b      	lsrs	r3, r3, #9
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024f8:	bf00      	nop
  }
  while (Delay --);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	60fa      	str	r2, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f9      	bne.n	80024f8 <RCC_Delay+0x1c>
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	20000004 	.word	0x20000004
 8002514:	10624dd3 	.word	0x10624dd3

08002518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e041      	b.n	80025ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe fecc 	bl	80012dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f000 fcc2 	bl	8002ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e041      	b.n	800264c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f839 	bl	8002654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3304      	adds	r3, #4
 80025f2:	4619      	mov	r1, r3
 80025f4:	4610      	mov	r0, r2
 80025f6:	f000 fc73 	bl	8002ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
	...

08002668 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_TIM_PWM_Start+0x24>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e022      	b.n	80026d2 <HAL_TIM_PWM_Start+0x6a>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b04      	cmp	r3, #4
 8002690:	d109      	bne.n	80026a6 <HAL_TIM_PWM_Start+0x3e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	bf14      	ite	ne
 800269e:	2301      	movne	r3, #1
 80026a0:	2300      	moveq	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	e015      	b.n	80026d2 <HAL_TIM_PWM_Start+0x6a>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d109      	bne.n	80026c0 <HAL_TIM_PWM_Start+0x58>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	bf14      	ite	ne
 80026b8:	2301      	movne	r3, #1
 80026ba:	2300      	moveq	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	e008      	b.n	80026d2 <HAL_TIM_PWM_Start+0x6a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	bf14      	ite	ne
 80026cc:	2301      	movne	r3, #1
 80026ce:	2300      	moveq	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e05e      	b.n	8002798 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d104      	bne.n	80026ea <HAL_TIM_PWM_Start+0x82>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026e8:	e013      	b.n	8002712 <HAL_TIM_PWM_Start+0xaa>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d104      	bne.n	80026fa <HAL_TIM_PWM_Start+0x92>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026f8:	e00b      	b.n	8002712 <HAL_TIM_PWM_Start+0xaa>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d104      	bne.n	800270a <HAL_TIM_PWM_Start+0xa2>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002708:	e003      	b.n	8002712 <HAL_TIM_PWM_Start+0xaa>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2201      	movs	r2, #1
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f000 ff79 	bl	8003612 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1e      	ldr	r2, [pc, #120]	@ (80027a0 <HAL_TIM_PWM_Start+0x138>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d107      	bne.n	800273a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002738:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a18      	ldr	r2, [pc, #96]	@ (80027a0 <HAL_TIM_PWM_Start+0x138>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00e      	beq.n	8002762 <HAL_TIM_PWM_Start+0xfa>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800274c:	d009      	beq.n	8002762 <HAL_TIM_PWM_Start+0xfa>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a14      	ldr	r2, [pc, #80]	@ (80027a4 <HAL_TIM_PWM_Start+0x13c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d004      	beq.n	8002762 <HAL_TIM_PWM_Start+0xfa>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a12      	ldr	r2, [pc, #72]	@ (80027a8 <HAL_TIM_PWM_Start+0x140>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d111      	bne.n	8002786 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b06      	cmp	r3, #6
 8002772:	d010      	beq.n	8002796 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002784:	e007      	b.n	8002796 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40000800 	.word	0x40000800

080027ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e041      	b.n	8002842 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f839 	bl	800284a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f000 fb78 	bl	8002ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d020      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01b      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0202 	mvn.w	r2, #2
 8002890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 faff 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 faf2 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fb01 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d020      	beq.n	800290c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01b      	beq.n	800290c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0204 	mvn.w	r2, #4
 80028dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fad9 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 80028f8:	e005      	b.n	8002906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 facc 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fadb 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d020      	beq.n	8002958 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01b      	beq.n	8002958 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0208 	mvn.w	r2, #8
 8002928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2204      	movs	r2, #4
 800292e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fab3 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 faa6 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fab5 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d020      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0210 	mvn.w	r2, #16
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2208      	movs	r2, #8
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa8d 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa80 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fa8f 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0201 	mvn.w	r2, #1
 80029c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fa5f 	bl	8002e86 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fe9f 	bl	800372a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fa5f 	bl	8002ece <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00c      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0220 	mvn.w	r2, #32
 8002a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fe72 	bl	8003718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e088      	b.n	8002b6c <HAL_TIM_IC_ConfigChannel+0x130>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d11b      	bne.n	8002aa0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002a78:	f000 fc28 	bl	80032cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 020c 	bic.w	r2, r2, #12
 8002a8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6999      	ldr	r1, [r3, #24]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	619a      	str	r2, [r3, #24]
 8002a9e:	e060      	b.n	8002b62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d11c      	bne.n	8002ae0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002ab6:	f000 fc91 	bl	80033dc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002ac8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6999      	ldr	r1, [r3, #24]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	021a      	lsls	r2, r3, #8
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	619a      	str	r2, [r3, #24]
 8002ade:	e040      	b.n	8002b62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11b      	bne.n	8002b1e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002af6:	f000 fcdc 	bl	80034b2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 020c 	bic.w	r2, r2, #12
 8002b08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69d9      	ldr	r1, [r3, #28]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	61da      	str	r2, [r3, #28]
 8002b1c:	e021      	b.n	8002b62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b0c      	cmp	r3, #12
 8002b22:	d11c      	bne.n	8002b5e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002b34:	f000 fcf8 	bl	8003528 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002b46:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69d9      	ldr	r1, [r3, #28]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	021a      	lsls	r2, r3, #8
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	61da      	str	r2, [r3, #28]
 8002b5c:	e001      	b.n	8002b62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e0ae      	b.n	8002cf0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	f200 809f 	bhi.w	8002ce0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba8:	08002bdd 	.word	0x08002bdd
 8002bac:	08002ce1 	.word	0x08002ce1
 8002bb0:	08002ce1 	.word	0x08002ce1
 8002bb4:	08002ce1 	.word	0x08002ce1
 8002bb8:	08002c1d 	.word	0x08002c1d
 8002bbc:	08002ce1 	.word	0x08002ce1
 8002bc0:	08002ce1 	.word	0x08002ce1
 8002bc4:	08002ce1 	.word	0x08002ce1
 8002bc8:	08002c5f 	.word	0x08002c5f
 8002bcc:	08002ce1 	.word	0x08002ce1
 8002bd0:	08002ce1 	.word	0x08002ce1
 8002bd4:	08002ce1 	.word	0x08002ce1
 8002bd8:	08002c9f 	.word	0x08002c9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f9ea 	bl	8002fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0208 	orr.w	r2, r2, #8
 8002bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0204 	bic.w	r2, r2, #4
 8002c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6999      	ldr	r1, [r3, #24]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	619a      	str	r2, [r3, #24]
      break;
 8002c1a:	e064      	b.n	8002ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fa30 	bl	8003088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6999      	ldr	r1, [r3, #24]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	021a      	lsls	r2, r3, #8
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	619a      	str	r2, [r3, #24]
      break;
 8002c5c:	e043      	b.n	8002ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fa79 	bl	800315c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69da      	ldr	r2, [r3, #28]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0208 	orr.w	r2, r2, #8
 8002c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0204 	bic.w	r2, r2, #4
 8002c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69d9      	ldr	r1, [r3, #28]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	61da      	str	r2, [r3, #28]
      break;
 8002c9c:	e023      	b.n	8002ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fac3 	bl	8003230 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69d9      	ldr	r1, [r3, #28]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	021a      	lsls	r2, r3, #8
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	61da      	str	r2, [r3, #28]
      break;
 8002cde:	e002      	b.n	8002ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ce4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_TIM_ConfigClockSource+0x1c>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e0b4      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x186>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d4c:	d03e      	beq.n	8002dcc <HAL_TIM_ConfigClockSource+0xd4>
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d52:	f200 8087 	bhi.w	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5a:	f000 8086 	beq.w	8002e6a <HAL_TIM_ConfigClockSource+0x172>
 8002d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d62:	d87f      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b70      	cmp	r3, #112	@ 0x70
 8002d66:	d01a      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0xa6>
 8002d68:	2b70      	cmp	r3, #112	@ 0x70
 8002d6a:	d87b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d6c:	2b60      	cmp	r3, #96	@ 0x60
 8002d6e:	d050      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x11a>
 8002d70:	2b60      	cmp	r3, #96	@ 0x60
 8002d72:	d877      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d74:	2b50      	cmp	r3, #80	@ 0x50
 8002d76:	d03c      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xfa>
 8002d78:	2b50      	cmp	r3, #80	@ 0x50
 8002d7a:	d873      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	2b40      	cmp	r3, #64	@ 0x40
 8002d7e:	d058      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x13a>
 8002d80:	2b40      	cmp	r3, #64	@ 0x40
 8002d82:	d86f      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d84:	2b30      	cmp	r3, #48	@ 0x30
 8002d86:	d064      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d88:	2b30      	cmp	r3, #48	@ 0x30
 8002d8a:	d86b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d060      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d867      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d05c      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d05a      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d9c:	e062      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dae:	f000 fc11 	bl	80035d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002dc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	609a      	str	r2, [r3, #8]
      break;
 8002dca:	e04f      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ddc:	f000 fbfa 	bl	80035d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dee:	609a      	str	r2, [r3, #8]
      break;
 8002df0:	e03c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f000 fabe 	bl	8003380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2150      	movs	r1, #80	@ 0x50
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fbc8 	bl	80035a0 <TIM_ITRx_SetConfig>
      break;
 8002e10:	e02c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 fb18 	bl	8003454 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2160      	movs	r1, #96	@ 0x60
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fbb8 	bl	80035a0 <TIM_ITRx_SetConfig>
      break;
 8002e30:	e01c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f000 fa9e 	bl	8003380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2140      	movs	r1, #64	@ 0x40
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fba8 	bl	80035a0 <TIM_ITRx_SetConfig>
      break;
 8002e50:	e00c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f000 fb9f 	bl	80035a0 <TIM_ITRx_SetConfig>
      break;
 8002e62:	e003      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
      break;
 8002e68:	e000      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8002fb0 <TIM_Base_SetConfig+0xd0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00b      	beq.n	8002f10 <TIM_Base_SetConfig+0x30>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002efe:	d007      	beq.n	8002f10 <TIM_Base_SetConfig+0x30>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb4 <TIM_Base_SetConfig+0xd4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d003      	beq.n	8002f10 <TIM_Base_SetConfig+0x30>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb8 <TIM_Base_SetConfig+0xd8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d108      	bne.n	8002f22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a22      	ldr	r2, [pc, #136]	@ (8002fb0 <TIM_Base_SetConfig+0xd0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00b      	beq.n	8002f42 <TIM_Base_SetConfig+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f30:	d007      	beq.n	8002f42 <TIM_Base_SetConfig+0x62>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb4 <TIM_Base_SetConfig+0xd4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d003      	beq.n	8002f42 <TIM_Base_SetConfig+0x62>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb8 <TIM_Base_SetConfig+0xd8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d108      	bne.n	8002f54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb0 <TIM_Base_SetConfig+0xd0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f023 0201 	bic.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800

08002fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f023 0201 	bic.w	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f023 0302 	bic.w	r3, r3, #2
 8003004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a1c      	ldr	r2, [pc, #112]	@ (8003084 <TIM_OC1_SetConfig+0xc8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d10c      	bne.n	8003032 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f023 0308 	bic.w	r3, r3, #8
 800301e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a13      	ldr	r2, [pc, #76]	@ (8003084 <TIM_OC1_SetConfig+0xc8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d111      	bne.n	800305e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	621a      	str	r2, [r3, #32]
}
 8003078:	bf00      	nop
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40012c00 	.word	0x40012c00

08003088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f023 0210 	bic.w	r2, r3, #16
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f023 0320 	bic.w	r3, r3, #32
 80030d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003158 <TIM_OC2_SetConfig+0xd0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10d      	bne.n	8003104 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003102:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a14      	ldr	r2, [pc, #80]	@ (8003158 <TIM_OC2_SetConfig+0xd0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d113      	bne.n	8003134 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800311a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	621a      	str	r2, [r3, #32]
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	40012c00 	.word	0x40012c00

0800315c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1d      	ldr	r2, [pc, #116]	@ (800322c <TIM_OC3_SetConfig+0xd0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d10d      	bne.n	80031d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a14      	ldr	r2, [pc, #80]	@ (800322c <TIM_OC3_SetConfig+0xd0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d113      	bne.n	8003206 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	621a      	str	r2, [r3, #32]
}
 8003220:	bf00      	nop
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40012c00 	.word	0x40012c00

08003230 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800325e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800327a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	031b      	lsls	r3, r3, #12
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a0f      	ldr	r2, [pc, #60]	@ (80032c8 <TIM_OC4_SetConfig+0x98>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d109      	bne.n	80032a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	40012c00 	.word	0x40012c00

080032cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f023 0201 	bic.w	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003374 <TIM_TI1_SetConfig+0xa8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00b      	beq.n	8003312 <TIM_TI1_SetConfig+0x46>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003300:	d007      	beq.n	8003312 <TIM_TI1_SetConfig+0x46>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a1c      	ldr	r2, [pc, #112]	@ (8003378 <TIM_TI1_SetConfig+0xac>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_TI1_SetConfig+0x46>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a1b      	ldr	r2, [pc, #108]	@ (800337c <TIM_TI1_SetConfig+0xb0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <TIM_TI1_SetConfig+0x4a>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <TIM_TI1_SetConfig+0x4c>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f023 0303 	bic.w	r3, r3, #3
 8003322:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	e003      	b.n	8003336 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800333c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	b2db      	uxtb	r3, r3
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f023 030a 	bic.w	r3, r3, #10
 8003350:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f003 030a 	and.w	r3, r3, #10
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800

08003380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f023 0201 	bic.w	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f023 030a 	bic.w	r3, r3, #10
 80033bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	621a      	str	r2, [r3, #32]
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f023 0210 	bic.w	r2, r3, #16
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800341a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	031b      	lsls	r3, r3, #12
 8003420:	b29b      	uxth	r3, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800342e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f023 0210 	bic.w	r2, r3, #16
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800347e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	031b      	lsls	r3, r3, #12
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003490:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	621a      	str	r2, [r3, #32]
}
 80034a8:	bf00      	nop
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b087      	sub	sp, #28
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003502:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	621a      	str	r2, [r3, #32]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003554:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	021b      	lsls	r3, r3, #8
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003566:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	031b      	lsls	r3, r3, #12
 800356c:	b29b      	uxth	r3, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800357a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	031b      	lsls	r3, r3, #12
 8003580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	f043 0307 	orr.w	r3, r3, #7
 80035c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	609a      	str	r2, [r3, #8]
}
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	021a      	lsls	r2, r3, #8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003612:	b480      	push	{r7}
 8003614:	b087      	sub	sp, #28
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	2201      	movs	r2, #1
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1a      	ldr	r2, [r3, #32]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	43db      	mvns	r3, r3
 8003634:	401a      	ands	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a1a      	ldr	r2, [r3, #32]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	431a      	orrs	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
}
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
	...

0800365c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003670:	2302      	movs	r3, #2
 8003672:	e046      	b.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a16      	ldr	r2, [pc, #88]	@ (800370c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c0:	d009      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a12      	ldr	r2, [pc, #72]	@ (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a10      	ldr	r2, [pc, #64]	@ (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10c      	bne.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800

08003718 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <__cvt>:
 800373c:	2b00      	cmp	r3, #0
 800373e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003742:	461d      	mov	r5, r3
 8003744:	bfbb      	ittet	lt
 8003746:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800374a:	461d      	movlt	r5, r3
 800374c:	2300      	movge	r3, #0
 800374e:	232d      	movlt	r3, #45	@ 0x2d
 8003750:	b088      	sub	sp, #32
 8003752:	4614      	mov	r4, r2
 8003754:	bfb8      	it	lt
 8003756:	4614      	movlt	r4, r2
 8003758:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800375a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800375c:	7013      	strb	r3, [r2, #0]
 800375e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003760:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003764:	f023 0820 	bic.w	r8, r3, #32
 8003768:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800376c:	d005      	beq.n	800377a <__cvt+0x3e>
 800376e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003772:	d100      	bne.n	8003776 <__cvt+0x3a>
 8003774:	3601      	adds	r6, #1
 8003776:	2302      	movs	r3, #2
 8003778:	e000      	b.n	800377c <__cvt+0x40>
 800377a:	2303      	movs	r3, #3
 800377c:	aa07      	add	r2, sp, #28
 800377e:	9204      	str	r2, [sp, #16]
 8003780:	aa06      	add	r2, sp, #24
 8003782:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003786:	e9cd 3600 	strd	r3, r6, [sp]
 800378a:	4622      	mov	r2, r4
 800378c:	462b      	mov	r3, r5
 800378e:	f001 f88b 	bl	80048a8 <_dtoa_r>
 8003792:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003796:	4607      	mov	r7, r0
 8003798:	d119      	bne.n	80037ce <__cvt+0x92>
 800379a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800379c:	07db      	lsls	r3, r3, #31
 800379e:	d50e      	bpl.n	80037be <__cvt+0x82>
 80037a0:	eb00 0906 	add.w	r9, r0, r6
 80037a4:	2200      	movs	r2, #0
 80037a6:	2300      	movs	r3, #0
 80037a8:	4620      	mov	r0, r4
 80037aa:	4629      	mov	r1, r5
 80037ac:	f7fd f8fc 	bl	80009a8 <__aeabi_dcmpeq>
 80037b0:	b108      	cbz	r0, 80037b6 <__cvt+0x7a>
 80037b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80037b6:	2230      	movs	r2, #48	@ 0x30
 80037b8:	9b07      	ldr	r3, [sp, #28]
 80037ba:	454b      	cmp	r3, r9
 80037bc:	d31e      	bcc.n	80037fc <__cvt+0xc0>
 80037be:	4638      	mov	r0, r7
 80037c0:	9b07      	ldr	r3, [sp, #28]
 80037c2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80037c4:	1bdb      	subs	r3, r3, r7
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	b008      	add	sp, #32
 80037ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80037d2:	eb00 0906 	add.w	r9, r0, r6
 80037d6:	d1e5      	bne.n	80037a4 <__cvt+0x68>
 80037d8:	7803      	ldrb	r3, [r0, #0]
 80037da:	2b30      	cmp	r3, #48	@ 0x30
 80037dc:	d10a      	bne.n	80037f4 <__cvt+0xb8>
 80037de:	2200      	movs	r2, #0
 80037e0:	2300      	movs	r3, #0
 80037e2:	4620      	mov	r0, r4
 80037e4:	4629      	mov	r1, r5
 80037e6:	f7fd f8df 	bl	80009a8 <__aeabi_dcmpeq>
 80037ea:	b918      	cbnz	r0, 80037f4 <__cvt+0xb8>
 80037ec:	f1c6 0601 	rsb	r6, r6, #1
 80037f0:	f8ca 6000 	str.w	r6, [sl]
 80037f4:	f8da 3000 	ldr.w	r3, [sl]
 80037f8:	4499      	add	r9, r3
 80037fa:	e7d3      	b.n	80037a4 <__cvt+0x68>
 80037fc:	1c59      	adds	r1, r3, #1
 80037fe:	9107      	str	r1, [sp, #28]
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e7d9      	b.n	80037b8 <__cvt+0x7c>

08003804 <__exponent>:
 8003804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003806:	2900      	cmp	r1, #0
 8003808:	bfb6      	itet	lt
 800380a:	232d      	movlt	r3, #45	@ 0x2d
 800380c:	232b      	movge	r3, #43	@ 0x2b
 800380e:	4249      	neglt	r1, r1
 8003810:	2909      	cmp	r1, #9
 8003812:	7002      	strb	r2, [r0, #0]
 8003814:	7043      	strb	r3, [r0, #1]
 8003816:	dd29      	ble.n	800386c <__exponent+0x68>
 8003818:	f10d 0307 	add.w	r3, sp, #7
 800381c:	461d      	mov	r5, r3
 800381e:	270a      	movs	r7, #10
 8003820:	fbb1 f6f7 	udiv	r6, r1, r7
 8003824:	461a      	mov	r2, r3
 8003826:	fb07 1416 	mls	r4, r7, r6, r1
 800382a:	3430      	adds	r4, #48	@ 0x30
 800382c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003830:	460c      	mov	r4, r1
 8003832:	2c63      	cmp	r4, #99	@ 0x63
 8003834:	4631      	mov	r1, r6
 8003836:	f103 33ff 	add.w	r3, r3, #4294967295
 800383a:	dcf1      	bgt.n	8003820 <__exponent+0x1c>
 800383c:	3130      	adds	r1, #48	@ 0x30
 800383e:	1e94      	subs	r4, r2, #2
 8003840:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003844:	4623      	mov	r3, r4
 8003846:	1c41      	adds	r1, r0, #1
 8003848:	42ab      	cmp	r3, r5
 800384a:	d30a      	bcc.n	8003862 <__exponent+0x5e>
 800384c:	f10d 0309 	add.w	r3, sp, #9
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	42ac      	cmp	r4, r5
 8003854:	bf88      	it	hi
 8003856:	2300      	movhi	r3, #0
 8003858:	3302      	adds	r3, #2
 800385a:	4403      	add	r3, r0
 800385c:	1a18      	subs	r0, r3, r0
 800385e:	b003      	add	sp, #12
 8003860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003862:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003866:	f801 6f01 	strb.w	r6, [r1, #1]!
 800386a:	e7ed      	b.n	8003848 <__exponent+0x44>
 800386c:	2330      	movs	r3, #48	@ 0x30
 800386e:	3130      	adds	r1, #48	@ 0x30
 8003870:	7083      	strb	r3, [r0, #2]
 8003872:	70c1      	strb	r1, [r0, #3]
 8003874:	1d03      	adds	r3, r0, #4
 8003876:	e7f1      	b.n	800385c <__exponent+0x58>

08003878 <_printf_float>:
 8003878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800387c:	b091      	sub	sp, #68	@ 0x44
 800387e:	460c      	mov	r4, r1
 8003880:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003884:	4616      	mov	r6, r2
 8003886:	461f      	mov	r7, r3
 8003888:	4605      	mov	r5, r0
 800388a:	f000 feeb 	bl	8004664 <_localeconv_r>
 800388e:	6803      	ldr	r3, [r0, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	9308      	str	r3, [sp, #32]
 8003894:	f7fc fc5c 	bl	8000150 <strlen>
 8003898:	2300      	movs	r3, #0
 800389a:	930e      	str	r3, [sp, #56]	@ 0x38
 800389c:	f8d8 3000 	ldr.w	r3, [r8]
 80038a0:	9009      	str	r0, [sp, #36]	@ 0x24
 80038a2:	3307      	adds	r3, #7
 80038a4:	f023 0307 	bic.w	r3, r3, #7
 80038a8:	f103 0208 	add.w	r2, r3, #8
 80038ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80038b0:	f8d4 b000 	ldr.w	fp, [r4]
 80038b4:	f8c8 2000 	str.w	r2, [r8]
 80038b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80038bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80038c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80038c2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80038c6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80038ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80038d2:	4b9c      	ldr	r3, [pc, #624]	@ (8003b44 <_printf_float+0x2cc>)
 80038d4:	f7fd f89a 	bl	8000a0c <__aeabi_dcmpun>
 80038d8:	bb70      	cbnz	r0, 8003938 <_printf_float+0xc0>
 80038da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80038de:	f04f 32ff 	mov.w	r2, #4294967295
 80038e2:	4b98      	ldr	r3, [pc, #608]	@ (8003b44 <_printf_float+0x2cc>)
 80038e4:	f7fd f874 	bl	80009d0 <__aeabi_dcmple>
 80038e8:	bb30      	cbnz	r0, 8003938 <_printf_float+0xc0>
 80038ea:	2200      	movs	r2, #0
 80038ec:	2300      	movs	r3, #0
 80038ee:	4640      	mov	r0, r8
 80038f0:	4649      	mov	r1, r9
 80038f2:	f7fd f863 	bl	80009bc <__aeabi_dcmplt>
 80038f6:	b110      	cbz	r0, 80038fe <_printf_float+0x86>
 80038f8:	232d      	movs	r3, #45	@ 0x2d
 80038fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038fe:	4a92      	ldr	r2, [pc, #584]	@ (8003b48 <_printf_float+0x2d0>)
 8003900:	4b92      	ldr	r3, [pc, #584]	@ (8003b4c <_printf_float+0x2d4>)
 8003902:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003906:	bf8c      	ite	hi
 8003908:	4690      	movhi	r8, r2
 800390a:	4698      	movls	r8, r3
 800390c:	2303      	movs	r3, #3
 800390e:	f04f 0900 	mov.w	r9, #0
 8003912:	6123      	str	r3, [r4, #16]
 8003914:	f02b 0304 	bic.w	r3, fp, #4
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	4633      	mov	r3, r6
 800391c:	4621      	mov	r1, r4
 800391e:	4628      	mov	r0, r5
 8003920:	9700      	str	r7, [sp, #0]
 8003922:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003924:	f000 f9d4 	bl	8003cd0 <_printf_common>
 8003928:	3001      	adds	r0, #1
 800392a:	f040 8090 	bne.w	8003a4e <_printf_float+0x1d6>
 800392e:	f04f 30ff 	mov.w	r0, #4294967295
 8003932:	b011      	add	sp, #68	@ 0x44
 8003934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003938:	4642      	mov	r2, r8
 800393a:	464b      	mov	r3, r9
 800393c:	4640      	mov	r0, r8
 800393e:	4649      	mov	r1, r9
 8003940:	f7fd f864 	bl	8000a0c <__aeabi_dcmpun>
 8003944:	b148      	cbz	r0, 800395a <_printf_float+0xe2>
 8003946:	464b      	mov	r3, r9
 8003948:	2b00      	cmp	r3, #0
 800394a:	bfb8      	it	lt
 800394c:	232d      	movlt	r3, #45	@ 0x2d
 800394e:	4a80      	ldr	r2, [pc, #512]	@ (8003b50 <_printf_float+0x2d8>)
 8003950:	bfb8      	it	lt
 8003952:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003956:	4b7f      	ldr	r3, [pc, #508]	@ (8003b54 <_printf_float+0x2dc>)
 8003958:	e7d3      	b.n	8003902 <_printf_float+0x8a>
 800395a:	6863      	ldr	r3, [r4, #4]
 800395c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	d13f      	bne.n	80039e4 <_printf_float+0x16c>
 8003964:	2306      	movs	r3, #6
 8003966:	6063      	str	r3, [r4, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800396e:	6023      	str	r3, [r4, #0]
 8003970:	9206      	str	r2, [sp, #24]
 8003972:	aa0e      	add	r2, sp, #56	@ 0x38
 8003974:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003978:	aa0d      	add	r2, sp, #52	@ 0x34
 800397a:	9203      	str	r2, [sp, #12]
 800397c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003980:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003984:	6863      	ldr	r3, [r4, #4]
 8003986:	4642      	mov	r2, r8
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	4628      	mov	r0, r5
 800398c:	464b      	mov	r3, r9
 800398e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003990:	f7ff fed4 	bl	800373c <__cvt>
 8003994:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003996:	4680      	mov	r8, r0
 8003998:	2947      	cmp	r1, #71	@ 0x47
 800399a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800399c:	d128      	bne.n	80039f0 <_printf_float+0x178>
 800399e:	1cc8      	adds	r0, r1, #3
 80039a0:	db02      	blt.n	80039a8 <_printf_float+0x130>
 80039a2:	6863      	ldr	r3, [r4, #4]
 80039a4:	4299      	cmp	r1, r3
 80039a6:	dd40      	ble.n	8003a2a <_printf_float+0x1b2>
 80039a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80039ac:	fa5f fa8a 	uxtb.w	sl, sl
 80039b0:	4652      	mov	r2, sl
 80039b2:	3901      	subs	r1, #1
 80039b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80039b8:	910d      	str	r1, [sp, #52]	@ 0x34
 80039ba:	f7ff ff23 	bl	8003804 <__exponent>
 80039be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80039c0:	4681      	mov	r9, r0
 80039c2:	1813      	adds	r3, r2, r0
 80039c4:	2a01      	cmp	r2, #1
 80039c6:	6123      	str	r3, [r4, #16]
 80039c8:	dc02      	bgt.n	80039d0 <_printf_float+0x158>
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	07d2      	lsls	r2, r2, #31
 80039ce:	d501      	bpl.n	80039d4 <_printf_float+0x15c>
 80039d0:	3301      	adds	r3, #1
 80039d2:	6123      	str	r3, [r4, #16]
 80039d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d09e      	beq.n	800391a <_printf_float+0xa2>
 80039dc:	232d      	movs	r3, #45	@ 0x2d
 80039de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039e2:	e79a      	b.n	800391a <_printf_float+0xa2>
 80039e4:	2947      	cmp	r1, #71	@ 0x47
 80039e6:	d1bf      	bne.n	8003968 <_printf_float+0xf0>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1bd      	bne.n	8003968 <_printf_float+0xf0>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e7ba      	b.n	8003966 <_printf_float+0xee>
 80039f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80039f4:	d9dc      	bls.n	80039b0 <_printf_float+0x138>
 80039f6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80039fa:	d118      	bne.n	8003a2e <_printf_float+0x1b6>
 80039fc:	2900      	cmp	r1, #0
 80039fe:	6863      	ldr	r3, [r4, #4]
 8003a00:	dd0b      	ble.n	8003a1a <_printf_float+0x1a2>
 8003a02:	6121      	str	r1, [r4, #16]
 8003a04:	b913      	cbnz	r3, 8003a0c <_printf_float+0x194>
 8003a06:	6822      	ldr	r2, [r4, #0]
 8003a08:	07d0      	lsls	r0, r2, #31
 8003a0a:	d502      	bpl.n	8003a12 <_printf_float+0x19a>
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	440b      	add	r3, r1
 8003a10:	6123      	str	r3, [r4, #16]
 8003a12:	f04f 0900 	mov.w	r9, #0
 8003a16:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003a18:	e7dc      	b.n	80039d4 <_printf_float+0x15c>
 8003a1a:	b913      	cbnz	r3, 8003a22 <_printf_float+0x1aa>
 8003a1c:	6822      	ldr	r2, [r4, #0]
 8003a1e:	07d2      	lsls	r2, r2, #31
 8003a20:	d501      	bpl.n	8003a26 <_printf_float+0x1ae>
 8003a22:	3302      	adds	r3, #2
 8003a24:	e7f4      	b.n	8003a10 <_printf_float+0x198>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e7f2      	b.n	8003a10 <_printf_float+0x198>
 8003a2a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a30:	4299      	cmp	r1, r3
 8003a32:	db05      	blt.n	8003a40 <_printf_float+0x1c8>
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	6121      	str	r1, [r4, #16]
 8003a38:	07d8      	lsls	r0, r3, #31
 8003a3a:	d5ea      	bpl.n	8003a12 <_printf_float+0x19a>
 8003a3c:	1c4b      	adds	r3, r1, #1
 8003a3e:	e7e7      	b.n	8003a10 <_printf_float+0x198>
 8003a40:	2900      	cmp	r1, #0
 8003a42:	bfcc      	ite	gt
 8003a44:	2201      	movgt	r2, #1
 8003a46:	f1c1 0202 	rsble	r2, r1, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	e7e0      	b.n	8003a10 <_printf_float+0x198>
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	055a      	lsls	r2, r3, #21
 8003a52:	d407      	bmi.n	8003a64 <_printf_float+0x1ec>
 8003a54:	6923      	ldr	r3, [r4, #16]
 8003a56:	4642      	mov	r2, r8
 8003a58:	4631      	mov	r1, r6
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	47b8      	blx	r7
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d12b      	bne.n	8003aba <_printf_float+0x242>
 8003a62:	e764      	b.n	800392e <_printf_float+0xb6>
 8003a64:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a68:	f240 80dc 	bls.w	8003c24 <_printf_float+0x3ac>
 8003a6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003a70:	2200      	movs	r2, #0
 8003a72:	2300      	movs	r3, #0
 8003a74:	f7fc ff98 	bl	80009a8 <__aeabi_dcmpeq>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d033      	beq.n	8003ae4 <_printf_float+0x26c>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	4631      	mov	r1, r6
 8003a80:	4628      	mov	r0, r5
 8003a82:	4a35      	ldr	r2, [pc, #212]	@ (8003b58 <_printf_float+0x2e0>)
 8003a84:	47b8      	blx	r7
 8003a86:	3001      	adds	r0, #1
 8003a88:	f43f af51 	beq.w	800392e <_printf_float+0xb6>
 8003a8c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003a90:	4543      	cmp	r3, r8
 8003a92:	db02      	blt.n	8003a9a <_printf_float+0x222>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	07d8      	lsls	r0, r3, #31
 8003a98:	d50f      	bpl.n	8003aba <_printf_float+0x242>
 8003a9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	47b8      	blx	r7
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	f43f af42 	beq.w	800392e <_printf_float+0xb6>
 8003aaa:	f04f 0900 	mov.w	r9, #0
 8003aae:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ab2:	f104 0a1a 	add.w	sl, r4, #26
 8003ab6:	45c8      	cmp	r8, r9
 8003ab8:	dc09      	bgt.n	8003ace <_printf_float+0x256>
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	079b      	lsls	r3, r3, #30
 8003abe:	f100 8102 	bmi.w	8003cc6 <_printf_float+0x44e>
 8003ac2:	68e0      	ldr	r0, [r4, #12]
 8003ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ac6:	4298      	cmp	r0, r3
 8003ac8:	bfb8      	it	lt
 8003aca:	4618      	movlt	r0, r3
 8003acc:	e731      	b.n	8003932 <_printf_float+0xba>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4652      	mov	r2, sl
 8003ad2:	4631      	mov	r1, r6
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	47b8      	blx	r7
 8003ad8:	3001      	adds	r0, #1
 8003ada:	f43f af28 	beq.w	800392e <_printf_float+0xb6>
 8003ade:	f109 0901 	add.w	r9, r9, #1
 8003ae2:	e7e8      	b.n	8003ab6 <_printf_float+0x23e>
 8003ae4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	dc38      	bgt.n	8003b5c <_printf_float+0x2e4>
 8003aea:	2301      	movs	r3, #1
 8003aec:	4631      	mov	r1, r6
 8003aee:	4628      	mov	r0, r5
 8003af0:	4a19      	ldr	r2, [pc, #100]	@ (8003b58 <_printf_float+0x2e0>)
 8003af2:	47b8      	blx	r7
 8003af4:	3001      	adds	r0, #1
 8003af6:	f43f af1a 	beq.w	800392e <_printf_float+0xb6>
 8003afa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003afe:	ea59 0303 	orrs.w	r3, r9, r3
 8003b02:	d102      	bne.n	8003b0a <_printf_float+0x292>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	07d9      	lsls	r1, r3, #31
 8003b08:	d5d7      	bpl.n	8003aba <_printf_float+0x242>
 8003b0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b0e:	4631      	mov	r1, r6
 8003b10:	4628      	mov	r0, r5
 8003b12:	47b8      	blx	r7
 8003b14:	3001      	adds	r0, #1
 8003b16:	f43f af0a 	beq.w	800392e <_printf_float+0xb6>
 8003b1a:	f04f 0a00 	mov.w	sl, #0
 8003b1e:	f104 0b1a 	add.w	fp, r4, #26
 8003b22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b24:	425b      	negs	r3, r3
 8003b26:	4553      	cmp	r3, sl
 8003b28:	dc01      	bgt.n	8003b2e <_printf_float+0x2b6>
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	e793      	b.n	8003a56 <_printf_float+0x1de>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	465a      	mov	r2, fp
 8003b32:	4631      	mov	r1, r6
 8003b34:	4628      	mov	r0, r5
 8003b36:	47b8      	blx	r7
 8003b38:	3001      	adds	r0, #1
 8003b3a:	f43f aef8 	beq.w	800392e <_printf_float+0xb6>
 8003b3e:	f10a 0a01 	add.w	sl, sl, #1
 8003b42:	e7ee      	b.n	8003b22 <_printf_float+0x2aa>
 8003b44:	7fefffff 	.word	0x7fefffff
 8003b48:	08007e36 	.word	0x08007e36
 8003b4c:	08007e32 	.word	0x08007e32
 8003b50:	08007e3e 	.word	0x08007e3e
 8003b54:	08007e3a 	.word	0x08007e3a
 8003b58:	08007e42 	.word	0x08007e42
 8003b5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b5e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003b62:	4553      	cmp	r3, sl
 8003b64:	bfa8      	it	ge
 8003b66:	4653      	movge	r3, sl
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	4699      	mov	r9, r3
 8003b6c:	dc36      	bgt.n	8003bdc <_printf_float+0x364>
 8003b6e:	f04f 0b00 	mov.w	fp, #0
 8003b72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b76:	f104 021a 	add.w	r2, r4, #26
 8003b7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b7e:	eba3 0309 	sub.w	r3, r3, r9
 8003b82:	455b      	cmp	r3, fp
 8003b84:	dc31      	bgt.n	8003bea <_printf_float+0x372>
 8003b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b88:	459a      	cmp	sl, r3
 8003b8a:	dc3a      	bgt.n	8003c02 <_printf_float+0x38a>
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	07da      	lsls	r2, r3, #31
 8003b90:	d437      	bmi.n	8003c02 <_printf_float+0x38a>
 8003b92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b94:	ebaa 0903 	sub.w	r9, sl, r3
 8003b98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b9a:	ebaa 0303 	sub.w	r3, sl, r3
 8003b9e:	4599      	cmp	r9, r3
 8003ba0:	bfa8      	it	ge
 8003ba2:	4699      	movge	r9, r3
 8003ba4:	f1b9 0f00 	cmp.w	r9, #0
 8003ba8:	dc33      	bgt.n	8003c12 <_printf_float+0x39a>
 8003baa:	f04f 0800 	mov.w	r8, #0
 8003bae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bb2:	f104 0b1a 	add.w	fp, r4, #26
 8003bb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bb8:	ebaa 0303 	sub.w	r3, sl, r3
 8003bbc:	eba3 0309 	sub.w	r3, r3, r9
 8003bc0:	4543      	cmp	r3, r8
 8003bc2:	f77f af7a 	ble.w	8003aba <_printf_float+0x242>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	465a      	mov	r2, fp
 8003bca:	4631      	mov	r1, r6
 8003bcc:	4628      	mov	r0, r5
 8003bce:	47b8      	blx	r7
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	f43f aeac 	beq.w	800392e <_printf_float+0xb6>
 8003bd6:	f108 0801 	add.w	r8, r8, #1
 8003bda:	e7ec      	b.n	8003bb6 <_printf_float+0x33e>
 8003bdc:	4642      	mov	r2, r8
 8003bde:	4631      	mov	r1, r6
 8003be0:	4628      	mov	r0, r5
 8003be2:	47b8      	blx	r7
 8003be4:	3001      	adds	r0, #1
 8003be6:	d1c2      	bne.n	8003b6e <_printf_float+0x2f6>
 8003be8:	e6a1      	b.n	800392e <_printf_float+0xb6>
 8003bea:	2301      	movs	r3, #1
 8003bec:	4631      	mov	r1, r6
 8003bee:	4628      	mov	r0, r5
 8003bf0:	920a      	str	r2, [sp, #40]	@ 0x28
 8003bf2:	47b8      	blx	r7
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	f43f ae9a 	beq.w	800392e <_printf_float+0xb6>
 8003bfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003bfc:	f10b 0b01 	add.w	fp, fp, #1
 8003c00:	e7bb      	b.n	8003b7a <_printf_float+0x302>
 8003c02:	4631      	mov	r1, r6
 8003c04:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c08:	4628      	mov	r0, r5
 8003c0a:	47b8      	blx	r7
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	d1c0      	bne.n	8003b92 <_printf_float+0x31a>
 8003c10:	e68d      	b.n	800392e <_printf_float+0xb6>
 8003c12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c14:	464b      	mov	r3, r9
 8003c16:	4631      	mov	r1, r6
 8003c18:	4628      	mov	r0, r5
 8003c1a:	4442      	add	r2, r8
 8003c1c:	47b8      	blx	r7
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d1c3      	bne.n	8003baa <_printf_float+0x332>
 8003c22:	e684      	b.n	800392e <_printf_float+0xb6>
 8003c24:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003c28:	f1ba 0f01 	cmp.w	sl, #1
 8003c2c:	dc01      	bgt.n	8003c32 <_printf_float+0x3ba>
 8003c2e:	07db      	lsls	r3, r3, #31
 8003c30:	d536      	bpl.n	8003ca0 <_printf_float+0x428>
 8003c32:	2301      	movs	r3, #1
 8003c34:	4642      	mov	r2, r8
 8003c36:	4631      	mov	r1, r6
 8003c38:	4628      	mov	r0, r5
 8003c3a:	47b8      	blx	r7
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	f43f ae76 	beq.w	800392e <_printf_float+0xb6>
 8003c42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c46:	4631      	mov	r1, r6
 8003c48:	4628      	mov	r0, r5
 8003c4a:	47b8      	blx	r7
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	f43f ae6e 	beq.w	800392e <_printf_float+0xb6>
 8003c52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003c56:	2200      	movs	r2, #0
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c5e:	f7fc fea3 	bl	80009a8 <__aeabi_dcmpeq>
 8003c62:	b9c0      	cbnz	r0, 8003c96 <_printf_float+0x41e>
 8003c64:	4653      	mov	r3, sl
 8003c66:	f108 0201 	add.w	r2, r8, #1
 8003c6a:	4631      	mov	r1, r6
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	47b8      	blx	r7
 8003c70:	3001      	adds	r0, #1
 8003c72:	d10c      	bne.n	8003c8e <_printf_float+0x416>
 8003c74:	e65b      	b.n	800392e <_printf_float+0xb6>
 8003c76:	2301      	movs	r3, #1
 8003c78:	465a      	mov	r2, fp
 8003c7a:	4631      	mov	r1, r6
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	47b8      	blx	r7
 8003c80:	3001      	adds	r0, #1
 8003c82:	f43f ae54 	beq.w	800392e <_printf_float+0xb6>
 8003c86:	f108 0801 	add.w	r8, r8, #1
 8003c8a:	45d0      	cmp	r8, sl
 8003c8c:	dbf3      	blt.n	8003c76 <_printf_float+0x3fe>
 8003c8e:	464b      	mov	r3, r9
 8003c90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003c94:	e6e0      	b.n	8003a58 <_printf_float+0x1e0>
 8003c96:	f04f 0800 	mov.w	r8, #0
 8003c9a:	f104 0b1a 	add.w	fp, r4, #26
 8003c9e:	e7f4      	b.n	8003c8a <_printf_float+0x412>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	4642      	mov	r2, r8
 8003ca4:	e7e1      	b.n	8003c6a <_printf_float+0x3f2>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	464a      	mov	r2, r9
 8003caa:	4631      	mov	r1, r6
 8003cac:	4628      	mov	r0, r5
 8003cae:	47b8      	blx	r7
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	f43f ae3c 	beq.w	800392e <_printf_float+0xb6>
 8003cb6:	f108 0801 	add.w	r8, r8, #1
 8003cba:	68e3      	ldr	r3, [r4, #12]
 8003cbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003cbe:	1a5b      	subs	r3, r3, r1
 8003cc0:	4543      	cmp	r3, r8
 8003cc2:	dcf0      	bgt.n	8003ca6 <_printf_float+0x42e>
 8003cc4:	e6fd      	b.n	8003ac2 <_printf_float+0x24a>
 8003cc6:	f04f 0800 	mov.w	r8, #0
 8003cca:	f104 0919 	add.w	r9, r4, #25
 8003cce:	e7f4      	b.n	8003cba <_printf_float+0x442>

08003cd0 <_printf_common>:
 8003cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	4616      	mov	r6, r2
 8003cd6:	4698      	mov	r8, r3
 8003cd8:	688a      	ldr	r2, [r1, #8]
 8003cda:	690b      	ldr	r3, [r1, #16]
 8003cdc:	4607      	mov	r7, r0
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	bfb8      	it	lt
 8003ce2:	4613      	movlt	r3, r2
 8003ce4:	6033      	str	r3, [r6, #0]
 8003ce6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cea:	460c      	mov	r4, r1
 8003cec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cf0:	b10a      	cbz	r2, 8003cf6 <_printf_common+0x26>
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	6033      	str	r3, [r6, #0]
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	0699      	lsls	r1, r3, #26
 8003cfa:	bf42      	ittt	mi
 8003cfc:	6833      	ldrmi	r3, [r6, #0]
 8003cfe:	3302      	addmi	r3, #2
 8003d00:	6033      	strmi	r3, [r6, #0]
 8003d02:	6825      	ldr	r5, [r4, #0]
 8003d04:	f015 0506 	ands.w	r5, r5, #6
 8003d08:	d106      	bne.n	8003d18 <_printf_common+0x48>
 8003d0a:	f104 0a19 	add.w	sl, r4, #25
 8003d0e:	68e3      	ldr	r3, [r4, #12]
 8003d10:	6832      	ldr	r2, [r6, #0]
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	42ab      	cmp	r3, r5
 8003d16:	dc2b      	bgt.n	8003d70 <_printf_common+0xa0>
 8003d18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d1c:	6822      	ldr	r2, [r4, #0]
 8003d1e:	3b00      	subs	r3, #0
 8003d20:	bf18      	it	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	0692      	lsls	r2, r2, #26
 8003d26:	d430      	bmi.n	8003d8a <_printf_common+0xba>
 8003d28:	4641      	mov	r1, r8
 8003d2a:	4638      	mov	r0, r7
 8003d2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d30:	47c8      	blx	r9
 8003d32:	3001      	adds	r0, #1
 8003d34:	d023      	beq.n	8003d7e <_printf_common+0xae>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	6922      	ldr	r2, [r4, #16]
 8003d3a:	f003 0306 	and.w	r3, r3, #6
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	bf14      	ite	ne
 8003d42:	2500      	movne	r5, #0
 8003d44:	6833      	ldreq	r3, [r6, #0]
 8003d46:	f04f 0600 	mov.w	r6, #0
 8003d4a:	bf08      	it	eq
 8003d4c:	68e5      	ldreq	r5, [r4, #12]
 8003d4e:	f104 041a 	add.w	r4, r4, #26
 8003d52:	bf08      	it	eq
 8003d54:	1aed      	subeq	r5, r5, r3
 8003d56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d5a:	bf08      	it	eq
 8003d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d60:	4293      	cmp	r3, r2
 8003d62:	bfc4      	itt	gt
 8003d64:	1a9b      	subgt	r3, r3, r2
 8003d66:	18ed      	addgt	r5, r5, r3
 8003d68:	42b5      	cmp	r5, r6
 8003d6a:	d11a      	bne.n	8003da2 <_printf_common+0xd2>
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	e008      	b.n	8003d82 <_printf_common+0xb2>
 8003d70:	2301      	movs	r3, #1
 8003d72:	4652      	mov	r2, sl
 8003d74:	4641      	mov	r1, r8
 8003d76:	4638      	mov	r0, r7
 8003d78:	47c8      	blx	r9
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	d103      	bne.n	8003d86 <_printf_common+0xb6>
 8003d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d86:	3501      	adds	r5, #1
 8003d88:	e7c1      	b.n	8003d0e <_printf_common+0x3e>
 8003d8a:	2030      	movs	r0, #48	@ 0x30
 8003d8c:	18e1      	adds	r1, r4, r3
 8003d8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d98:	4422      	add	r2, r4
 8003d9a:	3302      	adds	r3, #2
 8003d9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003da0:	e7c2      	b.n	8003d28 <_printf_common+0x58>
 8003da2:	2301      	movs	r3, #1
 8003da4:	4622      	mov	r2, r4
 8003da6:	4641      	mov	r1, r8
 8003da8:	4638      	mov	r0, r7
 8003daa:	47c8      	blx	r9
 8003dac:	3001      	adds	r0, #1
 8003dae:	d0e6      	beq.n	8003d7e <_printf_common+0xae>
 8003db0:	3601      	adds	r6, #1
 8003db2:	e7d9      	b.n	8003d68 <_printf_common+0x98>

08003db4 <_printf_i>:
 8003db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003db8:	7e0f      	ldrb	r7, [r1, #24]
 8003dba:	4691      	mov	r9, r2
 8003dbc:	2f78      	cmp	r7, #120	@ 0x78
 8003dbe:	4680      	mov	r8, r0
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	469a      	mov	sl, r3
 8003dc4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dca:	d807      	bhi.n	8003ddc <_printf_i+0x28>
 8003dcc:	2f62      	cmp	r7, #98	@ 0x62
 8003dce:	d80a      	bhi.n	8003de6 <_printf_i+0x32>
 8003dd0:	2f00      	cmp	r7, #0
 8003dd2:	f000 80d1 	beq.w	8003f78 <_printf_i+0x1c4>
 8003dd6:	2f58      	cmp	r7, #88	@ 0x58
 8003dd8:	f000 80b8 	beq.w	8003f4c <_printf_i+0x198>
 8003ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003de0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003de4:	e03a      	b.n	8003e5c <_printf_i+0xa8>
 8003de6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dea:	2b15      	cmp	r3, #21
 8003dec:	d8f6      	bhi.n	8003ddc <_printf_i+0x28>
 8003dee:	a101      	add	r1, pc, #4	@ (adr r1, 8003df4 <_printf_i+0x40>)
 8003df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003df4:	08003e4d 	.word	0x08003e4d
 8003df8:	08003e61 	.word	0x08003e61
 8003dfc:	08003ddd 	.word	0x08003ddd
 8003e00:	08003ddd 	.word	0x08003ddd
 8003e04:	08003ddd 	.word	0x08003ddd
 8003e08:	08003ddd 	.word	0x08003ddd
 8003e0c:	08003e61 	.word	0x08003e61
 8003e10:	08003ddd 	.word	0x08003ddd
 8003e14:	08003ddd 	.word	0x08003ddd
 8003e18:	08003ddd 	.word	0x08003ddd
 8003e1c:	08003ddd 	.word	0x08003ddd
 8003e20:	08003f5f 	.word	0x08003f5f
 8003e24:	08003e8b 	.word	0x08003e8b
 8003e28:	08003f19 	.word	0x08003f19
 8003e2c:	08003ddd 	.word	0x08003ddd
 8003e30:	08003ddd 	.word	0x08003ddd
 8003e34:	08003f81 	.word	0x08003f81
 8003e38:	08003ddd 	.word	0x08003ddd
 8003e3c:	08003e8b 	.word	0x08003e8b
 8003e40:	08003ddd 	.word	0x08003ddd
 8003e44:	08003ddd 	.word	0x08003ddd
 8003e48:	08003f21 	.word	0x08003f21
 8003e4c:	6833      	ldr	r3, [r6, #0]
 8003e4e:	1d1a      	adds	r2, r3, #4
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6032      	str	r2, [r6, #0]
 8003e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e09c      	b.n	8003f9a <_printf_i+0x1e6>
 8003e60:	6833      	ldr	r3, [r6, #0]
 8003e62:	6820      	ldr	r0, [r4, #0]
 8003e64:	1d19      	adds	r1, r3, #4
 8003e66:	6031      	str	r1, [r6, #0]
 8003e68:	0606      	lsls	r6, r0, #24
 8003e6a:	d501      	bpl.n	8003e70 <_printf_i+0xbc>
 8003e6c:	681d      	ldr	r5, [r3, #0]
 8003e6e:	e003      	b.n	8003e78 <_printf_i+0xc4>
 8003e70:	0645      	lsls	r5, r0, #25
 8003e72:	d5fb      	bpl.n	8003e6c <_printf_i+0xb8>
 8003e74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e78:	2d00      	cmp	r5, #0
 8003e7a:	da03      	bge.n	8003e84 <_printf_i+0xd0>
 8003e7c:	232d      	movs	r3, #45	@ 0x2d
 8003e7e:	426d      	negs	r5, r5
 8003e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e84:	230a      	movs	r3, #10
 8003e86:	4858      	ldr	r0, [pc, #352]	@ (8003fe8 <_printf_i+0x234>)
 8003e88:	e011      	b.n	8003eae <_printf_i+0xfa>
 8003e8a:	6821      	ldr	r1, [r4, #0]
 8003e8c:	6833      	ldr	r3, [r6, #0]
 8003e8e:	0608      	lsls	r0, r1, #24
 8003e90:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e94:	d402      	bmi.n	8003e9c <_printf_i+0xe8>
 8003e96:	0649      	lsls	r1, r1, #25
 8003e98:	bf48      	it	mi
 8003e9a:	b2ad      	uxthmi	r5, r5
 8003e9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e9e:	6033      	str	r3, [r6, #0]
 8003ea0:	bf14      	ite	ne
 8003ea2:	230a      	movne	r3, #10
 8003ea4:	2308      	moveq	r3, #8
 8003ea6:	4850      	ldr	r0, [pc, #320]	@ (8003fe8 <_printf_i+0x234>)
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003eae:	6866      	ldr	r6, [r4, #4]
 8003eb0:	2e00      	cmp	r6, #0
 8003eb2:	60a6      	str	r6, [r4, #8]
 8003eb4:	db05      	blt.n	8003ec2 <_printf_i+0x10e>
 8003eb6:	6821      	ldr	r1, [r4, #0]
 8003eb8:	432e      	orrs	r6, r5
 8003eba:	f021 0104 	bic.w	r1, r1, #4
 8003ebe:	6021      	str	r1, [r4, #0]
 8003ec0:	d04b      	beq.n	8003f5a <_printf_i+0x1a6>
 8003ec2:	4616      	mov	r6, r2
 8003ec4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ec8:	fb03 5711 	mls	r7, r3, r1, r5
 8003ecc:	5dc7      	ldrb	r7, [r0, r7]
 8003ece:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ed2:	462f      	mov	r7, r5
 8003ed4:	42bb      	cmp	r3, r7
 8003ed6:	460d      	mov	r5, r1
 8003ed8:	d9f4      	bls.n	8003ec4 <_printf_i+0x110>
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d10b      	bne.n	8003ef6 <_printf_i+0x142>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	07df      	lsls	r7, r3, #31
 8003ee2:	d508      	bpl.n	8003ef6 <_printf_i+0x142>
 8003ee4:	6923      	ldr	r3, [r4, #16]
 8003ee6:	6861      	ldr	r1, [r4, #4]
 8003ee8:	4299      	cmp	r1, r3
 8003eea:	bfde      	ittt	le
 8003eec:	2330      	movle	r3, #48	@ 0x30
 8003eee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ef2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ef6:	1b92      	subs	r2, r2, r6
 8003ef8:	6122      	str	r2, [r4, #16]
 8003efa:	464b      	mov	r3, r9
 8003efc:	4621      	mov	r1, r4
 8003efe:	4640      	mov	r0, r8
 8003f00:	f8cd a000 	str.w	sl, [sp]
 8003f04:	aa03      	add	r2, sp, #12
 8003f06:	f7ff fee3 	bl	8003cd0 <_printf_common>
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	d14a      	bne.n	8003fa4 <_printf_i+0x1f0>
 8003f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f12:	b004      	add	sp, #16
 8003f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	f043 0320 	orr.w	r3, r3, #32
 8003f1e:	6023      	str	r3, [r4, #0]
 8003f20:	2778      	movs	r7, #120	@ 0x78
 8003f22:	4832      	ldr	r0, [pc, #200]	@ (8003fec <_printf_i+0x238>)
 8003f24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	6831      	ldr	r1, [r6, #0]
 8003f2c:	061f      	lsls	r7, r3, #24
 8003f2e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f32:	d402      	bmi.n	8003f3a <_printf_i+0x186>
 8003f34:	065f      	lsls	r7, r3, #25
 8003f36:	bf48      	it	mi
 8003f38:	b2ad      	uxthmi	r5, r5
 8003f3a:	6031      	str	r1, [r6, #0]
 8003f3c:	07d9      	lsls	r1, r3, #31
 8003f3e:	bf44      	itt	mi
 8003f40:	f043 0320 	orrmi.w	r3, r3, #32
 8003f44:	6023      	strmi	r3, [r4, #0]
 8003f46:	b11d      	cbz	r5, 8003f50 <_printf_i+0x19c>
 8003f48:	2310      	movs	r3, #16
 8003f4a:	e7ad      	b.n	8003ea8 <_printf_i+0xf4>
 8003f4c:	4826      	ldr	r0, [pc, #152]	@ (8003fe8 <_printf_i+0x234>)
 8003f4e:	e7e9      	b.n	8003f24 <_printf_i+0x170>
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	f023 0320 	bic.w	r3, r3, #32
 8003f56:	6023      	str	r3, [r4, #0]
 8003f58:	e7f6      	b.n	8003f48 <_printf_i+0x194>
 8003f5a:	4616      	mov	r6, r2
 8003f5c:	e7bd      	b.n	8003eda <_printf_i+0x126>
 8003f5e:	6833      	ldr	r3, [r6, #0]
 8003f60:	6825      	ldr	r5, [r4, #0]
 8003f62:	1d18      	adds	r0, r3, #4
 8003f64:	6961      	ldr	r1, [r4, #20]
 8003f66:	6030      	str	r0, [r6, #0]
 8003f68:	062e      	lsls	r6, r5, #24
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	d501      	bpl.n	8003f72 <_printf_i+0x1be>
 8003f6e:	6019      	str	r1, [r3, #0]
 8003f70:	e002      	b.n	8003f78 <_printf_i+0x1c4>
 8003f72:	0668      	lsls	r0, r5, #25
 8003f74:	d5fb      	bpl.n	8003f6e <_printf_i+0x1ba>
 8003f76:	8019      	strh	r1, [r3, #0]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	4616      	mov	r6, r2
 8003f7c:	6123      	str	r3, [r4, #16]
 8003f7e:	e7bc      	b.n	8003efa <_printf_i+0x146>
 8003f80:	6833      	ldr	r3, [r6, #0]
 8003f82:	2100      	movs	r1, #0
 8003f84:	1d1a      	adds	r2, r3, #4
 8003f86:	6032      	str	r2, [r6, #0]
 8003f88:	681e      	ldr	r6, [r3, #0]
 8003f8a:	6862      	ldr	r2, [r4, #4]
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f000 fbe0 	bl	8004752 <memchr>
 8003f92:	b108      	cbz	r0, 8003f98 <_printf_i+0x1e4>
 8003f94:	1b80      	subs	r0, r0, r6
 8003f96:	6060      	str	r0, [r4, #4]
 8003f98:	6863      	ldr	r3, [r4, #4]
 8003f9a:	6123      	str	r3, [r4, #16]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fa2:	e7aa      	b.n	8003efa <_printf_i+0x146>
 8003fa4:	4632      	mov	r2, r6
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	4640      	mov	r0, r8
 8003faa:	6923      	ldr	r3, [r4, #16]
 8003fac:	47d0      	blx	sl
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d0ad      	beq.n	8003f0e <_printf_i+0x15a>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	079b      	lsls	r3, r3, #30
 8003fb6:	d413      	bmi.n	8003fe0 <_printf_i+0x22c>
 8003fb8:	68e0      	ldr	r0, [r4, #12]
 8003fba:	9b03      	ldr	r3, [sp, #12]
 8003fbc:	4298      	cmp	r0, r3
 8003fbe:	bfb8      	it	lt
 8003fc0:	4618      	movlt	r0, r3
 8003fc2:	e7a6      	b.n	8003f12 <_printf_i+0x15e>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4632      	mov	r2, r6
 8003fc8:	4649      	mov	r1, r9
 8003fca:	4640      	mov	r0, r8
 8003fcc:	47d0      	blx	sl
 8003fce:	3001      	adds	r0, #1
 8003fd0:	d09d      	beq.n	8003f0e <_printf_i+0x15a>
 8003fd2:	3501      	adds	r5, #1
 8003fd4:	68e3      	ldr	r3, [r4, #12]
 8003fd6:	9903      	ldr	r1, [sp, #12]
 8003fd8:	1a5b      	subs	r3, r3, r1
 8003fda:	42ab      	cmp	r3, r5
 8003fdc:	dcf2      	bgt.n	8003fc4 <_printf_i+0x210>
 8003fde:	e7eb      	b.n	8003fb8 <_printf_i+0x204>
 8003fe0:	2500      	movs	r5, #0
 8003fe2:	f104 0619 	add.w	r6, r4, #25
 8003fe6:	e7f5      	b.n	8003fd4 <_printf_i+0x220>
 8003fe8:	08007e44 	.word	0x08007e44
 8003fec:	08007e55 	.word	0x08007e55

08003ff0 <_scanf_float>:
 8003ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	9303      	str	r3, [sp, #12]
 8003ff8:	688b      	ldr	r3, [r1, #8]
 8003ffa:	4691      	mov	r9, r2
 8003ffc:	1e5a      	subs	r2, r3, #1
 8003ffe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004002:	bf82      	ittt	hi
 8004004:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004008:	eb03 0b05 	addhi.w	fp, r3, r5
 800400c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004010:	460a      	mov	r2, r1
 8004012:	f04f 0500 	mov.w	r5, #0
 8004016:	bf88      	it	hi
 8004018:	608b      	strhi	r3, [r1, #8]
 800401a:	680b      	ldr	r3, [r1, #0]
 800401c:	4680      	mov	r8, r0
 800401e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004022:	f842 3b1c 	str.w	r3, [r2], #28
 8004026:	460c      	mov	r4, r1
 8004028:	bf98      	it	ls
 800402a:	f04f 0b00 	movls.w	fp, #0
 800402e:	4616      	mov	r6, r2
 8004030:	46aa      	mov	sl, r5
 8004032:	462f      	mov	r7, r5
 8004034:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004038:	9201      	str	r2, [sp, #4]
 800403a:	9502      	str	r5, [sp, #8]
 800403c:	68a2      	ldr	r2, [r4, #8]
 800403e:	b15a      	cbz	r2, 8004058 <_scanf_float+0x68>
 8004040:	f8d9 3000 	ldr.w	r3, [r9]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b4e      	cmp	r3, #78	@ 0x4e
 8004048:	d862      	bhi.n	8004110 <_scanf_float+0x120>
 800404a:	2b40      	cmp	r3, #64	@ 0x40
 800404c:	d83a      	bhi.n	80040c4 <_scanf_float+0xd4>
 800404e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004052:	b2c8      	uxtb	r0, r1
 8004054:	280e      	cmp	r0, #14
 8004056:	d938      	bls.n	80040ca <_scanf_float+0xda>
 8004058:	b11f      	cbz	r7, 8004062 <_scanf_float+0x72>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004066:	f1ba 0f01 	cmp.w	sl, #1
 800406a:	f200 8114 	bhi.w	8004296 <_scanf_float+0x2a6>
 800406e:	9b01      	ldr	r3, [sp, #4]
 8004070:	429e      	cmp	r6, r3
 8004072:	f200 8105 	bhi.w	8004280 <_scanf_float+0x290>
 8004076:	2001      	movs	r0, #1
 8004078:	b007      	add	sp, #28
 800407a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004082:	2a0d      	cmp	r2, #13
 8004084:	d8e8      	bhi.n	8004058 <_scanf_float+0x68>
 8004086:	a101      	add	r1, pc, #4	@ (adr r1, 800408c <_scanf_float+0x9c>)
 8004088:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800408c:	080041d5 	.word	0x080041d5
 8004090:	08004059 	.word	0x08004059
 8004094:	08004059 	.word	0x08004059
 8004098:	08004059 	.word	0x08004059
 800409c:	08004231 	.word	0x08004231
 80040a0:	0800420b 	.word	0x0800420b
 80040a4:	08004059 	.word	0x08004059
 80040a8:	08004059 	.word	0x08004059
 80040ac:	080041e3 	.word	0x080041e3
 80040b0:	08004059 	.word	0x08004059
 80040b4:	08004059 	.word	0x08004059
 80040b8:	08004059 	.word	0x08004059
 80040bc:	08004059 	.word	0x08004059
 80040c0:	0800419f 	.word	0x0800419f
 80040c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80040c8:	e7db      	b.n	8004082 <_scanf_float+0x92>
 80040ca:	290e      	cmp	r1, #14
 80040cc:	d8c4      	bhi.n	8004058 <_scanf_float+0x68>
 80040ce:	a001      	add	r0, pc, #4	@ (adr r0, 80040d4 <_scanf_float+0xe4>)
 80040d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80040d4:	0800418f 	.word	0x0800418f
 80040d8:	08004059 	.word	0x08004059
 80040dc:	0800418f 	.word	0x0800418f
 80040e0:	0800421f 	.word	0x0800421f
 80040e4:	08004059 	.word	0x08004059
 80040e8:	08004131 	.word	0x08004131
 80040ec:	08004175 	.word	0x08004175
 80040f0:	08004175 	.word	0x08004175
 80040f4:	08004175 	.word	0x08004175
 80040f8:	08004175 	.word	0x08004175
 80040fc:	08004175 	.word	0x08004175
 8004100:	08004175 	.word	0x08004175
 8004104:	08004175 	.word	0x08004175
 8004108:	08004175 	.word	0x08004175
 800410c:	08004175 	.word	0x08004175
 8004110:	2b6e      	cmp	r3, #110	@ 0x6e
 8004112:	d809      	bhi.n	8004128 <_scanf_float+0x138>
 8004114:	2b60      	cmp	r3, #96	@ 0x60
 8004116:	d8b2      	bhi.n	800407e <_scanf_float+0x8e>
 8004118:	2b54      	cmp	r3, #84	@ 0x54
 800411a:	d07b      	beq.n	8004214 <_scanf_float+0x224>
 800411c:	2b59      	cmp	r3, #89	@ 0x59
 800411e:	d19b      	bne.n	8004058 <_scanf_float+0x68>
 8004120:	2d07      	cmp	r5, #7
 8004122:	d199      	bne.n	8004058 <_scanf_float+0x68>
 8004124:	2508      	movs	r5, #8
 8004126:	e02f      	b.n	8004188 <_scanf_float+0x198>
 8004128:	2b74      	cmp	r3, #116	@ 0x74
 800412a:	d073      	beq.n	8004214 <_scanf_float+0x224>
 800412c:	2b79      	cmp	r3, #121	@ 0x79
 800412e:	e7f6      	b.n	800411e <_scanf_float+0x12e>
 8004130:	6821      	ldr	r1, [r4, #0]
 8004132:	05c8      	lsls	r0, r1, #23
 8004134:	d51e      	bpl.n	8004174 <_scanf_float+0x184>
 8004136:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800413a:	6021      	str	r1, [r4, #0]
 800413c:	3701      	adds	r7, #1
 800413e:	f1bb 0f00 	cmp.w	fp, #0
 8004142:	d003      	beq.n	800414c <_scanf_float+0x15c>
 8004144:	3201      	adds	r2, #1
 8004146:	f10b 3bff 	add.w	fp, fp, #4294967295
 800414a:	60a2      	str	r2, [r4, #8]
 800414c:	68a3      	ldr	r3, [r4, #8]
 800414e:	3b01      	subs	r3, #1
 8004150:	60a3      	str	r3, [r4, #8]
 8004152:	6923      	ldr	r3, [r4, #16]
 8004154:	3301      	adds	r3, #1
 8004156:	6123      	str	r3, [r4, #16]
 8004158:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800415c:	3b01      	subs	r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	f8c9 3004 	str.w	r3, [r9, #4]
 8004164:	f340 8083 	ble.w	800426e <_scanf_float+0x27e>
 8004168:	f8d9 3000 	ldr.w	r3, [r9]
 800416c:	3301      	adds	r3, #1
 800416e:	f8c9 3000 	str.w	r3, [r9]
 8004172:	e763      	b.n	800403c <_scanf_float+0x4c>
 8004174:	eb1a 0105 	adds.w	r1, sl, r5
 8004178:	f47f af6e 	bne.w	8004058 <_scanf_float+0x68>
 800417c:	460d      	mov	r5, r1
 800417e:	468a      	mov	sl, r1
 8004180:	6822      	ldr	r2, [r4, #0]
 8004182:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004186:	6022      	str	r2, [r4, #0]
 8004188:	f806 3b01 	strb.w	r3, [r6], #1
 800418c:	e7de      	b.n	800414c <_scanf_float+0x15c>
 800418e:	6822      	ldr	r2, [r4, #0]
 8004190:	0610      	lsls	r0, r2, #24
 8004192:	f57f af61 	bpl.w	8004058 <_scanf_float+0x68>
 8004196:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800419a:	6022      	str	r2, [r4, #0]
 800419c:	e7f4      	b.n	8004188 <_scanf_float+0x198>
 800419e:	f1ba 0f00 	cmp.w	sl, #0
 80041a2:	d10c      	bne.n	80041be <_scanf_float+0x1ce>
 80041a4:	b977      	cbnz	r7, 80041c4 <_scanf_float+0x1d4>
 80041a6:	6822      	ldr	r2, [r4, #0]
 80041a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80041ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80041b0:	d108      	bne.n	80041c4 <_scanf_float+0x1d4>
 80041b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80041b6:	f04f 0a01 	mov.w	sl, #1
 80041ba:	6022      	str	r2, [r4, #0]
 80041bc:	e7e4      	b.n	8004188 <_scanf_float+0x198>
 80041be:	f1ba 0f02 	cmp.w	sl, #2
 80041c2:	d051      	beq.n	8004268 <_scanf_float+0x278>
 80041c4:	2d01      	cmp	r5, #1
 80041c6:	d002      	beq.n	80041ce <_scanf_float+0x1de>
 80041c8:	2d04      	cmp	r5, #4
 80041ca:	f47f af45 	bne.w	8004058 <_scanf_float+0x68>
 80041ce:	3501      	adds	r5, #1
 80041d0:	b2ed      	uxtb	r5, r5
 80041d2:	e7d9      	b.n	8004188 <_scanf_float+0x198>
 80041d4:	f1ba 0f01 	cmp.w	sl, #1
 80041d8:	f47f af3e 	bne.w	8004058 <_scanf_float+0x68>
 80041dc:	f04f 0a02 	mov.w	sl, #2
 80041e0:	e7d2      	b.n	8004188 <_scanf_float+0x198>
 80041e2:	b975      	cbnz	r5, 8004202 <_scanf_float+0x212>
 80041e4:	2f00      	cmp	r7, #0
 80041e6:	f47f af38 	bne.w	800405a <_scanf_float+0x6a>
 80041ea:	6822      	ldr	r2, [r4, #0]
 80041ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80041f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80041f4:	f040 80ff 	bne.w	80043f6 <_scanf_float+0x406>
 80041f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80041fc:	2501      	movs	r5, #1
 80041fe:	6022      	str	r2, [r4, #0]
 8004200:	e7c2      	b.n	8004188 <_scanf_float+0x198>
 8004202:	2d03      	cmp	r5, #3
 8004204:	d0e3      	beq.n	80041ce <_scanf_float+0x1de>
 8004206:	2d05      	cmp	r5, #5
 8004208:	e7df      	b.n	80041ca <_scanf_float+0x1da>
 800420a:	2d02      	cmp	r5, #2
 800420c:	f47f af24 	bne.w	8004058 <_scanf_float+0x68>
 8004210:	2503      	movs	r5, #3
 8004212:	e7b9      	b.n	8004188 <_scanf_float+0x198>
 8004214:	2d06      	cmp	r5, #6
 8004216:	f47f af1f 	bne.w	8004058 <_scanf_float+0x68>
 800421a:	2507      	movs	r5, #7
 800421c:	e7b4      	b.n	8004188 <_scanf_float+0x198>
 800421e:	6822      	ldr	r2, [r4, #0]
 8004220:	0591      	lsls	r1, r2, #22
 8004222:	f57f af19 	bpl.w	8004058 <_scanf_float+0x68>
 8004226:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800422a:	6022      	str	r2, [r4, #0]
 800422c:	9702      	str	r7, [sp, #8]
 800422e:	e7ab      	b.n	8004188 <_scanf_float+0x198>
 8004230:	6822      	ldr	r2, [r4, #0]
 8004232:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004236:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800423a:	d005      	beq.n	8004248 <_scanf_float+0x258>
 800423c:	0550      	lsls	r0, r2, #21
 800423e:	f57f af0b 	bpl.w	8004058 <_scanf_float+0x68>
 8004242:	2f00      	cmp	r7, #0
 8004244:	f000 80d7 	beq.w	80043f6 <_scanf_float+0x406>
 8004248:	0591      	lsls	r1, r2, #22
 800424a:	bf58      	it	pl
 800424c:	9902      	ldrpl	r1, [sp, #8]
 800424e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004252:	bf58      	it	pl
 8004254:	1a79      	subpl	r1, r7, r1
 8004256:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800425a:	f04f 0700 	mov.w	r7, #0
 800425e:	bf58      	it	pl
 8004260:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004264:	6022      	str	r2, [r4, #0]
 8004266:	e78f      	b.n	8004188 <_scanf_float+0x198>
 8004268:	f04f 0a03 	mov.w	sl, #3
 800426c:	e78c      	b.n	8004188 <_scanf_float+0x198>
 800426e:	4649      	mov	r1, r9
 8004270:	4640      	mov	r0, r8
 8004272:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004276:	4798      	blx	r3
 8004278:	2800      	cmp	r0, #0
 800427a:	f43f aedf 	beq.w	800403c <_scanf_float+0x4c>
 800427e:	e6eb      	b.n	8004058 <_scanf_float+0x68>
 8004280:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004284:	464a      	mov	r2, r9
 8004286:	4640      	mov	r0, r8
 8004288:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800428c:	4798      	blx	r3
 800428e:	6923      	ldr	r3, [r4, #16]
 8004290:	3b01      	subs	r3, #1
 8004292:	6123      	str	r3, [r4, #16]
 8004294:	e6eb      	b.n	800406e <_scanf_float+0x7e>
 8004296:	1e6b      	subs	r3, r5, #1
 8004298:	2b06      	cmp	r3, #6
 800429a:	d824      	bhi.n	80042e6 <_scanf_float+0x2f6>
 800429c:	2d02      	cmp	r5, #2
 800429e:	d836      	bhi.n	800430e <_scanf_float+0x31e>
 80042a0:	9b01      	ldr	r3, [sp, #4]
 80042a2:	429e      	cmp	r6, r3
 80042a4:	f67f aee7 	bls.w	8004076 <_scanf_float+0x86>
 80042a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80042ac:	464a      	mov	r2, r9
 80042ae:	4640      	mov	r0, r8
 80042b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80042b4:	4798      	blx	r3
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	6123      	str	r3, [r4, #16]
 80042bc:	e7f0      	b.n	80042a0 <_scanf_float+0x2b0>
 80042be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80042c2:	464a      	mov	r2, r9
 80042c4:	4640      	mov	r0, r8
 80042c6:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80042ca:	4798      	blx	r3
 80042cc:	6923      	ldr	r3, [r4, #16]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	6123      	str	r3, [r4, #16]
 80042d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042d6:	fa5f fa8a 	uxtb.w	sl, sl
 80042da:	f1ba 0f02 	cmp.w	sl, #2
 80042de:	d1ee      	bne.n	80042be <_scanf_float+0x2ce>
 80042e0:	3d03      	subs	r5, #3
 80042e2:	b2ed      	uxtb	r5, r5
 80042e4:	1b76      	subs	r6, r6, r5
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	05da      	lsls	r2, r3, #23
 80042ea:	d530      	bpl.n	800434e <_scanf_float+0x35e>
 80042ec:	055b      	lsls	r3, r3, #21
 80042ee:	d511      	bpl.n	8004314 <_scanf_float+0x324>
 80042f0:	9b01      	ldr	r3, [sp, #4]
 80042f2:	429e      	cmp	r6, r3
 80042f4:	f67f aebf 	bls.w	8004076 <_scanf_float+0x86>
 80042f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80042fc:	464a      	mov	r2, r9
 80042fe:	4640      	mov	r0, r8
 8004300:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004304:	4798      	blx	r3
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	3b01      	subs	r3, #1
 800430a:	6123      	str	r3, [r4, #16]
 800430c:	e7f0      	b.n	80042f0 <_scanf_float+0x300>
 800430e:	46aa      	mov	sl, r5
 8004310:	46b3      	mov	fp, r6
 8004312:	e7de      	b.n	80042d2 <_scanf_float+0x2e2>
 8004314:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	2965      	cmp	r1, #101	@ 0x65
 800431c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004320:	f106 35ff 	add.w	r5, r6, #4294967295
 8004324:	6123      	str	r3, [r4, #16]
 8004326:	d00c      	beq.n	8004342 <_scanf_float+0x352>
 8004328:	2945      	cmp	r1, #69	@ 0x45
 800432a:	d00a      	beq.n	8004342 <_scanf_float+0x352>
 800432c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004330:	464a      	mov	r2, r9
 8004332:	4640      	mov	r0, r8
 8004334:	4798      	blx	r3
 8004336:	6923      	ldr	r3, [r4, #16]
 8004338:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800433c:	3b01      	subs	r3, #1
 800433e:	1eb5      	subs	r5, r6, #2
 8004340:	6123      	str	r3, [r4, #16]
 8004342:	464a      	mov	r2, r9
 8004344:	4640      	mov	r0, r8
 8004346:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800434a:	4798      	blx	r3
 800434c:	462e      	mov	r6, r5
 800434e:	6822      	ldr	r2, [r4, #0]
 8004350:	f012 0210 	ands.w	r2, r2, #16
 8004354:	d001      	beq.n	800435a <_scanf_float+0x36a>
 8004356:	2000      	movs	r0, #0
 8004358:	e68e      	b.n	8004078 <_scanf_float+0x88>
 800435a:	7032      	strb	r2, [r6, #0]
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004366:	d125      	bne.n	80043b4 <_scanf_float+0x3c4>
 8004368:	9b02      	ldr	r3, [sp, #8]
 800436a:	429f      	cmp	r7, r3
 800436c:	d00a      	beq.n	8004384 <_scanf_float+0x394>
 800436e:	1bda      	subs	r2, r3, r7
 8004370:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004374:	429e      	cmp	r6, r3
 8004376:	bf28      	it	cs
 8004378:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800437c:	4630      	mov	r0, r6
 800437e:	491f      	ldr	r1, [pc, #124]	@ (80043fc <_scanf_float+0x40c>)
 8004380:	f000 f902 	bl	8004588 <siprintf>
 8004384:	2200      	movs	r2, #0
 8004386:	4640      	mov	r0, r8
 8004388:	9901      	ldr	r1, [sp, #4]
 800438a:	f002 fbf9 	bl	8006b80 <_strtod_r>
 800438e:	9b03      	ldr	r3, [sp, #12]
 8004390:	6825      	ldr	r5, [r4, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f015 0f02 	tst.w	r5, #2
 8004398:	4606      	mov	r6, r0
 800439a:	460f      	mov	r7, r1
 800439c:	f103 0204 	add.w	r2, r3, #4
 80043a0:	d015      	beq.n	80043ce <_scanf_float+0x3de>
 80043a2:	9903      	ldr	r1, [sp, #12]
 80043a4:	600a      	str	r2, [r1, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	e9c3 6700 	strd	r6, r7, [r3]
 80043ac:	68e3      	ldr	r3, [r4, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	60e3      	str	r3, [r4, #12]
 80043b2:	e7d0      	b.n	8004356 <_scanf_float+0x366>
 80043b4:	9b04      	ldr	r3, [sp, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0e4      	beq.n	8004384 <_scanf_float+0x394>
 80043ba:	9905      	ldr	r1, [sp, #20]
 80043bc:	230a      	movs	r3, #10
 80043be:	4640      	mov	r0, r8
 80043c0:	3101      	adds	r1, #1
 80043c2:	f002 fc5d 	bl	8006c80 <_strtol_r>
 80043c6:	9b04      	ldr	r3, [sp, #16]
 80043c8:	9e05      	ldr	r6, [sp, #20]
 80043ca:	1ac2      	subs	r2, r0, r3
 80043cc:	e7d0      	b.n	8004370 <_scanf_float+0x380>
 80043ce:	076d      	lsls	r5, r5, #29
 80043d0:	d4e7      	bmi.n	80043a2 <_scanf_float+0x3b2>
 80043d2:	9d03      	ldr	r5, [sp, #12]
 80043d4:	602a      	str	r2, [r5, #0]
 80043d6:	681d      	ldr	r5, [r3, #0]
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	f7fc fb16 	bl	8000a0c <__aeabi_dcmpun>
 80043e0:	b120      	cbz	r0, 80043ec <_scanf_float+0x3fc>
 80043e2:	4807      	ldr	r0, [pc, #28]	@ (8004400 <_scanf_float+0x410>)
 80043e4:	f000 f9d2 	bl	800478c <nanf>
 80043e8:	6028      	str	r0, [r5, #0]
 80043ea:	e7df      	b.n	80043ac <_scanf_float+0x3bc>
 80043ec:	4630      	mov	r0, r6
 80043ee:	4639      	mov	r1, r7
 80043f0:	f7fc fb6a 	bl	8000ac8 <__aeabi_d2f>
 80043f4:	e7f8      	b.n	80043e8 <_scanf_float+0x3f8>
 80043f6:	2700      	movs	r7, #0
 80043f8:	e633      	b.n	8004062 <_scanf_float+0x72>
 80043fa:	bf00      	nop
 80043fc:	08007e66 	.word	0x08007e66
 8004400:	08007fa7 	.word	0x08007fa7

08004404 <std>:
 8004404:	2300      	movs	r3, #0
 8004406:	b510      	push	{r4, lr}
 8004408:	4604      	mov	r4, r0
 800440a:	e9c0 3300 	strd	r3, r3, [r0]
 800440e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004412:	6083      	str	r3, [r0, #8]
 8004414:	8181      	strh	r1, [r0, #12]
 8004416:	6643      	str	r3, [r0, #100]	@ 0x64
 8004418:	81c2      	strh	r2, [r0, #14]
 800441a:	6183      	str	r3, [r0, #24]
 800441c:	4619      	mov	r1, r3
 800441e:	2208      	movs	r2, #8
 8004420:	305c      	adds	r0, #92	@ 0x5c
 8004422:	f000 f916 	bl	8004652 <memset>
 8004426:	4b0d      	ldr	r3, [pc, #52]	@ (800445c <std+0x58>)
 8004428:	6224      	str	r4, [r4, #32]
 800442a:	6263      	str	r3, [r4, #36]	@ 0x24
 800442c:	4b0c      	ldr	r3, [pc, #48]	@ (8004460 <std+0x5c>)
 800442e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004430:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <std+0x60>)
 8004432:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004434:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <std+0x64>)
 8004436:	6323      	str	r3, [r4, #48]	@ 0x30
 8004438:	4b0c      	ldr	r3, [pc, #48]	@ (800446c <std+0x68>)
 800443a:	429c      	cmp	r4, r3
 800443c:	d006      	beq.n	800444c <std+0x48>
 800443e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004442:	4294      	cmp	r4, r2
 8004444:	d002      	beq.n	800444c <std+0x48>
 8004446:	33d0      	adds	r3, #208	@ 0xd0
 8004448:	429c      	cmp	r4, r3
 800444a:	d105      	bne.n	8004458 <std+0x54>
 800444c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004454:	f000 b97a 	b.w	800474c <__retarget_lock_init_recursive>
 8004458:	bd10      	pop	{r4, pc}
 800445a:	bf00      	nop
 800445c:	080045cd 	.word	0x080045cd
 8004460:	080045ef 	.word	0x080045ef
 8004464:	08004627 	.word	0x08004627
 8004468:	0800464b 	.word	0x0800464b
 800446c:	200002e0 	.word	0x200002e0

08004470 <stdio_exit_handler>:
 8004470:	4a02      	ldr	r2, [pc, #8]	@ (800447c <stdio_exit_handler+0xc>)
 8004472:	4903      	ldr	r1, [pc, #12]	@ (8004480 <stdio_exit_handler+0x10>)
 8004474:	4803      	ldr	r0, [pc, #12]	@ (8004484 <stdio_exit_handler+0x14>)
 8004476:	f000 b869 	b.w	800454c <_fwalk_sglue>
 800447a:	bf00      	nop
 800447c:	20000010 	.word	0x20000010
 8004480:	08007035 	.word	0x08007035
 8004484:	20000020 	.word	0x20000020

08004488 <cleanup_stdio>:
 8004488:	6841      	ldr	r1, [r0, #4]
 800448a:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <cleanup_stdio+0x34>)
 800448c:	b510      	push	{r4, lr}
 800448e:	4299      	cmp	r1, r3
 8004490:	4604      	mov	r4, r0
 8004492:	d001      	beq.n	8004498 <cleanup_stdio+0x10>
 8004494:	f002 fdce 	bl	8007034 <_fflush_r>
 8004498:	68a1      	ldr	r1, [r4, #8]
 800449a:	4b09      	ldr	r3, [pc, #36]	@ (80044c0 <cleanup_stdio+0x38>)
 800449c:	4299      	cmp	r1, r3
 800449e:	d002      	beq.n	80044a6 <cleanup_stdio+0x1e>
 80044a0:	4620      	mov	r0, r4
 80044a2:	f002 fdc7 	bl	8007034 <_fflush_r>
 80044a6:	68e1      	ldr	r1, [r4, #12]
 80044a8:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <cleanup_stdio+0x3c>)
 80044aa:	4299      	cmp	r1, r3
 80044ac:	d004      	beq.n	80044b8 <cleanup_stdio+0x30>
 80044ae:	4620      	mov	r0, r4
 80044b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b4:	f002 bdbe 	b.w	8007034 <_fflush_r>
 80044b8:	bd10      	pop	{r4, pc}
 80044ba:	bf00      	nop
 80044bc:	200002e0 	.word	0x200002e0
 80044c0:	20000348 	.word	0x20000348
 80044c4:	200003b0 	.word	0x200003b0

080044c8 <global_stdio_init.part.0>:
 80044c8:	b510      	push	{r4, lr}
 80044ca:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <global_stdio_init.part.0+0x30>)
 80044cc:	4c0b      	ldr	r4, [pc, #44]	@ (80044fc <global_stdio_init.part.0+0x34>)
 80044ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004500 <global_stdio_init.part.0+0x38>)
 80044d0:	4620      	mov	r0, r4
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	2104      	movs	r1, #4
 80044d6:	2200      	movs	r2, #0
 80044d8:	f7ff ff94 	bl	8004404 <std>
 80044dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044e0:	2201      	movs	r2, #1
 80044e2:	2109      	movs	r1, #9
 80044e4:	f7ff ff8e 	bl	8004404 <std>
 80044e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044ec:	2202      	movs	r2, #2
 80044ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044f2:	2112      	movs	r1, #18
 80044f4:	f7ff bf86 	b.w	8004404 <std>
 80044f8:	20000418 	.word	0x20000418
 80044fc:	200002e0 	.word	0x200002e0
 8004500:	08004471 	.word	0x08004471

08004504 <__sfp_lock_acquire>:
 8004504:	4801      	ldr	r0, [pc, #4]	@ (800450c <__sfp_lock_acquire+0x8>)
 8004506:	f000 b922 	b.w	800474e <__retarget_lock_acquire_recursive>
 800450a:	bf00      	nop
 800450c:	20000421 	.word	0x20000421

08004510 <__sfp_lock_release>:
 8004510:	4801      	ldr	r0, [pc, #4]	@ (8004518 <__sfp_lock_release+0x8>)
 8004512:	f000 b91d 	b.w	8004750 <__retarget_lock_release_recursive>
 8004516:	bf00      	nop
 8004518:	20000421 	.word	0x20000421

0800451c <__sinit>:
 800451c:	b510      	push	{r4, lr}
 800451e:	4604      	mov	r4, r0
 8004520:	f7ff fff0 	bl	8004504 <__sfp_lock_acquire>
 8004524:	6a23      	ldr	r3, [r4, #32]
 8004526:	b11b      	cbz	r3, 8004530 <__sinit+0x14>
 8004528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800452c:	f7ff bff0 	b.w	8004510 <__sfp_lock_release>
 8004530:	4b04      	ldr	r3, [pc, #16]	@ (8004544 <__sinit+0x28>)
 8004532:	6223      	str	r3, [r4, #32]
 8004534:	4b04      	ldr	r3, [pc, #16]	@ (8004548 <__sinit+0x2c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f5      	bne.n	8004528 <__sinit+0xc>
 800453c:	f7ff ffc4 	bl	80044c8 <global_stdio_init.part.0>
 8004540:	e7f2      	b.n	8004528 <__sinit+0xc>
 8004542:	bf00      	nop
 8004544:	08004489 	.word	0x08004489
 8004548:	20000418 	.word	0x20000418

0800454c <_fwalk_sglue>:
 800454c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004550:	4607      	mov	r7, r0
 8004552:	4688      	mov	r8, r1
 8004554:	4614      	mov	r4, r2
 8004556:	2600      	movs	r6, #0
 8004558:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800455c:	f1b9 0901 	subs.w	r9, r9, #1
 8004560:	d505      	bpl.n	800456e <_fwalk_sglue+0x22>
 8004562:	6824      	ldr	r4, [r4, #0]
 8004564:	2c00      	cmp	r4, #0
 8004566:	d1f7      	bne.n	8004558 <_fwalk_sglue+0xc>
 8004568:	4630      	mov	r0, r6
 800456a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456e:	89ab      	ldrh	r3, [r5, #12]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d907      	bls.n	8004584 <_fwalk_sglue+0x38>
 8004574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004578:	3301      	adds	r3, #1
 800457a:	d003      	beq.n	8004584 <_fwalk_sglue+0x38>
 800457c:	4629      	mov	r1, r5
 800457e:	4638      	mov	r0, r7
 8004580:	47c0      	blx	r8
 8004582:	4306      	orrs	r6, r0
 8004584:	3568      	adds	r5, #104	@ 0x68
 8004586:	e7e9      	b.n	800455c <_fwalk_sglue+0x10>

08004588 <siprintf>:
 8004588:	b40e      	push	{r1, r2, r3}
 800458a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800458e:	b510      	push	{r4, lr}
 8004590:	2400      	movs	r4, #0
 8004592:	b09d      	sub	sp, #116	@ 0x74
 8004594:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004596:	9002      	str	r0, [sp, #8]
 8004598:	9006      	str	r0, [sp, #24]
 800459a:	9107      	str	r1, [sp, #28]
 800459c:	9104      	str	r1, [sp, #16]
 800459e:	4809      	ldr	r0, [pc, #36]	@ (80045c4 <siprintf+0x3c>)
 80045a0:	4909      	ldr	r1, [pc, #36]	@ (80045c8 <siprintf+0x40>)
 80045a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80045a6:	9105      	str	r1, [sp, #20]
 80045a8:	6800      	ldr	r0, [r0, #0]
 80045aa:	a902      	add	r1, sp, #8
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80045b0:	f002 fbc4 	bl	8006d3c <_svfiprintf_r>
 80045b4:	9b02      	ldr	r3, [sp, #8]
 80045b6:	701c      	strb	r4, [r3, #0]
 80045b8:	b01d      	add	sp, #116	@ 0x74
 80045ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045be:	b003      	add	sp, #12
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	2000001c 	.word	0x2000001c
 80045c8:	ffff0208 	.word	0xffff0208

080045cc <__sread>:
 80045cc:	b510      	push	{r4, lr}
 80045ce:	460c      	mov	r4, r1
 80045d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d4:	f000 f86c 	bl	80046b0 <_read_r>
 80045d8:	2800      	cmp	r0, #0
 80045da:	bfab      	itete	ge
 80045dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80045de:	89a3      	ldrhlt	r3, [r4, #12]
 80045e0:	181b      	addge	r3, r3, r0
 80045e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80045e6:	bfac      	ite	ge
 80045e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045ea:	81a3      	strhlt	r3, [r4, #12]
 80045ec:	bd10      	pop	{r4, pc}

080045ee <__swrite>:
 80045ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f2:	461f      	mov	r7, r3
 80045f4:	898b      	ldrh	r3, [r1, #12]
 80045f6:	4605      	mov	r5, r0
 80045f8:	05db      	lsls	r3, r3, #23
 80045fa:	460c      	mov	r4, r1
 80045fc:	4616      	mov	r6, r2
 80045fe:	d505      	bpl.n	800460c <__swrite+0x1e>
 8004600:	2302      	movs	r3, #2
 8004602:	2200      	movs	r2, #0
 8004604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004608:	f000 f840 	bl	800468c <_lseek_r>
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	4632      	mov	r2, r6
 8004610:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004614:	81a3      	strh	r3, [r4, #12]
 8004616:	4628      	mov	r0, r5
 8004618:	463b      	mov	r3, r7
 800461a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800461e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004622:	f000 b857 	b.w	80046d4 <_write_r>

08004626 <__sseek>:
 8004626:	b510      	push	{r4, lr}
 8004628:	460c      	mov	r4, r1
 800462a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800462e:	f000 f82d 	bl	800468c <_lseek_r>
 8004632:	1c43      	adds	r3, r0, #1
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	bf15      	itete	ne
 8004638:	6560      	strne	r0, [r4, #84]	@ 0x54
 800463a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800463e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004642:	81a3      	strheq	r3, [r4, #12]
 8004644:	bf18      	it	ne
 8004646:	81a3      	strhne	r3, [r4, #12]
 8004648:	bd10      	pop	{r4, pc}

0800464a <__sclose>:
 800464a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800464e:	f000 b80d 	b.w	800466c <_close_r>

08004652 <memset>:
 8004652:	4603      	mov	r3, r0
 8004654:	4402      	add	r2, r0
 8004656:	4293      	cmp	r3, r2
 8004658:	d100      	bne.n	800465c <memset+0xa>
 800465a:	4770      	bx	lr
 800465c:	f803 1b01 	strb.w	r1, [r3], #1
 8004660:	e7f9      	b.n	8004656 <memset+0x4>
	...

08004664 <_localeconv_r>:
 8004664:	4800      	ldr	r0, [pc, #0]	@ (8004668 <_localeconv_r+0x4>)
 8004666:	4770      	bx	lr
 8004668:	2000015c 	.word	0x2000015c

0800466c <_close_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	2300      	movs	r3, #0
 8004670:	4d05      	ldr	r5, [pc, #20]	@ (8004688 <_close_r+0x1c>)
 8004672:	4604      	mov	r4, r0
 8004674:	4608      	mov	r0, r1
 8004676:	602b      	str	r3, [r5, #0]
 8004678:	f7fc fcbf 	bl	8000ffa <_close>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_close_r+0x1a>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	b103      	cbz	r3, 8004686 <_close_r+0x1a>
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	2000041c 	.word	0x2000041c

0800468c <_lseek_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4604      	mov	r4, r0
 8004690:	4608      	mov	r0, r1
 8004692:	4611      	mov	r1, r2
 8004694:	2200      	movs	r2, #0
 8004696:	4d05      	ldr	r5, [pc, #20]	@ (80046ac <_lseek_r+0x20>)
 8004698:	602a      	str	r2, [r5, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	f7fc fcd1 	bl	8001042 <_lseek>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_lseek_r+0x1e>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_lseek_r+0x1e>
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	2000041c 	.word	0x2000041c

080046b0 <_read_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4604      	mov	r4, r0
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	2200      	movs	r2, #0
 80046ba:	4d05      	ldr	r5, [pc, #20]	@ (80046d0 <_read_r+0x20>)
 80046bc:	602a      	str	r2, [r5, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	f7fc fc62 	bl	8000f88 <_read>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d102      	bne.n	80046ce <_read_r+0x1e>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	b103      	cbz	r3, 80046ce <_read_r+0x1e>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	2000041c 	.word	0x2000041c

080046d4 <_write_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4604      	mov	r4, r0
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	2200      	movs	r2, #0
 80046de:	4d05      	ldr	r5, [pc, #20]	@ (80046f4 <_write_r+0x20>)
 80046e0:	602a      	str	r2, [r5, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f7fc fc6d 	bl	8000fc2 <_write>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_write_r+0x1e>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_write_r+0x1e>
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	2000041c 	.word	0x2000041c

080046f8 <__errno>:
 80046f8:	4b01      	ldr	r3, [pc, #4]	@ (8004700 <__errno+0x8>)
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	2000001c 	.word	0x2000001c

08004704 <__libc_init_array>:
 8004704:	b570      	push	{r4, r5, r6, lr}
 8004706:	2600      	movs	r6, #0
 8004708:	4d0c      	ldr	r5, [pc, #48]	@ (800473c <__libc_init_array+0x38>)
 800470a:	4c0d      	ldr	r4, [pc, #52]	@ (8004740 <__libc_init_array+0x3c>)
 800470c:	1b64      	subs	r4, r4, r5
 800470e:	10a4      	asrs	r4, r4, #2
 8004710:	42a6      	cmp	r6, r4
 8004712:	d109      	bne.n	8004728 <__libc_init_array+0x24>
 8004714:	f003 fb6c 	bl	8007df0 <_init>
 8004718:	2600      	movs	r6, #0
 800471a:	4d0a      	ldr	r5, [pc, #40]	@ (8004744 <__libc_init_array+0x40>)
 800471c:	4c0a      	ldr	r4, [pc, #40]	@ (8004748 <__libc_init_array+0x44>)
 800471e:	1b64      	subs	r4, r4, r5
 8004720:	10a4      	asrs	r4, r4, #2
 8004722:	42a6      	cmp	r6, r4
 8004724:	d105      	bne.n	8004732 <__libc_init_array+0x2e>
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	f855 3b04 	ldr.w	r3, [r5], #4
 800472c:	4798      	blx	r3
 800472e:	3601      	adds	r6, #1
 8004730:	e7ee      	b.n	8004710 <__libc_init_array+0xc>
 8004732:	f855 3b04 	ldr.w	r3, [r5], #4
 8004736:	4798      	blx	r3
 8004738:	3601      	adds	r6, #1
 800473a:	e7f2      	b.n	8004722 <__libc_init_array+0x1e>
 800473c:	08008264 	.word	0x08008264
 8004740:	08008264 	.word	0x08008264
 8004744:	08008264 	.word	0x08008264
 8004748:	08008268 	.word	0x08008268

0800474c <__retarget_lock_init_recursive>:
 800474c:	4770      	bx	lr

0800474e <__retarget_lock_acquire_recursive>:
 800474e:	4770      	bx	lr

08004750 <__retarget_lock_release_recursive>:
 8004750:	4770      	bx	lr

08004752 <memchr>:
 8004752:	4603      	mov	r3, r0
 8004754:	b510      	push	{r4, lr}
 8004756:	b2c9      	uxtb	r1, r1
 8004758:	4402      	add	r2, r0
 800475a:	4293      	cmp	r3, r2
 800475c:	4618      	mov	r0, r3
 800475e:	d101      	bne.n	8004764 <memchr+0x12>
 8004760:	2000      	movs	r0, #0
 8004762:	e003      	b.n	800476c <memchr+0x1a>
 8004764:	7804      	ldrb	r4, [r0, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	428c      	cmp	r4, r1
 800476a:	d1f6      	bne.n	800475a <memchr+0x8>
 800476c:	bd10      	pop	{r4, pc}

0800476e <memcpy>:
 800476e:	440a      	add	r2, r1
 8004770:	4291      	cmp	r1, r2
 8004772:	f100 33ff 	add.w	r3, r0, #4294967295
 8004776:	d100      	bne.n	800477a <memcpy+0xc>
 8004778:	4770      	bx	lr
 800477a:	b510      	push	{r4, lr}
 800477c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004780:	4291      	cmp	r1, r2
 8004782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004786:	d1f9      	bne.n	800477c <memcpy+0xe>
 8004788:	bd10      	pop	{r4, pc}
	...

0800478c <nanf>:
 800478c:	4800      	ldr	r0, [pc, #0]	@ (8004790 <nanf+0x4>)
 800478e:	4770      	bx	lr
 8004790:	7fc00000 	.word	0x7fc00000

08004794 <quorem>:
 8004794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004798:	6903      	ldr	r3, [r0, #16]
 800479a:	690c      	ldr	r4, [r1, #16]
 800479c:	4607      	mov	r7, r0
 800479e:	42a3      	cmp	r3, r4
 80047a0:	db7e      	blt.n	80048a0 <quorem+0x10c>
 80047a2:	3c01      	subs	r4, #1
 80047a4:	00a3      	lsls	r3, r4, #2
 80047a6:	f100 0514 	add.w	r5, r0, #20
 80047aa:	f101 0814 	add.w	r8, r1, #20
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80047ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047be:	3301      	adds	r3, #1
 80047c0:	429a      	cmp	r2, r3
 80047c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80047c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80047ca:	d32e      	bcc.n	800482a <quorem+0x96>
 80047cc:	f04f 0a00 	mov.w	sl, #0
 80047d0:	46c4      	mov	ip, r8
 80047d2:	46ae      	mov	lr, r5
 80047d4:	46d3      	mov	fp, sl
 80047d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80047da:	b298      	uxth	r0, r3
 80047dc:	fb06 a000 	mla	r0, r6, r0, sl
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	0c02      	lsrs	r2, r0, #16
 80047e4:	fb06 2303 	mla	r3, r6, r3, r2
 80047e8:	f8de 2000 	ldr.w	r2, [lr]
 80047ec:	b280      	uxth	r0, r0
 80047ee:	b292      	uxth	r2, r2
 80047f0:	1a12      	subs	r2, r2, r0
 80047f2:	445a      	add	r2, fp
 80047f4:	f8de 0000 	ldr.w	r0, [lr]
 80047f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004802:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004806:	b292      	uxth	r2, r2
 8004808:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800480c:	45e1      	cmp	r9, ip
 800480e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004812:	f84e 2b04 	str.w	r2, [lr], #4
 8004816:	d2de      	bcs.n	80047d6 <quorem+0x42>
 8004818:	9b00      	ldr	r3, [sp, #0]
 800481a:	58eb      	ldr	r3, [r5, r3]
 800481c:	b92b      	cbnz	r3, 800482a <quorem+0x96>
 800481e:	9b01      	ldr	r3, [sp, #4]
 8004820:	3b04      	subs	r3, #4
 8004822:	429d      	cmp	r5, r3
 8004824:	461a      	mov	r2, r3
 8004826:	d32f      	bcc.n	8004888 <quorem+0xf4>
 8004828:	613c      	str	r4, [r7, #16]
 800482a:	4638      	mov	r0, r7
 800482c:	f001 f9ca 	bl	8005bc4 <__mcmp>
 8004830:	2800      	cmp	r0, #0
 8004832:	db25      	blt.n	8004880 <quorem+0xec>
 8004834:	4629      	mov	r1, r5
 8004836:	2000      	movs	r0, #0
 8004838:	f858 2b04 	ldr.w	r2, [r8], #4
 800483c:	f8d1 c000 	ldr.w	ip, [r1]
 8004840:	fa1f fe82 	uxth.w	lr, r2
 8004844:	fa1f f38c 	uxth.w	r3, ip
 8004848:	eba3 030e 	sub.w	r3, r3, lr
 800484c:	4403      	add	r3, r0
 800484e:	0c12      	lsrs	r2, r2, #16
 8004850:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004854:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004858:	b29b      	uxth	r3, r3
 800485a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800485e:	45c1      	cmp	r9, r8
 8004860:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004864:	f841 3b04 	str.w	r3, [r1], #4
 8004868:	d2e6      	bcs.n	8004838 <quorem+0xa4>
 800486a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800486e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004872:	b922      	cbnz	r2, 800487e <quorem+0xea>
 8004874:	3b04      	subs	r3, #4
 8004876:	429d      	cmp	r5, r3
 8004878:	461a      	mov	r2, r3
 800487a:	d30b      	bcc.n	8004894 <quorem+0x100>
 800487c:	613c      	str	r4, [r7, #16]
 800487e:	3601      	adds	r6, #1
 8004880:	4630      	mov	r0, r6
 8004882:	b003      	add	sp, #12
 8004884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	3b04      	subs	r3, #4
 800488c:	2a00      	cmp	r2, #0
 800488e:	d1cb      	bne.n	8004828 <quorem+0x94>
 8004890:	3c01      	subs	r4, #1
 8004892:	e7c6      	b.n	8004822 <quorem+0x8e>
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	3b04      	subs	r3, #4
 8004898:	2a00      	cmp	r2, #0
 800489a:	d1ef      	bne.n	800487c <quorem+0xe8>
 800489c:	3c01      	subs	r4, #1
 800489e:	e7ea      	b.n	8004876 <quorem+0xe2>
 80048a0:	2000      	movs	r0, #0
 80048a2:	e7ee      	b.n	8004882 <quorem+0xee>
 80048a4:	0000      	movs	r0, r0
	...

080048a8 <_dtoa_r>:
 80048a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ac:	4614      	mov	r4, r2
 80048ae:	461d      	mov	r5, r3
 80048b0:	69c7      	ldr	r7, [r0, #28]
 80048b2:	b097      	sub	sp, #92	@ 0x5c
 80048b4:	4681      	mov	r9, r0
 80048b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80048ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80048bc:	b97f      	cbnz	r7, 80048de <_dtoa_r+0x36>
 80048be:	2010      	movs	r0, #16
 80048c0:	f000 fe0e 	bl	80054e0 <malloc>
 80048c4:	4602      	mov	r2, r0
 80048c6:	f8c9 001c 	str.w	r0, [r9, #28]
 80048ca:	b920      	cbnz	r0, 80048d6 <_dtoa_r+0x2e>
 80048cc:	21ef      	movs	r1, #239	@ 0xef
 80048ce:	4bac      	ldr	r3, [pc, #688]	@ (8004b80 <_dtoa_r+0x2d8>)
 80048d0:	48ac      	ldr	r0, [pc, #688]	@ (8004b84 <_dtoa_r+0x2dc>)
 80048d2:	f002 fc19 	bl	8007108 <__assert_func>
 80048d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80048da:	6007      	str	r7, [r0, #0]
 80048dc:	60c7      	str	r7, [r0, #12]
 80048de:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	b159      	cbz	r1, 80048fe <_dtoa_r+0x56>
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	2301      	movs	r3, #1
 80048ea:	4093      	lsls	r3, r2
 80048ec:	604a      	str	r2, [r1, #4]
 80048ee:	608b      	str	r3, [r1, #8]
 80048f0:	4648      	mov	r0, r9
 80048f2:	f000 feeb 	bl	80056cc <_Bfree>
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	1e2b      	subs	r3, r5, #0
 8004900:	bfaf      	iteee	ge
 8004902:	2300      	movge	r3, #0
 8004904:	2201      	movlt	r2, #1
 8004906:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800490a:	9307      	strlt	r3, [sp, #28]
 800490c:	bfa8      	it	ge
 800490e:	6033      	strge	r3, [r6, #0]
 8004910:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004914:	4b9c      	ldr	r3, [pc, #624]	@ (8004b88 <_dtoa_r+0x2e0>)
 8004916:	bfb8      	it	lt
 8004918:	6032      	strlt	r2, [r6, #0]
 800491a:	ea33 0308 	bics.w	r3, r3, r8
 800491e:	d112      	bne.n	8004946 <_dtoa_r+0x9e>
 8004920:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004924:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800492c:	4323      	orrs	r3, r4
 800492e:	f000 855e 	beq.w	80053ee <_dtoa_r+0xb46>
 8004932:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004934:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004b8c <_dtoa_r+0x2e4>
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8560 	beq.w	80053fe <_dtoa_r+0xb56>
 800493e:	f10a 0303 	add.w	r3, sl, #3
 8004942:	f000 bd5a 	b.w	80053fa <_dtoa_r+0xb52>
 8004946:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800494a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800494e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004952:	2200      	movs	r2, #0
 8004954:	2300      	movs	r3, #0
 8004956:	f7fc f827 	bl	80009a8 <__aeabi_dcmpeq>
 800495a:	4607      	mov	r7, r0
 800495c:	b158      	cbz	r0, 8004976 <_dtoa_r+0xce>
 800495e:	2301      	movs	r3, #1
 8004960:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004966:	b113      	cbz	r3, 800496e <_dtoa_r+0xc6>
 8004968:	4b89      	ldr	r3, [pc, #548]	@ (8004b90 <_dtoa_r+0x2e8>)
 800496a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004b94 <_dtoa_r+0x2ec>
 8004972:	f000 bd44 	b.w	80053fe <_dtoa_r+0xb56>
 8004976:	ab14      	add	r3, sp, #80	@ 0x50
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	ab15      	add	r3, sp, #84	@ 0x54
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4648      	mov	r0, r9
 8004980:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004984:	f001 fa36 	bl	8005df4 <__d2b>
 8004988:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800498c:	9003      	str	r0, [sp, #12]
 800498e:	2e00      	cmp	r6, #0
 8004990:	d078      	beq.n	8004a84 <_dtoa_r+0x1dc>
 8004992:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004998:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800499c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80049a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80049a8:	9712      	str	r7, [sp, #72]	@ 0x48
 80049aa:	4619      	mov	r1, r3
 80049ac:	2200      	movs	r2, #0
 80049ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004b98 <_dtoa_r+0x2f0>)
 80049b0:	f7fb fbda 	bl	8000168 <__aeabi_dsub>
 80049b4:	a36c      	add	r3, pc, #432	@ (adr r3, 8004b68 <_dtoa_r+0x2c0>)
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	f7fb fd8d 	bl	80004d8 <__aeabi_dmul>
 80049be:	a36c      	add	r3, pc, #432	@ (adr r3, 8004b70 <_dtoa_r+0x2c8>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f7fb fbd2 	bl	800016c <__adddf3>
 80049c8:	4604      	mov	r4, r0
 80049ca:	4630      	mov	r0, r6
 80049cc:	460d      	mov	r5, r1
 80049ce:	f7fb fd19 	bl	8000404 <__aeabi_i2d>
 80049d2:	a369      	add	r3, pc, #420	@ (adr r3, 8004b78 <_dtoa_r+0x2d0>)
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	f7fb fd7e 	bl	80004d8 <__aeabi_dmul>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4620      	mov	r0, r4
 80049e2:	4629      	mov	r1, r5
 80049e4:	f7fb fbc2 	bl	800016c <__adddf3>
 80049e8:	4604      	mov	r4, r0
 80049ea:	460d      	mov	r5, r1
 80049ec:	f7fc f824 	bl	8000a38 <__aeabi_d2iz>
 80049f0:	2200      	movs	r2, #0
 80049f2:	4607      	mov	r7, r0
 80049f4:	2300      	movs	r3, #0
 80049f6:	4620      	mov	r0, r4
 80049f8:	4629      	mov	r1, r5
 80049fa:	f7fb ffdf 	bl	80009bc <__aeabi_dcmplt>
 80049fe:	b140      	cbz	r0, 8004a12 <_dtoa_r+0x16a>
 8004a00:	4638      	mov	r0, r7
 8004a02:	f7fb fcff 	bl	8000404 <__aeabi_i2d>
 8004a06:	4622      	mov	r2, r4
 8004a08:	462b      	mov	r3, r5
 8004a0a:	f7fb ffcd 	bl	80009a8 <__aeabi_dcmpeq>
 8004a0e:	b900      	cbnz	r0, 8004a12 <_dtoa_r+0x16a>
 8004a10:	3f01      	subs	r7, #1
 8004a12:	2f16      	cmp	r7, #22
 8004a14:	d854      	bhi.n	8004ac0 <_dtoa_r+0x218>
 8004a16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a1a:	4b60      	ldr	r3, [pc, #384]	@ (8004b9c <_dtoa_r+0x2f4>)
 8004a1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	f7fb ffca 	bl	80009bc <__aeabi_dcmplt>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d04b      	beq.n	8004ac4 <_dtoa_r+0x21c>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	3f01      	subs	r7, #1
 8004a30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a34:	1b9b      	subs	r3, r3, r6
 8004a36:	1e5a      	subs	r2, r3, #1
 8004a38:	bf49      	itett	mi
 8004a3a:	f1c3 0301 	rsbmi	r3, r3, #1
 8004a3e:	2300      	movpl	r3, #0
 8004a40:	9304      	strmi	r3, [sp, #16]
 8004a42:	2300      	movmi	r3, #0
 8004a44:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a46:	bf54      	ite	pl
 8004a48:	9304      	strpl	r3, [sp, #16]
 8004a4a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004a4c:	2f00      	cmp	r7, #0
 8004a4e:	db3b      	blt.n	8004ac8 <_dtoa_r+0x220>
 8004a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a52:	970e      	str	r7, [sp, #56]	@ 0x38
 8004a54:	443b      	add	r3, r7
 8004a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a58:	2300      	movs	r3, #0
 8004a5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a5e:	2b09      	cmp	r3, #9
 8004a60:	d865      	bhi.n	8004b2e <_dtoa_r+0x286>
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	bfc4      	itt	gt
 8004a66:	3b04      	subgt	r3, #4
 8004a68:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004a6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a6c:	bfc8      	it	gt
 8004a6e:	2400      	movgt	r4, #0
 8004a70:	f1a3 0302 	sub.w	r3, r3, #2
 8004a74:	bfd8      	it	le
 8004a76:	2401      	movle	r4, #1
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d864      	bhi.n	8004b46 <_dtoa_r+0x29e>
 8004a7c:	e8df f003 	tbb	[pc, r3]
 8004a80:	2c385553 	.word	0x2c385553
 8004a84:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004a88:	441e      	add	r6, r3
 8004a8a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	bfc1      	itttt	gt
 8004a92:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004a96:	fa08 f803 	lslgt.w	r8, r8, r3
 8004a9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004a9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004aa2:	bfd6      	itet	le
 8004aa4:	f1c3 0320 	rsble	r3, r3, #32
 8004aa8:	ea48 0003 	orrgt.w	r0, r8, r3
 8004aac:	fa04 f003 	lslle.w	r0, r4, r3
 8004ab0:	f7fb fc98 	bl	80003e4 <__aeabi_ui2d>
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004aba:	3e01      	subs	r6, #1
 8004abc:	9212      	str	r2, [sp, #72]	@ 0x48
 8004abe:	e774      	b.n	80049aa <_dtoa_r+0x102>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e7b5      	b.n	8004a30 <_dtoa_r+0x188>
 8004ac4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004ac6:	e7b4      	b.n	8004a32 <_dtoa_r+0x18a>
 8004ac8:	9b04      	ldr	r3, [sp, #16]
 8004aca:	1bdb      	subs	r3, r3, r7
 8004acc:	9304      	str	r3, [sp, #16]
 8004ace:	427b      	negs	r3, r7
 8004ad0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ad6:	e7c1      	b.n	8004a5c <_dtoa_r+0x1b4>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004adc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ade:	eb07 0b03 	add.w	fp, r7, r3
 8004ae2:	f10b 0301 	add.w	r3, fp, #1
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	9308      	str	r3, [sp, #32]
 8004aea:	bfb8      	it	lt
 8004aec:	2301      	movlt	r3, #1
 8004aee:	e006      	b.n	8004afe <_dtoa_r+0x256>
 8004af0:	2301      	movs	r3, #1
 8004af2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004af4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	dd28      	ble.n	8004b4c <_dtoa_r+0x2a4>
 8004afa:	469b      	mov	fp, r3
 8004afc:	9308      	str	r3, [sp, #32]
 8004afe:	2100      	movs	r1, #0
 8004b00:	2204      	movs	r2, #4
 8004b02:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004b06:	f102 0514 	add.w	r5, r2, #20
 8004b0a:	429d      	cmp	r5, r3
 8004b0c:	d926      	bls.n	8004b5c <_dtoa_r+0x2b4>
 8004b0e:	6041      	str	r1, [r0, #4]
 8004b10:	4648      	mov	r0, r9
 8004b12:	f000 fd9b 	bl	800564c <_Balloc>
 8004b16:	4682      	mov	sl, r0
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d143      	bne.n	8004ba4 <_dtoa_r+0x2fc>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004b22:	4b1f      	ldr	r3, [pc, #124]	@ (8004ba0 <_dtoa_r+0x2f8>)
 8004b24:	e6d4      	b.n	80048d0 <_dtoa_r+0x28>
 8004b26:	2300      	movs	r3, #0
 8004b28:	e7e3      	b.n	8004af2 <_dtoa_r+0x24a>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e7d5      	b.n	8004ada <_dtoa_r+0x232>
 8004b2e:	2401      	movs	r4, #1
 8004b30:	2300      	movs	r3, #0
 8004b32:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004b34:	9320      	str	r3, [sp, #128]	@ 0x80
 8004b36:	f04f 3bff 	mov.w	fp, #4294967295
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2312      	movs	r3, #18
 8004b3e:	f8cd b020 	str.w	fp, [sp, #32]
 8004b42:	9221      	str	r2, [sp, #132]	@ 0x84
 8004b44:	e7db      	b.n	8004afe <_dtoa_r+0x256>
 8004b46:	2301      	movs	r3, #1
 8004b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b4a:	e7f4      	b.n	8004b36 <_dtoa_r+0x28e>
 8004b4c:	f04f 0b01 	mov.w	fp, #1
 8004b50:	465b      	mov	r3, fp
 8004b52:	f8cd b020 	str.w	fp, [sp, #32]
 8004b56:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004b5a:	e7d0      	b.n	8004afe <_dtoa_r+0x256>
 8004b5c:	3101      	adds	r1, #1
 8004b5e:	0052      	lsls	r2, r2, #1
 8004b60:	e7d1      	b.n	8004b06 <_dtoa_r+0x25e>
 8004b62:	bf00      	nop
 8004b64:	f3af 8000 	nop.w
 8004b68:	636f4361 	.word	0x636f4361
 8004b6c:	3fd287a7 	.word	0x3fd287a7
 8004b70:	8b60c8b3 	.word	0x8b60c8b3
 8004b74:	3fc68a28 	.word	0x3fc68a28
 8004b78:	509f79fb 	.word	0x509f79fb
 8004b7c:	3fd34413 	.word	0x3fd34413
 8004b80:	08007e78 	.word	0x08007e78
 8004b84:	08007e8f 	.word	0x08007e8f
 8004b88:	7ff00000 	.word	0x7ff00000
 8004b8c:	08007e74 	.word	0x08007e74
 8004b90:	08007e43 	.word	0x08007e43
 8004b94:	08007e42 	.word	0x08007e42
 8004b98:	3ff80000 	.word	0x3ff80000
 8004b9c:	08008040 	.word	0x08008040
 8004ba0:	08007ee7 	.word	0x08007ee7
 8004ba4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ba8:	6018      	str	r0, [r3, #0]
 8004baa:	9b08      	ldr	r3, [sp, #32]
 8004bac:	2b0e      	cmp	r3, #14
 8004bae:	f200 80a1 	bhi.w	8004cf4 <_dtoa_r+0x44c>
 8004bb2:	2c00      	cmp	r4, #0
 8004bb4:	f000 809e 	beq.w	8004cf4 <_dtoa_r+0x44c>
 8004bb8:	2f00      	cmp	r7, #0
 8004bba:	dd33      	ble.n	8004c24 <_dtoa_r+0x37c>
 8004bbc:	4b9c      	ldr	r3, [pc, #624]	@ (8004e30 <_dtoa_r+0x588>)
 8004bbe:	f007 020f 	and.w	r2, r7, #15
 8004bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bc6:	05f8      	lsls	r0, r7, #23
 8004bc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bcc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004bd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004bd4:	d516      	bpl.n	8004c04 <_dtoa_r+0x35c>
 8004bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bda:	4b96      	ldr	r3, [pc, #600]	@ (8004e34 <_dtoa_r+0x58c>)
 8004bdc:	2603      	movs	r6, #3
 8004bde:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004be2:	f7fb fda3 	bl	800072c <__aeabi_ddiv>
 8004be6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004bea:	f004 040f 	and.w	r4, r4, #15
 8004bee:	4d91      	ldr	r5, [pc, #580]	@ (8004e34 <_dtoa_r+0x58c>)
 8004bf0:	b954      	cbnz	r4, 8004c08 <_dtoa_r+0x360>
 8004bf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bfa:	f7fb fd97 	bl	800072c <__aeabi_ddiv>
 8004bfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c02:	e028      	b.n	8004c56 <_dtoa_r+0x3ae>
 8004c04:	2602      	movs	r6, #2
 8004c06:	e7f2      	b.n	8004bee <_dtoa_r+0x346>
 8004c08:	07e1      	lsls	r1, r4, #31
 8004c0a:	d508      	bpl.n	8004c1e <_dtoa_r+0x376>
 8004c0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c14:	f7fb fc60 	bl	80004d8 <__aeabi_dmul>
 8004c18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c1c:	3601      	adds	r6, #1
 8004c1e:	1064      	asrs	r4, r4, #1
 8004c20:	3508      	adds	r5, #8
 8004c22:	e7e5      	b.n	8004bf0 <_dtoa_r+0x348>
 8004c24:	f000 80af 	beq.w	8004d86 <_dtoa_r+0x4de>
 8004c28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c2c:	427c      	negs	r4, r7
 8004c2e:	4b80      	ldr	r3, [pc, #512]	@ (8004e30 <_dtoa_r+0x588>)
 8004c30:	f004 020f 	and.w	r2, r4, #15
 8004c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f7fb fc4c 	bl	80004d8 <__aeabi_dmul>
 8004c40:	2602      	movs	r6, #2
 8004c42:	2300      	movs	r3, #0
 8004c44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c48:	4d7a      	ldr	r5, [pc, #488]	@ (8004e34 <_dtoa_r+0x58c>)
 8004c4a:	1124      	asrs	r4, r4, #4
 8004c4c:	2c00      	cmp	r4, #0
 8004c4e:	f040 808f 	bne.w	8004d70 <_dtoa_r+0x4c8>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1d3      	bne.n	8004bfe <_dtoa_r+0x356>
 8004c56:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004c5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8094 	beq.w	8004d8a <_dtoa_r+0x4e2>
 8004c62:	2200      	movs	r2, #0
 8004c64:	4620      	mov	r0, r4
 8004c66:	4629      	mov	r1, r5
 8004c68:	4b73      	ldr	r3, [pc, #460]	@ (8004e38 <_dtoa_r+0x590>)
 8004c6a:	f7fb fea7 	bl	80009bc <__aeabi_dcmplt>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	f000 808b 	beq.w	8004d8a <_dtoa_r+0x4e2>
 8004c74:	9b08      	ldr	r3, [sp, #32]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 8087 	beq.w	8004d8a <_dtoa_r+0x4e2>
 8004c7c:	f1bb 0f00 	cmp.w	fp, #0
 8004c80:	dd34      	ble.n	8004cec <_dtoa_r+0x444>
 8004c82:	4620      	mov	r0, r4
 8004c84:	2200      	movs	r2, #0
 8004c86:	4629      	mov	r1, r5
 8004c88:	4b6c      	ldr	r3, [pc, #432]	@ (8004e3c <_dtoa_r+0x594>)
 8004c8a:	f7fb fc25 	bl	80004d8 <__aeabi_dmul>
 8004c8e:	465c      	mov	r4, fp
 8004c90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c94:	f107 38ff 	add.w	r8, r7, #4294967295
 8004c98:	3601      	adds	r6, #1
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f7fb fbb2 	bl	8000404 <__aeabi_i2d>
 8004ca0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ca4:	f7fb fc18 	bl	80004d8 <__aeabi_dmul>
 8004ca8:	2200      	movs	r2, #0
 8004caa:	4b65      	ldr	r3, [pc, #404]	@ (8004e40 <_dtoa_r+0x598>)
 8004cac:	f7fb fa5e 	bl	800016c <__adddf3>
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004cb6:	2c00      	cmp	r4, #0
 8004cb8:	d16a      	bne.n	8004d90 <_dtoa_r+0x4e8>
 8004cba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	4b60      	ldr	r3, [pc, #384]	@ (8004e44 <_dtoa_r+0x59c>)
 8004cc2:	f7fb fa51 	bl	8000168 <__aeabi_dsub>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004cce:	462a      	mov	r2, r5
 8004cd0:	4633      	mov	r3, r6
 8004cd2:	f7fb fe91 	bl	80009f8 <__aeabi_dcmpgt>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	f040 8298 	bne.w	800520c <_dtoa_r+0x964>
 8004cdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004ce6:	f7fb fe69 	bl	80009bc <__aeabi_dcmplt>
 8004cea:	bb38      	cbnz	r0, 8004d3c <_dtoa_r+0x494>
 8004cec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004cf0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004cf4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f2c0 8157 	blt.w	8004faa <_dtoa_r+0x702>
 8004cfc:	2f0e      	cmp	r7, #14
 8004cfe:	f300 8154 	bgt.w	8004faa <_dtoa_r+0x702>
 8004d02:	4b4b      	ldr	r3, [pc, #300]	@ (8004e30 <_dtoa_r+0x588>)
 8004d04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004d08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f280 80e5 	bge.w	8004ee2 <_dtoa_r+0x63a>
 8004d18:	9b08      	ldr	r3, [sp, #32]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f300 80e1 	bgt.w	8004ee2 <_dtoa_r+0x63a>
 8004d20:	d10c      	bne.n	8004d3c <_dtoa_r+0x494>
 8004d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d26:	2200      	movs	r2, #0
 8004d28:	4b46      	ldr	r3, [pc, #280]	@ (8004e44 <_dtoa_r+0x59c>)
 8004d2a:	f7fb fbd5 	bl	80004d8 <__aeabi_dmul>
 8004d2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d32:	f7fb fe57 	bl	80009e4 <__aeabi_dcmpge>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	f000 8266 	beq.w	8005208 <_dtoa_r+0x960>
 8004d3c:	2400      	movs	r4, #0
 8004d3e:	4625      	mov	r5, r4
 8004d40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d42:	4656      	mov	r6, sl
 8004d44:	ea6f 0803 	mvn.w	r8, r3
 8004d48:	2700      	movs	r7, #0
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	4648      	mov	r0, r9
 8004d4e:	f000 fcbd 	bl	80056cc <_Bfree>
 8004d52:	2d00      	cmp	r5, #0
 8004d54:	f000 80bd 	beq.w	8004ed2 <_dtoa_r+0x62a>
 8004d58:	b12f      	cbz	r7, 8004d66 <_dtoa_r+0x4be>
 8004d5a:	42af      	cmp	r7, r5
 8004d5c:	d003      	beq.n	8004d66 <_dtoa_r+0x4be>
 8004d5e:	4639      	mov	r1, r7
 8004d60:	4648      	mov	r0, r9
 8004d62:	f000 fcb3 	bl	80056cc <_Bfree>
 8004d66:	4629      	mov	r1, r5
 8004d68:	4648      	mov	r0, r9
 8004d6a:	f000 fcaf 	bl	80056cc <_Bfree>
 8004d6e:	e0b0      	b.n	8004ed2 <_dtoa_r+0x62a>
 8004d70:	07e2      	lsls	r2, r4, #31
 8004d72:	d505      	bpl.n	8004d80 <_dtoa_r+0x4d8>
 8004d74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d78:	f7fb fbae 	bl	80004d8 <__aeabi_dmul>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	3601      	adds	r6, #1
 8004d80:	1064      	asrs	r4, r4, #1
 8004d82:	3508      	adds	r5, #8
 8004d84:	e762      	b.n	8004c4c <_dtoa_r+0x3a4>
 8004d86:	2602      	movs	r6, #2
 8004d88:	e765      	b.n	8004c56 <_dtoa_r+0x3ae>
 8004d8a:	46b8      	mov	r8, r7
 8004d8c:	9c08      	ldr	r4, [sp, #32]
 8004d8e:	e784      	b.n	8004c9a <_dtoa_r+0x3f2>
 8004d90:	4b27      	ldr	r3, [pc, #156]	@ (8004e30 <_dtoa_r+0x588>)
 8004d92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d9c:	4454      	add	r4, sl
 8004d9e:	2900      	cmp	r1, #0
 8004da0:	d054      	beq.n	8004e4c <_dtoa_r+0x5a4>
 8004da2:	2000      	movs	r0, #0
 8004da4:	4928      	ldr	r1, [pc, #160]	@ (8004e48 <_dtoa_r+0x5a0>)
 8004da6:	f7fb fcc1 	bl	800072c <__aeabi_ddiv>
 8004daa:	4633      	mov	r3, r6
 8004dac:	462a      	mov	r2, r5
 8004dae:	f7fb f9db 	bl	8000168 <__aeabi_dsub>
 8004db2:	4656      	mov	r6, sl
 8004db4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004db8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dbc:	f7fb fe3c 	bl	8000a38 <__aeabi_d2iz>
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	f7fb fb1f 	bl	8000404 <__aeabi_i2d>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dce:	f7fb f9cb 	bl	8000168 <__aeabi_dsub>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	3530      	adds	r5, #48	@ 0x30
 8004dd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004ddc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004de0:	f806 5b01 	strb.w	r5, [r6], #1
 8004de4:	f7fb fdea 	bl	80009bc <__aeabi_dcmplt>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d172      	bne.n	8004ed2 <_dtoa_r+0x62a>
 8004dec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004df0:	2000      	movs	r0, #0
 8004df2:	4911      	ldr	r1, [pc, #68]	@ (8004e38 <_dtoa_r+0x590>)
 8004df4:	f7fb f9b8 	bl	8000168 <__aeabi_dsub>
 8004df8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004dfc:	f7fb fdde 	bl	80009bc <__aeabi_dcmplt>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	f040 80b4 	bne.w	8004f6e <_dtoa_r+0x6c6>
 8004e06:	42a6      	cmp	r6, r4
 8004e08:	f43f af70 	beq.w	8004cec <_dtoa_r+0x444>
 8004e0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e10:	2200      	movs	r2, #0
 8004e12:	4b0a      	ldr	r3, [pc, #40]	@ (8004e3c <_dtoa_r+0x594>)
 8004e14:	f7fb fb60 	bl	80004d8 <__aeabi_dmul>
 8004e18:	2200      	movs	r2, #0
 8004e1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e22:	4b06      	ldr	r3, [pc, #24]	@ (8004e3c <_dtoa_r+0x594>)
 8004e24:	f7fb fb58 	bl	80004d8 <__aeabi_dmul>
 8004e28:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e2c:	e7c4      	b.n	8004db8 <_dtoa_r+0x510>
 8004e2e:	bf00      	nop
 8004e30:	08008040 	.word	0x08008040
 8004e34:	08008018 	.word	0x08008018
 8004e38:	3ff00000 	.word	0x3ff00000
 8004e3c:	40240000 	.word	0x40240000
 8004e40:	401c0000 	.word	0x401c0000
 8004e44:	40140000 	.word	0x40140000
 8004e48:	3fe00000 	.word	0x3fe00000
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f7fb fb42 	bl	80004d8 <__aeabi_dmul>
 8004e54:	4656      	mov	r6, sl
 8004e56:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e5a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004e5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e60:	f7fb fdea 	bl	8000a38 <__aeabi_d2iz>
 8004e64:	4605      	mov	r5, r0
 8004e66:	f7fb facd 	bl	8000404 <__aeabi_i2d>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e72:	f7fb f979 	bl	8000168 <__aeabi_dsub>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	3530      	adds	r5, #48	@ 0x30
 8004e7c:	f806 5b01 	strb.w	r5, [r6], #1
 8004e80:	42a6      	cmp	r6, r4
 8004e82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	d124      	bne.n	8004ed6 <_dtoa_r+0x62e>
 8004e8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e90:	4bae      	ldr	r3, [pc, #696]	@ (800514c <_dtoa_r+0x8a4>)
 8004e92:	f7fb f96b 	bl	800016c <__adddf3>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e9e:	f7fb fdab 	bl	80009f8 <__aeabi_dcmpgt>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d163      	bne.n	8004f6e <_dtoa_r+0x6c6>
 8004ea6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004eaa:	2000      	movs	r0, #0
 8004eac:	49a7      	ldr	r1, [pc, #668]	@ (800514c <_dtoa_r+0x8a4>)
 8004eae:	f7fb f95b 	bl	8000168 <__aeabi_dsub>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eba:	f7fb fd7f 	bl	80009bc <__aeabi_dcmplt>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	f43f af14 	beq.w	8004cec <_dtoa_r+0x444>
 8004ec4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004ec6:	1e73      	subs	r3, r6, #1
 8004ec8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004eca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004ece:	2b30      	cmp	r3, #48	@ 0x30
 8004ed0:	d0f8      	beq.n	8004ec4 <_dtoa_r+0x61c>
 8004ed2:	4647      	mov	r7, r8
 8004ed4:	e03b      	b.n	8004f4e <_dtoa_r+0x6a6>
 8004ed6:	4b9e      	ldr	r3, [pc, #632]	@ (8005150 <_dtoa_r+0x8a8>)
 8004ed8:	f7fb fafe 	bl	80004d8 <__aeabi_dmul>
 8004edc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ee0:	e7bc      	b.n	8004e5c <_dtoa_r+0x5b4>
 8004ee2:	4656      	mov	r6, sl
 8004ee4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eec:	4620      	mov	r0, r4
 8004eee:	4629      	mov	r1, r5
 8004ef0:	f7fb fc1c 	bl	800072c <__aeabi_ddiv>
 8004ef4:	f7fb fda0 	bl	8000a38 <__aeabi_d2iz>
 8004ef8:	4680      	mov	r8, r0
 8004efa:	f7fb fa83 	bl	8000404 <__aeabi_i2d>
 8004efe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f02:	f7fb fae9 	bl	80004d8 <__aeabi_dmul>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	f7fb f92b 	bl	8000168 <__aeabi_dsub>
 8004f12:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004f16:	9d08      	ldr	r5, [sp, #32]
 8004f18:	f806 4b01 	strb.w	r4, [r6], #1
 8004f1c:	eba6 040a 	sub.w	r4, r6, sl
 8004f20:	42a5      	cmp	r5, r4
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	d133      	bne.n	8004f90 <_dtoa_r+0x6e8>
 8004f28:	f7fb f920 	bl	800016c <__adddf3>
 8004f2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f30:	4604      	mov	r4, r0
 8004f32:	460d      	mov	r5, r1
 8004f34:	f7fb fd60 	bl	80009f8 <__aeabi_dcmpgt>
 8004f38:	b9c0      	cbnz	r0, 8004f6c <_dtoa_r+0x6c4>
 8004f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f3e:	4620      	mov	r0, r4
 8004f40:	4629      	mov	r1, r5
 8004f42:	f7fb fd31 	bl	80009a8 <__aeabi_dcmpeq>
 8004f46:	b110      	cbz	r0, 8004f4e <_dtoa_r+0x6a6>
 8004f48:	f018 0f01 	tst.w	r8, #1
 8004f4c:	d10e      	bne.n	8004f6c <_dtoa_r+0x6c4>
 8004f4e:	4648      	mov	r0, r9
 8004f50:	9903      	ldr	r1, [sp, #12]
 8004f52:	f000 fbbb 	bl	80056cc <_Bfree>
 8004f56:	2300      	movs	r3, #0
 8004f58:	7033      	strb	r3, [r6, #0]
 8004f5a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004f5c:	3701      	adds	r7, #1
 8004f5e:	601f      	str	r7, [r3, #0]
 8004f60:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 824b 	beq.w	80053fe <_dtoa_r+0xb56>
 8004f68:	601e      	str	r6, [r3, #0]
 8004f6a:	e248      	b.n	80053fe <_dtoa_r+0xb56>
 8004f6c:	46b8      	mov	r8, r7
 8004f6e:	4633      	mov	r3, r6
 8004f70:	461e      	mov	r6, r3
 8004f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f76:	2a39      	cmp	r2, #57	@ 0x39
 8004f78:	d106      	bne.n	8004f88 <_dtoa_r+0x6e0>
 8004f7a:	459a      	cmp	sl, r3
 8004f7c:	d1f8      	bne.n	8004f70 <_dtoa_r+0x6c8>
 8004f7e:	2230      	movs	r2, #48	@ 0x30
 8004f80:	f108 0801 	add.w	r8, r8, #1
 8004f84:	f88a 2000 	strb.w	r2, [sl]
 8004f88:	781a      	ldrb	r2, [r3, #0]
 8004f8a:	3201      	adds	r2, #1
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e7a0      	b.n	8004ed2 <_dtoa_r+0x62a>
 8004f90:	2200      	movs	r2, #0
 8004f92:	4b6f      	ldr	r3, [pc, #444]	@ (8005150 <_dtoa_r+0x8a8>)
 8004f94:	f7fb faa0 	bl	80004d8 <__aeabi_dmul>
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	460d      	mov	r5, r1
 8004fa0:	f7fb fd02 	bl	80009a8 <__aeabi_dcmpeq>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d09f      	beq.n	8004ee8 <_dtoa_r+0x640>
 8004fa8:	e7d1      	b.n	8004f4e <_dtoa_r+0x6a6>
 8004faa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004fac:	2a00      	cmp	r2, #0
 8004fae:	f000 80ea 	beq.w	8005186 <_dtoa_r+0x8de>
 8004fb2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004fb4:	2a01      	cmp	r2, #1
 8004fb6:	f300 80cd 	bgt.w	8005154 <_dtoa_r+0x8ac>
 8004fba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004fbc:	2a00      	cmp	r2, #0
 8004fbe:	f000 80c1 	beq.w	8005144 <_dtoa_r+0x89c>
 8004fc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004fc6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004fc8:	9e04      	ldr	r6, [sp, #16]
 8004fca:	9a04      	ldr	r2, [sp, #16]
 8004fcc:	2101      	movs	r1, #1
 8004fce:	441a      	add	r2, r3
 8004fd0:	9204      	str	r2, [sp, #16]
 8004fd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fd4:	4648      	mov	r0, r9
 8004fd6:	441a      	add	r2, r3
 8004fd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fda:	f000 fc75 	bl	80058c8 <__i2b>
 8004fde:	4605      	mov	r5, r0
 8004fe0:	b166      	cbz	r6, 8004ffc <_dtoa_r+0x754>
 8004fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	dd09      	ble.n	8004ffc <_dtoa_r+0x754>
 8004fe8:	42b3      	cmp	r3, r6
 8004fea:	bfa8      	it	ge
 8004fec:	4633      	movge	r3, r6
 8004fee:	9a04      	ldr	r2, [sp, #16]
 8004ff0:	1af6      	subs	r6, r6, r3
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	9204      	str	r2, [sp, #16]
 8004ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ffe:	b30b      	cbz	r3, 8005044 <_dtoa_r+0x79c>
 8005000:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80c6 	beq.w	8005194 <_dtoa_r+0x8ec>
 8005008:	2c00      	cmp	r4, #0
 800500a:	f000 80c0 	beq.w	800518e <_dtoa_r+0x8e6>
 800500e:	4629      	mov	r1, r5
 8005010:	4622      	mov	r2, r4
 8005012:	4648      	mov	r0, r9
 8005014:	f000 fd10 	bl	8005a38 <__pow5mult>
 8005018:	9a03      	ldr	r2, [sp, #12]
 800501a:	4601      	mov	r1, r0
 800501c:	4605      	mov	r5, r0
 800501e:	4648      	mov	r0, r9
 8005020:	f000 fc68 	bl	80058f4 <__multiply>
 8005024:	9903      	ldr	r1, [sp, #12]
 8005026:	4680      	mov	r8, r0
 8005028:	4648      	mov	r0, r9
 800502a:	f000 fb4f 	bl	80056cc <_Bfree>
 800502e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005030:	1b1b      	subs	r3, r3, r4
 8005032:	930a      	str	r3, [sp, #40]	@ 0x28
 8005034:	f000 80b1 	beq.w	800519a <_dtoa_r+0x8f2>
 8005038:	4641      	mov	r1, r8
 800503a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800503c:	4648      	mov	r0, r9
 800503e:	f000 fcfb 	bl	8005a38 <__pow5mult>
 8005042:	9003      	str	r0, [sp, #12]
 8005044:	2101      	movs	r1, #1
 8005046:	4648      	mov	r0, r9
 8005048:	f000 fc3e 	bl	80058c8 <__i2b>
 800504c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800504e:	4604      	mov	r4, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 81d8 	beq.w	8005406 <_dtoa_r+0xb5e>
 8005056:	461a      	mov	r2, r3
 8005058:	4601      	mov	r1, r0
 800505a:	4648      	mov	r0, r9
 800505c:	f000 fcec 	bl	8005a38 <__pow5mult>
 8005060:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005062:	4604      	mov	r4, r0
 8005064:	2b01      	cmp	r3, #1
 8005066:	f300 809f 	bgt.w	80051a8 <_dtoa_r+0x900>
 800506a:	9b06      	ldr	r3, [sp, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f040 8097 	bne.w	80051a0 <_dtoa_r+0x8f8>
 8005072:	9b07      	ldr	r3, [sp, #28]
 8005074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005078:	2b00      	cmp	r3, #0
 800507a:	f040 8093 	bne.w	80051a4 <_dtoa_r+0x8fc>
 800507e:	9b07      	ldr	r3, [sp, #28]
 8005080:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005084:	0d1b      	lsrs	r3, r3, #20
 8005086:	051b      	lsls	r3, r3, #20
 8005088:	b133      	cbz	r3, 8005098 <_dtoa_r+0x7f0>
 800508a:	9b04      	ldr	r3, [sp, #16]
 800508c:	3301      	adds	r3, #1
 800508e:	9304      	str	r3, [sp, #16]
 8005090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005092:	3301      	adds	r3, #1
 8005094:	9309      	str	r3, [sp, #36]	@ 0x24
 8005096:	2301      	movs	r3, #1
 8005098:	930a      	str	r3, [sp, #40]	@ 0x28
 800509a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 81b8 	beq.w	8005412 <_dtoa_r+0xb6a>
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80050a8:	6918      	ldr	r0, [r3, #16]
 80050aa:	f000 fbc1 	bl	8005830 <__hi0bits>
 80050ae:	f1c0 0020 	rsb	r0, r0, #32
 80050b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050b4:	4418      	add	r0, r3
 80050b6:	f010 001f 	ands.w	r0, r0, #31
 80050ba:	f000 8082 	beq.w	80051c2 <_dtoa_r+0x91a>
 80050be:	f1c0 0320 	rsb	r3, r0, #32
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	dd73      	ble.n	80051ae <_dtoa_r+0x906>
 80050c6:	9b04      	ldr	r3, [sp, #16]
 80050c8:	f1c0 001c 	rsb	r0, r0, #28
 80050cc:	4403      	add	r3, r0
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050d2:	4406      	add	r6, r0
 80050d4:	4403      	add	r3, r0
 80050d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80050d8:	9b04      	ldr	r3, [sp, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	dd05      	ble.n	80050ea <_dtoa_r+0x842>
 80050de:	461a      	mov	r2, r3
 80050e0:	4648      	mov	r0, r9
 80050e2:	9903      	ldr	r1, [sp, #12]
 80050e4:	f000 fd02 	bl	8005aec <__lshift>
 80050e8:	9003      	str	r0, [sp, #12]
 80050ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	dd05      	ble.n	80050fc <_dtoa_r+0x854>
 80050f0:	4621      	mov	r1, r4
 80050f2:	461a      	mov	r2, r3
 80050f4:	4648      	mov	r0, r9
 80050f6:	f000 fcf9 	bl	8005aec <__lshift>
 80050fa:	4604      	mov	r4, r0
 80050fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d061      	beq.n	80051c6 <_dtoa_r+0x91e>
 8005102:	4621      	mov	r1, r4
 8005104:	9803      	ldr	r0, [sp, #12]
 8005106:	f000 fd5d 	bl	8005bc4 <__mcmp>
 800510a:	2800      	cmp	r0, #0
 800510c:	da5b      	bge.n	80051c6 <_dtoa_r+0x91e>
 800510e:	2300      	movs	r3, #0
 8005110:	220a      	movs	r2, #10
 8005112:	4648      	mov	r0, r9
 8005114:	9903      	ldr	r1, [sp, #12]
 8005116:	f000 fafb 	bl	8005710 <__multadd>
 800511a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800511c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005120:	9003      	str	r0, [sp, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8177 	beq.w	8005416 <_dtoa_r+0xb6e>
 8005128:	4629      	mov	r1, r5
 800512a:	2300      	movs	r3, #0
 800512c:	220a      	movs	r2, #10
 800512e:	4648      	mov	r0, r9
 8005130:	f000 faee 	bl	8005710 <__multadd>
 8005134:	f1bb 0f00 	cmp.w	fp, #0
 8005138:	4605      	mov	r5, r0
 800513a:	dc6f      	bgt.n	800521c <_dtoa_r+0x974>
 800513c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800513e:	2b02      	cmp	r3, #2
 8005140:	dc49      	bgt.n	80051d6 <_dtoa_r+0x92e>
 8005142:	e06b      	b.n	800521c <_dtoa_r+0x974>
 8005144:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005146:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800514a:	e73c      	b.n	8004fc6 <_dtoa_r+0x71e>
 800514c:	3fe00000 	.word	0x3fe00000
 8005150:	40240000 	.word	0x40240000
 8005154:	9b08      	ldr	r3, [sp, #32]
 8005156:	1e5c      	subs	r4, r3, #1
 8005158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800515a:	42a3      	cmp	r3, r4
 800515c:	db09      	blt.n	8005172 <_dtoa_r+0x8ca>
 800515e:	1b1c      	subs	r4, r3, r4
 8005160:	9b08      	ldr	r3, [sp, #32]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f6bf af30 	bge.w	8004fc8 <_dtoa_r+0x720>
 8005168:	9b04      	ldr	r3, [sp, #16]
 800516a:	9a08      	ldr	r2, [sp, #32]
 800516c:	1a9e      	subs	r6, r3, r2
 800516e:	2300      	movs	r3, #0
 8005170:	e72b      	b.n	8004fca <_dtoa_r+0x722>
 8005172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005174:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005176:	1ae3      	subs	r3, r4, r3
 8005178:	441a      	add	r2, r3
 800517a:	940a      	str	r4, [sp, #40]	@ 0x28
 800517c:	9e04      	ldr	r6, [sp, #16]
 800517e:	2400      	movs	r4, #0
 8005180:	9b08      	ldr	r3, [sp, #32]
 8005182:	920e      	str	r2, [sp, #56]	@ 0x38
 8005184:	e721      	b.n	8004fca <_dtoa_r+0x722>
 8005186:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005188:	9e04      	ldr	r6, [sp, #16]
 800518a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800518c:	e728      	b.n	8004fe0 <_dtoa_r+0x738>
 800518e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005192:	e751      	b.n	8005038 <_dtoa_r+0x790>
 8005194:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005196:	9903      	ldr	r1, [sp, #12]
 8005198:	e750      	b.n	800503c <_dtoa_r+0x794>
 800519a:	f8cd 800c 	str.w	r8, [sp, #12]
 800519e:	e751      	b.n	8005044 <_dtoa_r+0x79c>
 80051a0:	2300      	movs	r3, #0
 80051a2:	e779      	b.n	8005098 <_dtoa_r+0x7f0>
 80051a4:	9b06      	ldr	r3, [sp, #24]
 80051a6:	e777      	b.n	8005098 <_dtoa_r+0x7f0>
 80051a8:	2300      	movs	r3, #0
 80051aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80051ac:	e779      	b.n	80050a2 <_dtoa_r+0x7fa>
 80051ae:	d093      	beq.n	80050d8 <_dtoa_r+0x830>
 80051b0:	9a04      	ldr	r2, [sp, #16]
 80051b2:	331c      	adds	r3, #28
 80051b4:	441a      	add	r2, r3
 80051b6:	9204      	str	r2, [sp, #16]
 80051b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051ba:	441e      	add	r6, r3
 80051bc:	441a      	add	r2, r3
 80051be:	9209      	str	r2, [sp, #36]	@ 0x24
 80051c0:	e78a      	b.n	80050d8 <_dtoa_r+0x830>
 80051c2:	4603      	mov	r3, r0
 80051c4:	e7f4      	b.n	80051b0 <_dtoa_r+0x908>
 80051c6:	9b08      	ldr	r3, [sp, #32]
 80051c8:	46b8      	mov	r8, r7
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	dc20      	bgt.n	8005210 <_dtoa_r+0x968>
 80051ce:	469b      	mov	fp, r3
 80051d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	dd1e      	ble.n	8005214 <_dtoa_r+0x96c>
 80051d6:	f1bb 0f00 	cmp.w	fp, #0
 80051da:	f47f adb1 	bne.w	8004d40 <_dtoa_r+0x498>
 80051de:	4621      	mov	r1, r4
 80051e0:	465b      	mov	r3, fp
 80051e2:	2205      	movs	r2, #5
 80051e4:	4648      	mov	r0, r9
 80051e6:	f000 fa93 	bl	8005710 <__multadd>
 80051ea:	4601      	mov	r1, r0
 80051ec:	4604      	mov	r4, r0
 80051ee:	9803      	ldr	r0, [sp, #12]
 80051f0:	f000 fce8 	bl	8005bc4 <__mcmp>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	f77f ada3 	ble.w	8004d40 <_dtoa_r+0x498>
 80051fa:	4656      	mov	r6, sl
 80051fc:	2331      	movs	r3, #49	@ 0x31
 80051fe:	f108 0801 	add.w	r8, r8, #1
 8005202:	f806 3b01 	strb.w	r3, [r6], #1
 8005206:	e59f      	b.n	8004d48 <_dtoa_r+0x4a0>
 8005208:	46b8      	mov	r8, r7
 800520a:	9c08      	ldr	r4, [sp, #32]
 800520c:	4625      	mov	r5, r4
 800520e:	e7f4      	b.n	80051fa <_dtoa_r+0x952>
 8005210:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005214:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8101 	beq.w	800541e <_dtoa_r+0xb76>
 800521c:	2e00      	cmp	r6, #0
 800521e:	dd05      	ble.n	800522c <_dtoa_r+0x984>
 8005220:	4629      	mov	r1, r5
 8005222:	4632      	mov	r2, r6
 8005224:	4648      	mov	r0, r9
 8005226:	f000 fc61 	bl	8005aec <__lshift>
 800522a:	4605      	mov	r5, r0
 800522c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d05c      	beq.n	80052ec <_dtoa_r+0xa44>
 8005232:	4648      	mov	r0, r9
 8005234:	6869      	ldr	r1, [r5, #4]
 8005236:	f000 fa09 	bl	800564c <_Balloc>
 800523a:	4606      	mov	r6, r0
 800523c:	b928      	cbnz	r0, 800524a <_dtoa_r+0x9a2>
 800523e:	4602      	mov	r2, r0
 8005240:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005244:	4b80      	ldr	r3, [pc, #512]	@ (8005448 <_dtoa_r+0xba0>)
 8005246:	f7ff bb43 	b.w	80048d0 <_dtoa_r+0x28>
 800524a:	692a      	ldr	r2, [r5, #16]
 800524c:	f105 010c 	add.w	r1, r5, #12
 8005250:	3202      	adds	r2, #2
 8005252:	0092      	lsls	r2, r2, #2
 8005254:	300c      	adds	r0, #12
 8005256:	f7ff fa8a 	bl	800476e <memcpy>
 800525a:	2201      	movs	r2, #1
 800525c:	4631      	mov	r1, r6
 800525e:	4648      	mov	r0, r9
 8005260:	f000 fc44 	bl	8005aec <__lshift>
 8005264:	462f      	mov	r7, r5
 8005266:	4605      	mov	r5, r0
 8005268:	f10a 0301 	add.w	r3, sl, #1
 800526c:	9304      	str	r3, [sp, #16]
 800526e:	eb0a 030b 	add.w	r3, sl, fp
 8005272:	930a      	str	r3, [sp, #40]	@ 0x28
 8005274:	9b06      	ldr	r3, [sp, #24]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	9309      	str	r3, [sp, #36]	@ 0x24
 800527c:	9b04      	ldr	r3, [sp, #16]
 800527e:	4621      	mov	r1, r4
 8005280:	9803      	ldr	r0, [sp, #12]
 8005282:	f103 3bff 	add.w	fp, r3, #4294967295
 8005286:	f7ff fa85 	bl	8004794 <quorem>
 800528a:	4603      	mov	r3, r0
 800528c:	4639      	mov	r1, r7
 800528e:	3330      	adds	r3, #48	@ 0x30
 8005290:	9006      	str	r0, [sp, #24]
 8005292:	9803      	ldr	r0, [sp, #12]
 8005294:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005296:	f000 fc95 	bl	8005bc4 <__mcmp>
 800529a:	462a      	mov	r2, r5
 800529c:	9008      	str	r0, [sp, #32]
 800529e:	4621      	mov	r1, r4
 80052a0:	4648      	mov	r0, r9
 80052a2:	f000 fcab 	bl	8005bfc <__mdiff>
 80052a6:	68c2      	ldr	r2, [r0, #12]
 80052a8:	4606      	mov	r6, r0
 80052aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052ac:	bb02      	cbnz	r2, 80052f0 <_dtoa_r+0xa48>
 80052ae:	4601      	mov	r1, r0
 80052b0:	9803      	ldr	r0, [sp, #12]
 80052b2:	f000 fc87 	bl	8005bc4 <__mcmp>
 80052b6:	4602      	mov	r2, r0
 80052b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052ba:	4631      	mov	r1, r6
 80052bc:	4648      	mov	r0, r9
 80052be:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80052c2:	f000 fa03 	bl	80056cc <_Bfree>
 80052c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80052ca:	9e04      	ldr	r6, [sp, #16]
 80052cc:	ea42 0103 	orr.w	r1, r2, r3
 80052d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d2:	4319      	orrs	r1, r3
 80052d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052d6:	d10d      	bne.n	80052f4 <_dtoa_r+0xa4c>
 80052d8:	2b39      	cmp	r3, #57	@ 0x39
 80052da:	d027      	beq.n	800532c <_dtoa_r+0xa84>
 80052dc:	9a08      	ldr	r2, [sp, #32]
 80052de:	2a00      	cmp	r2, #0
 80052e0:	dd01      	ble.n	80052e6 <_dtoa_r+0xa3e>
 80052e2:	9b06      	ldr	r3, [sp, #24]
 80052e4:	3331      	adds	r3, #49	@ 0x31
 80052e6:	f88b 3000 	strb.w	r3, [fp]
 80052ea:	e52e      	b.n	8004d4a <_dtoa_r+0x4a2>
 80052ec:	4628      	mov	r0, r5
 80052ee:	e7b9      	b.n	8005264 <_dtoa_r+0x9bc>
 80052f0:	2201      	movs	r2, #1
 80052f2:	e7e2      	b.n	80052ba <_dtoa_r+0xa12>
 80052f4:	9908      	ldr	r1, [sp, #32]
 80052f6:	2900      	cmp	r1, #0
 80052f8:	db04      	blt.n	8005304 <_dtoa_r+0xa5c>
 80052fa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80052fc:	4301      	orrs	r1, r0
 80052fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005300:	4301      	orrs	r1, r0
 8005302:	d120      	bne.n	8005346 <_dtoa_r+0xa9e>
 8005304:	2a00      	cmp	r2, #0
 8005306:	ddee      	ble.n	80052e6 <_dtoa_r+0xa3e>
 8005308:	2201      	movs	r2, #1
 800530a:	9903      	ldr	r1, [sp, #12]
 800530c:	4648      	mov	r0, r9
 800530e:	9304      	str	r3, [sp, #16]
 8005310:	f000 fbec 	bl	8005aec <__lshift>
 8005314:	4621      	mov	r1, r4
 8005316:	9003      	str	r0, [sp, #12]
 8005318:	f000 fc54 	bl	8005bc4 <__mcmp>
 800531c:	2800      	cmp	r0, #0
 800531e:	9b04      	ldr	r3, [sp, #16]
 8005320:	dc02      	bgt.n	8005328 <_dtoa_r+0xa80>
 8005322:	d1e0      	bne.n	80052e6 <_dtoa_r+0xa3e>
 8005324:	07da      	lsls	r2, r3, #31
 8005326:	d5de      	bpl.n	80052e6 <_dtoa_r+0xa3e>
 8005328:	2b39      	cmp	r3, #57	@ 0x39
 800532a:	d1da      	bne.n	80052e2 <_dtoa_r+0xa3a>
 800532c:	2339      	movs	r3, #57	@ 0x39
 800532e:	f88b 3000 	strb.w	r3, [fp]
 8005332:	4633      	mov	r3, r6
 8005334:	461e      	mov	r6, r3
 8005336:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800533a:	3b01      	subs	r3, #1
 800533c:	2a39      	cmp	r2, #57	@ 0x39
 800533e:	d04e      	beq.n	80053de <_dtoa_r+0xb36>
 8005340:	3201      	adds	r2, #1
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	e501      	b.n	8004d4a <_dtoa_r+0x4a2>
 8005346:	2a00      	cmp	r2, #0
 8005348:	dd03      	ble.n	8005352 <_dtoa_r+0xaaa>
 800534a:	2b39      	cmp	r3, #57	@ 0x39
 800534c:	d0ee      	beq.n	800532c <_dtoa_r+0xa84>
 800534e:	3301      	adds	r3, #1
 8005350:	e7c9      	b.n	80052e6 <_dtoa_r+0xa3e>
 8005352:	9a04      	ldr	r2, [sp, #16]
 8005354:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005356:	f802 3c01 	strb.w	r3, [r2, #-1]
 800535a:	428a      	cmp	r2, r1
 800535c:	d028      	beq.n	80053b0 <_dtoa_r+0xb08>
 800535e:	2300      	movs	r3, #0
 8005360:	220a      	movs	r2, #10
 8005362:	9903      	ldr	r1, [sp, #12]
 8005364:	4648      	mov	r0, r9
 8005366:	f000 f9d3 	bl	8005710 <__multadd>
 800536a:	42af      	cmp	r7, r5
 800536c:	9003      	str	r0, [sp, #12]
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	f04f 020a 	mov.w	r2, #10
 8005376:	4639      	mov	r1, r7
 8005378:	4648      	mov	r0, r9
 800537a:	d107      	bne.n	800538c <_dtoa_r+0xae4>
 800537c:	f000 f9c8 	bl	8005710 <__multadd>
 8005380:	4607      	mov	r7, r0
 8005382:	4605      	mov	r5, r0
 8005384:	9b04      	ldr	r3, [sp, #16]
 8005386:	3301      	adds	r3, #1
 8005388:	9304      	str	r3, [sp, #16]
 800538a:	e777      	b.n	800527c <_dtoa_r+0x9d4>
 800538c:	f000 f9c0 	bl	8005710 <__multadd>
 8005390:	4629      	mov	r1, r5
 8005392:	4607      	mov	r7, r0
 8005394:	2300      	movs	r3, #0
 8005396:	220a      	movs	r2, #10
 8005398:	4648      	mov	r0, r9
 800539a:	f000 f9b9 	bl	8005710 <__multadd>
 800539e:	4605      	mov	r5, r0
 80053a0:	e7f0      	b.n	8005384 <_dtoa_r+0xadc>
 80053a2:	f1bb 0f00 	cmp.w	fp, #0
 80053a6:	bfcc      	ite	gt
 80053a8:	465e      	movgt	r6, fp
 80053aa:	2601      	movle	r6, #1
 80053ac:	2700      	movs	r7, #0
 80053ae:	4456      	add	r6, sl
 80053b0:	2201      	movs	r2, #1
 80053b2:	9903      	ldr	r1, [sp, #12]
 80053b4:	4648      	mov	r0, r9
 80053b6:	9304      	str	r3, [sp, #16]
 80053b8:	f000 fb98 	bl	8005aec <__lshift>
 80053bc:	4621      	mov	r1, r4
 80053be:	9003      	str	r0, [sp, #12]
 80053c0:	f000 fc00 	bl	8005bc4 <__mcmp>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	dcb4      	bgt.n	8005332 <_dtoa_r+0xa8a>
 80053c8:	d102      	bne.n	80053d0 <_dtoa_r+0xb28>
 80053ca:	9b04      	ldr	r3, [sp, #16]
 80053cc:	07db      	lsls	r3, r3, #31
 80053ce:	d4b0      	bmi.n	8005332 <_dtoa_r+0xa8a>
 80053d0:	4633      	mov	r3, r6
 80053d2:	461e      	mov	r6, r3
 80053d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053d8:	2a30      	cmp	r2, #48	@ 0x30
 80053da:	d0fa      	beq.n	80053d2 <_dtoa_r+0xb2a>
 80053dc:	e4b5      	b.n	8004d4a <_dtoa_r+0x4a2>
 80053de:	459a      	cmp	sl, r3
 80053e0:	d1a8      	bne.n	8005334 <_dtoa_r+0xa8c>
 80053e2:	2331      	movs	r3, #49	@ 0x31
 80053e4:	f108 0801 	add.w	r8, r8, #1
 80053e8:	f88a 3000 	strb.w	r3, [sl]
 80053ec:	e4ad      	b.n	8004d4a <_dtoa_r+0x4a2>
 80053ee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80053f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800544c <_dtoa_r+0xba4>
 80053f4:	b11b      	cbz	r3, 80053fe <_dtoa_r+0xb56>
 80053f6:	f10a 0308 	add.w	r3, sl, #8
 80053fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4650      	mov	r0, sl
 8005400:	b017      	add	sp, #92	@ 0x5c
 8005402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005406:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005408:	2b01      	cmp	r3, #1
 800540a:	f77f ae2e 	ble.w	800506a <_dtoa_r+0x7c2>
 800540e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005410:	930a      	str	r3, [sp, #40]	@ 0x28
 8005412:	2001      	movs	r0, #1
 8005414:	e64d      	b.n	80050b2 <_dtoa_r+0x80a>
 8005416:	f1bb 0f00 	cmp.w	fp, #0
 800541a:	f77f aed9 	ble.w	80051d0 <_dtoa_r+0x928>
 800541e:	4656      	mov	r6, sl
 8005420:	4621      	mov	r1, r4
 8005422:	9803      	ldr	r0, [sp, #12]
 8005424:	f7ff f9b6 	bl	8004794 <quorem>
 8005428:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800542c:	f806 3b01 	strb.w	r3, [r6], #1
 8005430:	eba6 020a 	sub.w	r2, r6, sl
 8005434:	4593      	cmp	fp, r2
 8005436:	ddb4      	ble.n	80053a2 <_dtoa_r+0xafa>
 8005438:	2300      	movs	r3, #0
 800543a:	220a      	movs	r2, #10
 800543c:	4648      	mov	r0, r9
 800543e:	9903      	ldr	r1, [sp, #12]
 8005440:	f000 f966 	bl	8005710 <__multadd>
 8005444:	9003      	str	r0, [sp, #12]
 8005446:	e7eb      	b.n	8005420 <_dtoa_r+0xb78>
 8005448:	08007ee7 	.word	0x08007ee7
 800544c:	08007e6b 	.word	0x08007e6b

08005450 <_free_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4605      	mov	r5, r0
 8005454:	2900      	cmp	r1, #0
 8005456:	d040      	beq.n	80054da <_free_r+0x8a>
 8005458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800545c:	1f0c      	subs	r4, r1, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	bfb8      	it	lt
 8005462:	18e4      	addlt	r4, r4, r3
 8005464:	f000 f8e6 	bl	8005634 <__malloc_lock>
 8005468:	4a1c      	ldr	r2, [pc, #112]	@ (80054dc <_free_r+0x8c>)
 800546a:	6813      	ldr	r3, [r2, #0]
 800546c:	b933      	cbnz	r3, 800547c <_free_r+0x2c>
 800546e:	6063      	str	r3, [r4, #4]
 8005470:	6014      	str	r4, [r2, #0]
 8005472:	4628      	mov	r0, r5
 8005474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005478:	f000 b8e2 	b.w	8005640 <__malloc_unlock>
 800547c:	42a3      	cmp	r3, r4
 800547e:	d908      	bls.n	8005492 <_free_r+0x42>
 8005480:	6820      	ldr	r0, [r4, #0]
 8005482:	1821      	adds	r1, r4, r0
 8005484:	428b      	cmp	r3, r1
 8005486:	bf01      	itttt	eq
 8005488:	6819      	ldreq	r1, [r3, #0]
 800548a:	685b      	ldreq	r3, [r3, #4]
 800548c:	1809      	addeq	r1, r1, r0
 800548e:	6021      	streq	r1, [r4, #0]
 8005490:	e7ed      	b.n	800546e <_free_r+0x1e>
 8005492:	461a      	mov	r2, r3
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b10b      	cbz	r3, 800549c <_free_r+0x4c>
 8005498:	42a3      	cmp	r3, r4
 800549a:	d9fa      	bls.n	8005492 <_free_r+0x42>
 800549c:	6811      	ldr	r1, [r2, #0]
 800549e:	1850      	adds	r0, r2, r1
 80054a0:	42a0      	cmp	r0, r4
 80054a2:	d10b      	bne.n	80054bc <_free_r+0x6c>
 80054a4:	6820      	ldr	r0, [r4, #0]
 80054a6:	4401      	add	r1, r0
 80054a8:	1850      	adds	r0, r2, r1
 80054aa:	4283      	cmp	r3, r0
 80054ac:	6011      	str	r1, [r2, #0]
 80054ae:	d1e0      	bne.n	8005472 <_free_r+0x22>
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4408      	add	r0, r1
 80054b6:	6010      	str	r0, [r2, #0]
 80054b8:	6053      	str	r3, [r2, #4]
 80054ba:	e7da      	b.n	8005472 <_free_r+0x22>
 80054bc:	d902      	bls.n	80054c4 <_free_r+0x74>
 80054be:	230c      	movs	r3, #12
 80054c0:	602b      	str	r3, [r5, #0]
 80054c2:	e7d6      	b.n	8005472 <_free_r+0x22>
 80054c4:	6820      	ldr	r0, [r4, #0]
 80054c6:	1821      	adds	r1, r4, r0
 80054c8:	428b      	cmp	r3, r1
 80054ca:	bf01      	itttt	eq
 80054cc:	6819      	ldreq	r1, [r3, #0]
 80054ce:	685b      	ldreq	r3, [r3, #4]
 80054d0:	1809      	addeq	r1, r1, r0
 80054d2:	6021      	streq	r1, [r4, #0]
 80054d4:	6063      	str	r3, [r4, #4]
 80054d6:	6054      	str	r4, [r2, #4]
 80054d8:	e7cb      	b.n	8005472 <_free_r+0x22>
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	20000428 	.word	0x20000428

080054e0 <malloc>:
 80054e0:	4b02      	ldr	r3, [pc, #8]	@ (80054ec <malloc+0xc>)
 80054e2:	4601      	mov	r1, r0
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	f000 b825 	b.w	8005534 <_malloc_r>
 80054ea:	bf00      	nop
 80054ec:	2000001c 	.word	0x2000001c

080054f0 <sbrk_aligned>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	4e0f      	ldr	r6, [pc, #60]	@ (8005530 <sbrk_aligned+0x40>)
 80054f4:	460c      	mov	r4, r1
 80054f6:	6831      	ldr	r1, [r6, #0]
 80054f8:	4605      	mov	r5, r0
 80054fa:	b911      	cbnz	r1, 8005502 <sbrk_aligned+0x12>
 80054fc:	f001 fdee 	bl	80070dc <_sbrk_r>
 8005500:	6030      	str	r0, [r6, #0]
 8005502:	4621      	mov	r1, r4
 8005504:	4628      	mov	r0, r5
 8005506:	f001 fde9 	bl	80070dc <_sbrk_r>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	d103      	bne.n	8005516 <sbrk_aligned+0x26>
 800550e:	f04f 34ff 	mov.w	r4, #4294967295
 8005512:	4620      	mov	r0, r4
 8005514:	bd70      	pop	{r4, r5, r6, pc}
 8005516:	1cc4      	adds	r4, r0, #3
 8005518:	f024 0403 	bic.w	r4, r4, #3
 800551c:	42a0      	cmp	r0, r4
 800551e:	d0f8      	beq.n	8005512 <sbrk_aligned+0x22>
 8005520:	1a21      	subs	r1, r4, r0
 8005522:	4628      	mov	r0, r5
 8005524:	f001 fdda 	bl	80070dc <_sbrk_r>
 8005528:	3001      	adds	r0, #1
 800552a:	d1f2      	bne.n	8005512 <sbrk_aligned+0x22>
 800552c:	e7ef      	b.n	800550e <sbrk_aligned+0x1e>
 800552e:	bf00      	nop
 8005530:	20000424 	.word	0x20000424

08005534 <_malloc_r>:
 8005534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005538:	1ccd      	adds	r5, r1, #3
 800553a:	f025 0503 	bic.w	r5, r5, #3
 800553e:	3508      	adds	r5, #8
 8005540:	2d0c      	cmp	r5, #12
 8005542:	bf38      	it	cc
 8005544:	250c      	movcc	r5, #12
 8005546:	2d00      	cmp	r5, #0
 8005548:	4606      	mov	r6, r0
 800554a:	db01      	blt.n	8005550 <_malloc_r+0x1c>
 800554c:	42a9      	cmp	r1, r5
 800554e:	d904      	bls.n	800555a <_malloc_r+0x26>
 8005550:	230c      	movs	r3, #12
 8005552:	6033      	str	r3, [r6, #0]
 8005554:	2000      	movs	r0, #0
 8005556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800555a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005630 <_malloc_r+0xfc>
 800555e:	f000 f869 	bl	8005634 <__malloc_lock>
 8005562:	f8d8 3000 	ldr.w	r3, [r8]
 8005566:	461c      	mov	r4, r3
 8005568:	bb44      	cbnz	r4, 80055bc <_malloc_r+0x88>
 800556a:	4629      	mov	r1, r5
 800556c:	4630      	mov	r0, r6
 800556e:	f7ff ffbf 	bl	80054f0 <sbrk_aligned>
 8005572:	1c43      	adds	r3, r0, #1
 8005574:	4604      	mov	r4, r0
 8005576:	d158      	bne.n	800562a <_malloc_r+0xf6>
 8005578:	f8d8 4000 	ldr.w	r4, [r8]
 800557c:	4627      	mov	r7, r4
 800557e:	2f00      	cmp	r7, #0
 8005580:	d143      	bne.n	800560a <_malloc_r+0xd6>
 8005582:	2c00      	cmp	r4, #0
 8005584:	d04b      	beq.n	800561e <_malloc_r+0xea>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	4639      	mov	r1, r7
 800558a:	4630      	mov	r0, r6
 800558c:	eb04 0903 	add.w	r9, r4, r3
 8005590:	f001 fda4 	bl	80070dc <_sbrk_r>
 8005594:	4581      	cmp	r9, r0
 8005596:	d142      	bne.n	800561e <_malloc_r+0xea>
 8005598:	6821      	ldr	r1, [r4, #0]
 800559a:	4630      	mov	r0, r6
 800559c:	1a6d      	subs	r5, r5, r1
 800559e:	4629      	mov	r1, r5
 80055a0:	f7ff ffa6 	bl	80054f0 <sbrk_aligned>
 80055a4:	3001      	adds	r0, #1
 80055a6:	d03a      	beq.n	800561e <_malloc_r+0xea>
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	442b      	add	r3, r5
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	f8d8 3000 	ldr.w	r3, [r8]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	bb62      	cbnz	r2, 8005610 <_malloc_r+0xdc>
 80055b6:	f8c8 7000 	str.w	r7, [r8]
 80055ba:	e00f      	b.n	80055dc <_malloc_r+0xa8>
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	1b52      	subs	r2, r2, r5
 80055c0:	d420      	bmi.n	8005604 <_malloc_r+0xd0>
 80055c2:	2a0b      	cmp	r2, #11
 80055c4:	d917      	bls.n	80055f6 <_malloc_r+0xc2>
 80055c6:	1961      	adds	r1, r4, r5
 80055c8:	42a3      	cmp	r3, r4
 80055ca:	6025      	str	r5, [r4, #0]
 80055cc:	bf18      	it	ne
 80055ce:	6059      	strne	r1, [r3, #4]
 80055d0:	6863      	ldr	r3, [r4, #4]
 80055d2:	bf08      	it	eq
 80055d4:	f8c8 1000 	streq.w	r1, [r8]
 80055d8:	5162      	str	r2, [r4, r5]
 80055da:	604b      	str	r3, [r1, #4]
 80055dc:	4630      	mov	r0, r6
 80055de:	f000 f82f 	bl	8005640 <__malloc_unlock>
 80055e2:	f104 000b 	add.w	r0, r4, #11
 80055e6:	1d23      	adds	r3, r4, #4
 80055e8:	f020 0007 	bic.w	r0, r0, #7
 80055ec:	1ac2      	subs	r2, r0, r3
 80055ee:	bf1c      	itt	ne
 80055f0:	1a1b      	subne	r3, r3, r0
 80055f2:	50a3      	strne	r3, [r4, r2]
 80055f4:	e7af      	b.n	8005556 <_malloc_r+0x22>
 80055f6:	6862      	ldr	r2, [r4, #4]
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	bf0c      	ite	eq
 80055fc:	f8c8 2000 	streq.w	r2, [r8]
 8005600:	605a      	strne	r2, [r3, #4]
 8005602:	e7eb      	b.n	80055dc <_malloc_r+0xa8>
 8005604:	4623      	mov	r3, r4
 8005606:	6864      	ldr	r4, [r4, #4]
 8005608:	e7ae      	b.n	8005568 <_malloc_r+0x34>
 800560a:	463c      	mov	r4, r7
 800560c:	687f      	ldr	r7, [r7, #4]
 800560e:	e7b6      	b.n	800557e <_malloc_r+0x4a>
 8005610:	461a      	mov	r2, r3
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	42a3      	cmp	r3, r4
 8005616:	d1fb      	bne.n	8005610 <_malloc_r+0xdc>
 8005618:	2300      	movs	r3, #0
 800561a:	6053      	str	r3, [r2, #4]
 800561c:	e7de      	b.n	80055dc <_malloc_r+0xa8>
 800561e:	230c      	movs	r3, #12
 8005620:	4630      	mov	r0, r6
 8005622:	6033      	str	r3, [r6, #0]
 8005624:	f000 f80c 	bl	8005640 <__malloc_unlock>
 8005628:	e794      	b.n	8005554 <_malloc_r+0x20>
 800562a:	6005      	str	r5, [r0, #0]
 800562c:	e7d6      	b.n	80055dc <_malloc_r+0xa8>
 800562e:	bf00      	nop
 8005630:	20000428 	.word	0x20000428

08005634 <__malloc_lock>:
 8005634:	4801      	ldr	r0, [pc, #4]	@ (800563c <__malloc_lock+0x8>)
 8005636:	f7ff b88a 	b.w	800474e <__retarget_lock_acquire_recursive>
 800563a:	bf00      	nop
 800563c:	20000420 	.word	0x20000420

08005640 <__malloc_unlock>:
 8005640:	4801      	ldr	r0, [pc, #4]	@ (8005648 <__malloc_unlock+0x8>)
 8005642:	f7ff b885 	b.w	8004750 <__retarget_lock_release_recursive>
 8005646:	bf00      	nop
 8005648:	20000420 	.word	0x20000420

0800564c <_Balloc>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	69c6      	ldr	r6, [r0, #28]
 8005650:	4604      	mov	r4, r0
 8005652:	460d      	mov	r5, r1
 8005654:	b976      	cbnz	r6, 8005674 <_Balloc+0x28>
 8005656:	2010      	movs	r0, #16
 8005658:	f7ff ff42 	bl	80054e0 <malloc>
 800565c:	4602      	mov	r2, r0
 800565e:	61e0      	str	r0, [r4, #28]
 8005660:	b920      	cbnz	r0, 800566c <_Balloc+0x20>
 8005662:	216b      	movs	r1, #107	@ 0x6b
 8005664:	4b17      	ldr	r3, [pc, #92]	@ (80056c4 <_Balloc+0x78>)
 8005666:	4818      	ldr	r0, [pc, #96]	@ (80056c8 <_Balloc+0x7c>)
 8005668:	f001 fd4e 	bl	8007108 <__assert_func>
 800566c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005670:	6006      	str	r6, [r0, #0]
 8005672:	60c6      	str	r6, [r0, #12]
 8005674:	69e6      	ldr	r6, [r4, #28]
 8005676:	68f3      	ldr	r3, [r6, #12]
 8005678:	b183      	cbz	r3, 800569c <_Balloc+0x50>
 800567a:	69e3      	ldr	r3, [r4, #28]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005682:	b9b8      	cbnz	r0, 80056b4 <_Balloc+0x68>
 8005684:	2101      	movs	r1, #1
 8005686:	fa01 f605 	lsl.w	r6, r1, r5
 800568a:	1d72      	adds	r2, r6, #5
 800568c:	4620      	mov	r0, r4
 800568e:	0092      	lsls	r2, r2, #2
 8005690:	f001 fd58 	bl	8007144 <_calloc_r>
 8005694:	b160      	cbz	r0, 80056b0 <_Balloc+0x64>
 8005696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800569a:	e00e      	b.n	80056ba <_Balloc+0x6e>
 800569c:	2221      	movs	r2, #33	@ 0x21
 800569e:	2104      	movs	r1, #4
 80056a0:	4620      	mov	r0, r4
 80056a2:	f001 fd4f 	bl	8007144 <_calloc_r>
 80056a6:	69e3      	ldr	r3, [r4, #28]
 80056a8:	60f0      	str	r0, [r6, #12]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e4      	bne.n	800567a <_Balloc+0x2e>
 80056b0:	2000      	movs	r0, #0
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	6802      	ldr	r2, [r0, #0]
 80056b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80056ba:	2300      	movs	r3, #0
 80056bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056c0:	e7f7      	b.n	80056b2 <_Balloc+0x66>
 80056c2:	bf00      	nop
 80056c4:	08007e78 	.word	0x08007e78
 80056c8:	08007ef8 	.word	0x08007ef8

080056cc <_Bfree>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	69c6      	ldr	r6, [r0, #28]
 80056d0:	4605      	mov	r5, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	b976      	cbnz	r6, 80056f4 <_Bfree+0x28>
 80056d6:	2010      	movs	r0, #16
 80056d8:	f7ff ff02 	bl	80054e0 <malloc>
 80056dc:	4602      	mov	r2, r0
 80056de:	61e8      	str	r0, [r5, #28]
 80056e0:	b920      	cbnz	r0, 80056ec <_Bfree+0x20>
 80056e2:	218f      	movs	r1, #143	@ 0x8f
 80056e4:	4b08      	ldr	r3, [pc, #32]	@ (8005708 <_Bfree+0x3c>)
 80056e6:	4809      	ldr	r0, [pc, #36]	@ (800570c <_Bfree+0x40>)
 80056e8:	f001 fd0e 	bl	8007108 <__assert_func>
 80056ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056f0:	6006      	str	r6, [r0, #0]
 80056f2:	60c6      	str	r6, [r0, #12]
 80056f4:	b13c      	cbz	r4, 8005706 <_Bfree+0x3a>
 80056f6:	69eb      	ldr	r3, [r5, #28]
 80056f8:	6862      	ldr	r2, [r4, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005700:	6021      	str	r1, [r4, #0]
 8005702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	08007e78 	.word	0x08007e78
 800570c:	08007ef8 	.word	0x08007ef8

08005710 <__multadd>:
 8005710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005714:	4607      	mov	r7, r0
 8005716:	460c      	mov	r4, r1
 8005718:	461e      	mov	r6, r3
 800571a:	2000      	movs	r0, #0
 800571c:	690d      	ldr	r5, [r1, #16]
 800571e:	f101 0c14 	add.w	ip, r1, #20
 8005722:	f8dc 3000 	ldr.w	r3, [ip]
 8005726:	3001      	adds	r0, #1
 8005728:	b299      	uxth	r1, r3
 800572a:	fb02 6101 	mla	r1, r2, r1, r6
 800572e:	0c1e      	lsrs	r6, r3, #16
 8005730:	0c0b      	lsrs	r3, r1, #16
 8005732:	fb02 3306 	mla	r3, r2, r6, r3
 8005736:	b289      	uxth	r1, r1
 8005738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800573c:	4285      	cmp	r5, r0
 800573e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005742:	f84c 1b04 	str.w	r1, [ip], #4
 8005746:	dcec      	bgt.n	8005722 <__multadd+0x12>
 8005748:	b30e      	cbz	r6, 800578e <__multadd+0x7e>
 800574a:	68a3      	ldr	r3, [r4, #8]
 800574c:	42ab      	cmp	r3, r5
 800574e:	dc19      	bgt.n	8005784 <__multadd+0x74>
 8005750:	6861      	ldr	r1, [r4, #4]
 8005752:	4638      	mov	r0, r7
 8005754:	3101      	adds	r1, #1
 8005756:	f7ff ff79 	bl	800564c <_Balloc>
 800575a:	4680      	mov	r8, r0
 800575c:	b928      	cbnz	r0, 800576a <__multadd+0x5a>
 800575e:	4602      	mov	r2, r0
 8005760:	21ba      	movs	r1, #186	@ 0xba
 8005762:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <__multadd+0x84>)
 8005764:	480c      	ldr	r0, [pc, #48]	@ (8005798 <__multadd+0x88>)
 8005766:	f001 fccf 	bl	8007108 <__assert_func>
 800576a:	6922      	ldr	r2, [r4, #16]
 800576c:	f104 010c 	add.w	r1, r4, #12
 8005770:	3202      	adds	r2, #2
 8005772:	0092      	lsls	r2, r2, #2
 8005774:	300c      	adds	r0, #12
 8005776:	f7fe fffa 	bl	800476e <memcpy>
 800577a:	4621      	mov	r1, r4
 800577c:	4638      	mov	r0, r7
 800577e:	f7ff ffa5 	bl	80056cc <_Bfree>
 8005782:	4644      	mov	r4, r8
 8005784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005788:	3501      	adds	r5, #1
 800578a:	615e      	str	r6, [r3, #20]
 800578c:	6125      	str	r5, [r4, #16]
 800578e:	4620      	mov	r0, r4
 8005790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005794:	08007ee7 	.word	0x08007ee7
 8005798:	08007ef8 	.word	0x08007ef8

0800579c <__s2b>:
 800579c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a0:	4615      	mov	r5, r2
 80057a2:	2209      	movs	r2, #9
 80057a4:	461f      	mov	r7, r3
 80057a6:	3308      	adds	r3, #8
 80057a8:	460c      	mov	r4, r1
 80057aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80057ae:	4606      	mov	r6, r0
 80057b0:	2201      	movs	r2, #1
 80057b2:	2100      	movs	r1, #0
 80057b4:	429a      	cmp	r2, r3
 80057b6:	db09      	blt.n	80057cc <__s2b+0x30>
 80057b8:	4630      	mov	r0, r6
 80057ba:	f7ff ff47 	bl	800564c <_Balloc>
 80057be:	b940      	cbnz	r0, 80057d2 <__s2b+0x36>
 80057c0:	4602      	mov	r2, r0
 80057c2:	21d3      	movs	r1, #211	@ 0xd3
 80057c4:	4b18      	ldr	r3, [pc, #96]	@ (8005828 <__s2b+0x8c>)
 80057c6:	4819      	ldr	r0, [pc, #100]	@ (800582c <__s2b+0x90>)
 80057c8:	f001 fc9e 	bl	8007108 <__assert_func>
 80057cc:	0052      	lsls	r2, r2, #1
 80057ce:	3101      	adds	r1, #1
 80057d0:	e7f0      	b.n	80057b4 <__s2b+0x18>
 80057d2:	9b08      	ldr	r3, [sp, #32]
 80057d4:	2d09      	cmp	r5, #9
 80057d6:	6143      	str	r3, [r0, #20]
 80057d8:	f04f 0301 	mov.w	r3, #1
 80057dc:	6103      	str	r3, [r0, #16]
 80057de:	dd16      	ble.n	800580e <__s2b+0x72>
 80057e0:	f104 0909 	add.w	r9, r4, #9
 80057e4:	46c8      	mov	r8, r9
 80057e6:	442c      	add	r4, r5
 80057e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80057ec:	4601      	mov	r1, r0
 80057ee:	220a      	movs	r2, #10
 80057f0:	4630      	mov	r0, r6
 80057f2:	3b30      	subs	r3, #48	@ 0x30
 80057f4:	f7ff ff8c 	bl	8005710 <__multadd>
 80057f8:	45a0      	cmp	r8, r4
 80057fa:	d1f5      	bne.n	80057e8 <__s2b+0x4c>
 80057fc:	f1a5 0408 	sub.w	r4, r5, #8
 8005800:	444c      	add	r4, r9
 8005802:	1b2d      	subs	r5, r5, r4
 8005804:	1963      	adds	r3, r4, r5
 8005806:	42bb      	cmp	r3, r7
 8005808:	db04      	blt.n	8005814 <__s2b+0x78>
 800580a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800580e:	2509      	movs	r5, #9
 8005810:	340a      	adds	r4, #10
 8005812:	e7f6      	b.n	8005802 <__s2b+0x66>
 8005814:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005818:	4601      	mov	r1, r0
 800581a:	220a      	movs	r2, #10
 800581c:	4630      	mov	r0, r6
 800581e:	3b30      	subs	r3, #48	@ 0x30
 8005820:	f7ff ff76 	bl	8005710 <__multadd>
 8005824:	e7ee      	b.n	8005804 <__s2b+0x68>
 8005826:	bf00      	nop
 8005828:	08007ee7 	.word	0x08007ee7
 800582c:	08007ef8 	.word	0x08007ef8

08005830 <__hi0bits>:
 8005830:	4603      	mov	r3, r0
 8005832:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005836:	bf3a      	itte	cc
 8005838:	0403      	lslcc	r3, r0, #16
 800583a:	2010      	movcc	r0, #16
 800583c:	2000      	movcs	r0, #0
 800583e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005842:	bf3c      	itt	cc
 8005844:	021b      	lslcc	r3, r3, #8
 8005846:	3008      	addcc	r0, #8
 8005848:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800584c:	bf3c      	itt	cc
 800584e:	011b      	lslcc	r3, r3, #4
 8005850:	3004      	addcc	r0, #4
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005856:	bf3c      	itt	cc
 8005858:	009b      	lslcc	r3, r3, #2
 800585a:	3002      	addcc	r0, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	db05      	blt.n	800586c <__hi0bits+0x3c>
 8005860:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005864:	f100 0001 	add.w	r0, r0, #1
 8005868:	bf08      	it	eq
 800586a:	2020      	moveq	r0, #32
 800586c:	4770      	bx	lr

0800586e <__lo0bits>:
 800586e:	6803      	ldr	r3, [r0, #0]
 8005870:	4602      	mov	r2, r0
 8005872:	f013 0007 	ands.w	r0, r3, #7
 8005876:	d00b      	beq.n	8005890 <__lo0bits+0x22>
 8005878:	07d9      	lsls	r1, r3, #31
 800587a:	d421      	bmi.n	80058c0 <__lo0bits+0x52>
 800587c:	0798      	lsls	r0, r3, #30
 800587e:	bf49      	itett	mi
 8005880:	085b      	lsrmi	r3, r3, #1
 8005882:	089b      	lsrpl	r3, r3, #2
 8005884:	2001      	movmi	r0, #1
 8005886:	6013      	strmi	r3, [r2, #0]
 8005888:	bf5c      	itt	pl
 800588a:	2002      	movpl	r0, #2
 800588c:	6013      	strpl	r3, [r2, #0]
 800588e:	4770      	bx	lr
 8005890:	b299      	uxth	r1, r3
 8005892:	b909      	cbnz	r1, 8005898 <__lo0bits+0x2a>
 8005894:	2010      	movs	r0, #16
 8005896:	0c1b      	lsrs	r3, r3, #16
 8005898:	b2d9      	uxtb	r1, r3
 800589a:	b909      	cbnz	r1, 80058a0 <__lo0bits+0x32>
 800589c:	3008      	adds	r0, #8
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	0719      	lsls	r1, r3, #28
 80058a2:	bf04      	itt	eq
 80058a4:	091b      	lsreq	r3, r3, #4
 80058a6:	3004      	addeq	r0, #4
 80058a8:	0799      	lsls	r1, r3, #30
 80058aa:	bf04      	itt	eq
 80058ac:	089b      	lsreq	r3, r3, #2
 80058ae:	3002      	addeq	r0, #2
 80058b0:	07d9      	lsls	r1, r3, #31
 80058b2:	d403      	bmi.n	80058bc <__lo0bits+0x4e>
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	f100 0001 	add.w	r0, r0, #1
 80058ba:	d003      	beq.n	80058c4 <__lo0bits+0x56>
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	4770      	bx	lr
 80058c0:	2000      	movs	r0, #0
 80058c2:	4770      	bx	lr
 80058c4:	2020      	movs	r0, #32
 80058c6:	4770      	bx	lr

080058c8 <__i2b>:
 80058c8:	b510      	push	{r4, lr}
 80058ca:	460c      	mov	r4, r1
 80058cc:	2101      	movs	r1, #1
 80058ce:	f7ff febd 	bl	800564c <_Balloc>
 80058d2:	4602      	mov	r2, r0
 80058d4:	b928      	cbnz	r0, 80058e2 <__i2b+0x1a>
 80058d6:	f240 1145 	movw	r1, #325	@ 0x145
 80058da:	4b04      	ldr	r3, [pc, #16]	@ (80058ec <__i2b+0x24>)
 80058dc:	4804      	ldr	r0, [pc, #16]	@ (80058f0 <__i2b+0x28>)
 80058de:	f001 fc13 	bl	8007108 <__assert_func>
 80058e2:	2301      	movs	r3, #1
 80058e4:	6144      	str	r4, [r0, #20]
 80058e6:	6103      	str	r3, [r0, #16]
 80058e8:	bd10      	pop	{r4, pc}
 80058ea:	bf00      	nop
 80058ec:	08007ee7 	.word	0x08007ee7
 80058f0:	08007ef8 	.word	0x08007ef8

080058f4 <__multiply>:
 80058f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	4617      	mov	r7, r2
 80058fa:	690a      	ldr	r2, [r1, #16]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4689      	mov	r9, r1
 8005900:	429a      	cmp	r2, r3
 8005902:	bfa2      	ittt	ge
 8005904:	463b      	movge	r3, r7
 8005906:	460f      	movge	r7, r1
 8005908:	4699      	movge	r9, r3
 800590a:	693d      	ldr	r5, [r7, #16]
 800590c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	eb05 060a 	add.w	r6, r5, sl
 8005918:	42b3      	cmp	r3, r6
 800591a:	b085      	sub	sp, #20
 800591c:	bfb8      	it	lt
 800591e:	3101      	addlt	r1, #1
 8005920:	f7ff fe94 	bl	800564c <_Balloc>
 8005924:	b930      	cbnz	r0, 8005934 <__multiply+0x40>
 8005926:	4602      	mov	r2, r0
 8005928:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800592c:	4b40      	ldr	r3, [pc, #256]	@ (8005a30 <__multiply+0x13c>)
 800592e:	4841      	ldr	r0, [pc, #260]	@ (8005a34 <__multiply+0x140>)
 8005930:	f001 fbea 	bl	8007108 <__assert_func>
 8005934:	f100 0414 	add.w	r4, r0, #20
 8005938:	4623      	mov	r3, r4
 800593a:	2200      	movs	r2, #0
 800593c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005940:	4573      	cmp	r3, lr
 8005942:	d320      	bcc.n	8005986 <__multiply+0x92>
 8005944:	f107 0814 	add.w	r8, r7, #20
 8005948:	f109 0114 	add.w	r1, r9, #20
 800594c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005950:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005954:	9302      	str	r3, [sp, #8]
 8005956:	1beb      	subs	r3, r5, r7
 8005958:	3b15      	subs	r3, #21
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	3304      	adds	r3, #4
 8005960:	3715      	adds	r7, #21
 8005962:	42bd      	cmp	r5, r7
 8005964:	bf38      	it	cc
 8005966:	2304      	movcc	r3, #4
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	9b02      	ldr	r3, [sp, #8]
 800596c:	9103      	str	r1, [sp, #12]
 800596e:	428b      	cmp	r3, r1
 8005970:	d80c      	bhi.n	800598c <__multiply+0x98>
 8005972:	2e00      	cmp	r6, #0
 8005974:	dd03      	ble.n	800597e <__multiply+0x8a>
 8005976:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800597a:	2b00      	cmp	r3, #0
 800597c:	d055      	beq.n	8005a2a <__multiply+0x136>
 800597e:	6106      	str	r6, [r0, #16]
 8005980:	b005      	add	sp, #20
 8005982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005986:	f843 2b04 	str.w	r2, [r3], #4
 800598a:	e7d9      	b.n	8005940 <__multiply+0x4c>
 800598c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005990:	f1ba 0f00 	cmp.w	sl, #0
 8005994:	d01f      	beq.n	80059d6 <__multiply+0xe2>
 8005996:	46c4      	mov	ip, r8
 8005998:	46a1      	mov	r9, r4
 800599a:	2700      	movs	r7, #0
 800599c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80059a0:	f8d9 3000 	ldr.w	r3, [r9]
 80059a4:	fa1f fb82 	uxth.w	fp, r2
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	fb0a 330b 	mla	r3, sl, fp, r3
 80059ae:	443b      	add	r3, r7
 80059b0:	f8d9 7000 	ldr.w	r7, [r9]
 80059b4:	0c12      	lsrs	r2, r2, #16
 80059b6:	0c3f      	lsrs	r7, r7, #16
 80059b8:	fb0a 7202 	mla	r2, sl, r2, r7
 80059bc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059c6:	4565      	cmp	r5, ip
 80059c8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80059cc:	f849 3b04 	str.w	r3, [r9], #4
 80059d0:	d8e4      	bhi.n	800599c <__multiply+0xa8>
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	50e7      	str	r7, [r4, r3]
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	3104      	adds	r1, #4
 80059da:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80059de:	f1b9 0f00 	cmp.w	r9, #0
 80059e2:	d020      	beq.n	8005a26 <__multiply+0x132>
 80059e4:	4647      	mov	r7, r8
 80059e6:	46a4      	mov	ip, r4
 80059e8:	f04f 0a00 	mov.w	sl, #0
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	f8b7 b000 	ldrh.w	fp, [r7]
 80059f2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	fb09 220b 	mla	r2, r9, fp, r2
 80059fc:	4452      	add	r2, sl
 80059fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a02:	f84c 3b04 	str.w	r3, [ip], #4
 8005a06:	f857 3b04 	ldr.w	r3, [r7], #4
 8005a0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a0e:	f8bc 3000 	ldrh.w	r3, [ip]
 8005a12:	42bd      	cmp	r5, r7
 8005a14:	fb09 330a 	mla	r3, r9, sl, r3
 8005a18:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005a1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a20:	d8e5      	bhi.n	80059ee <__multiply+0xfa>
 8005a22:	9a01      	ldr	r2, [sp, #4]
 8005a24:	50a3      	str	r3, [r4, r2]
 8005a26:	3404      	adds	r4, #4
 8005a28:	e79f      	b.n	800596a <__multiply+0x76>
 8005a2a:	3e01      	subs	r6, #1
 8005a2c:	e7a1      	b.n	8005972 <__multiply+0x7e>
 8005a2e:	bf00      	nop
 8005a30:	08007ee7 	.word	0x08007ee7
 8005a34:	08007ef8 	.word	0x08007ef8

08005a38 <__pow5mult>:
 8005a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a3c:	4615      	mov	r5, r2
 8005a3e:	f012 0203 	ands.w	r2, r2, #3
 8005a42:	4607      	mov	r7, r0
 8005a44:	460e      	mov	r6, r1
 8005a46:	d007      	beq.n	8005a58 <__pow5mult+0x20>
 8005a48:	4c25      	ldr	r4, [pc, #148]	@ (8005ae0 <__pow5mult+0xa8>)
 8005a4a:	3a01      	subs	r2, #1
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a52:	f7ff fe5d 	bl	8005710 <__multadd>
 8005a56:	4606      	mov	r6, r0
 8005a58:	10ad      	asrs	r5, r5, #2
 8005a5a:	d03d      	beq.n	8005ad8 <__pow5mult+0xa0>
 8005a5c:	69fc      	ldr	r4, [r7, #28]
 8005a5e:	b97c      	cbnz	r4, 8005a80 <__pow5mult+0x48>
 8005a60:	2010      	movs	r0, #16
 8005a62:	f7ff fd3d 	bl	80054e0 <malloc>
 8005a66:	4602      	mov	r2, r0
 8005a68:	61f8      	str	r0, [r7, #28]
 8005a6a:	b928      	cbnz	r0, 8005a78 <__pow5mult+0x40>
 8005a6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005a70:	4b1c      	ldr	r3, [pc, #112]	@ (8005ae4 <__pow5mult+0xac>)
 8005a72:	481d      	ldr	r0, [pc, #116]	@ (8005ae8 <__pow5mult+0xb0>)
 8005a74:	f001 fb48 	bl	8007108 <__assert_func>
 8005a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a7c:	6004      	str	r4, [r0, #0]
 8005a7e:	60c4      	str	r4, [r0, #12]
 8005a80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a88:	b94c      	cbnz	r4, 8005a9e <__pow5mult+0x66>
 8005a8a:	f240 2171 	movw	r1, #625	@ 0x271
 8005a8e:	4638      	mov	r0, r7
 8005a90:	f7ff ff1a 	bl	80058c8 <__i2b>
 8005a94:	2300      	movs	r3, #0
 8005a96:	4604      	mov	r4, r0
 8005a98:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a9c:	6003      	str	r3, [r0, #0]
 8005a9e:	f04f 0900 	mov.w	r9, #0
 8005aa2:	07eb      	lsls	r3, r5, #31
 8005aa4:	d50a      	bpl.n	8005abc <__pow5mult+0x84>
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	4638      	mov	r0, r7
 8005aac:	f7ff ff22 	bl	80058f4 <__multiply>
 8005ab0:	4680      	mov	r8, r0
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	f7ff fe09 	bl	80056cc <_Bfree>
 8005aba:	4646      	mov	r6, r8
 8005abc:	106d      	asrs	r5, r5, #1
 8005abe:	d00b      	beq.n	8005ad8 <__pow5mult+0xa0>
 8005ac0:	6820      	ldr	r0, [r4, #0]
 8005ac2:	b938      	cbnz	r0, 8005ad4 <__pow5mult+0x9c>
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f7ff ff13 	bl	80058f4 <__multiply>
 8005ace:	6020      	str	r0, [r4, #0]
 8005ad0:	f8c0 9000 	str.w	r9, [r0]
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	e7e4      	b.n	8005aa2 <__pow5mult+0x6a>
 8005ad8:	4630      	mov	r0, r6
 8005ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ade:	bf00      	nop
 8005ae0:	08008008 	.word	0x08008008
 8005ae4:	08007e78 	.word	0x08007e78
 8005ae8:	08007ef8 	.word	0x08007ef8

08005aec <__lshift>:
 8005aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af0:	460c      	mov	r4, r1
 8005af2:	4607      	mov	r7, r0
 8005af4:	4691      	mov	r9, r2
 8005af6:	6923      	ldr	r3, [r4, #16]
 8005af8:	6849      	ldr	r1, [r1, #4]
 8005afa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005afe:	68a3      	ldr	r3, [r4, #8]
 8005b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b04:	f108 0601 	add.w	r6, r8, #1
 8005b08:	42b3      	cmp	r3, r6
 8005b0a:	db0b      	blt.n	8005b24 <__lshift+0x38>
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	f7ff fd9d 	bl	800564c <_Balloc>
 8005b12:	4605      	mov	r5, r0
 8005b14:	b948      	cbnz	r0, 8005b2a <__lshift+0x3e>
 8005b16:	4602      	mov	r2, r0
 8005b18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005b1c:	4b27      	ldr	r3, [pc, #156]	@ (8005bbc <__lshift+0xd0>)
 8005b1e:	4828      	ldr	r0, [pc, #160]	@ (8005bc0 <__lshift+0xd4>)
 8005b20:	f001 faf2 	bl	8007108 <__assert_func>
 8005b24:	3101      	adds	r1, #1
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	e7ee      	b.n	8005b08 <__lshift+0x1c>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f100 0114 	add.w	r1, r0, #20
 8005b30:	f100 0210 	add.w	r2, r0, #16
 8005b34:	4618      	mov	r0, r3
 8005b36:	4553      	cmp	r3, sl
 8005b38:	db33      	blt.n	8005ba2 <__lshift+0xb6>
 8005b3a:	6920      	ldr	r0, [r4, #16]
 8005b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b40:	f104 0314 	add.w	r3, r4, #20
 8005b44:	f019 091f 	ands.w	r9, r9, #31
 8005b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b50:	d02b      	beq.n	8005baa <__lshift+0xbe>
 8005b52:	468a      	mov	sl, r1
 8005b54:	2200      	movs	r2, #0
 8005b56:	f1c9 0e20 	rsb	lr, r9, #32
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	fa00 f009 	lsl.w	r0, r0, r9
 8005b60:	4310      	orrs	r0, r2
 8005b62:	f84a 0b04 	str.w	r0, [sl], #4
 8005b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b6a:	459c      	cmp	ip, r3
 8005b6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b70:	d8f3      	bhi.n	8005b5a <__lshift+0x6e>
 8005b72:	ebac 0304 	sub.w	r3, ip, r4
 8005b76:	3b15      	subs	r3, #21
 8005b78:	f023 0303 	bic.w	r3, r3, #3
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	f104 0015 	add.w	r0, r4, #21
 8005b82:	4560      	cmp	r0, ip
 8005b84:	bf88      	it	hi
 8005b86:	2304      	movhi	r3, #4
 8005b88:	50ca      	str	r2, [r1, r3]
 8005b8a:	b10a      	cbz	r2, 8005b90 <__lshift+0xa4>
 8005b8c:	f108 0602 	add.w	r6, r8, #2
 8005b90:	3e01      	subs	r6, #1
 8005b92:	4638      	mov	r0, r7
 8005b94:	4621      	mov	r1, r4
 8005b96:	612e      	str	r6, [r5, #16]
 8005b98:	f7ff fd98 	bl	80056cc <_Bfree>
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	e7c5      	b.n	8005b36 <__lshift+0x4a>
 8005baa:	3904      	subs	r1, #4
 8005bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bb0:	459c      	cmp	ip, r3
 8005bb2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005bb6:	d8f9      	bhi.n	8005bac <__lshift+0xc0>
 8005bb8:	e7ea      	b.n	8005b90 <__lshift+0xa4>
 8005bba:	bf00      	nop
 8005bbc:	08007ee7 	.word	0x08007ee7
 8005bc0:	08007ef8 	.word	0x08007ef8

08005bc4 <__mcmp>:
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	690a      	ldr	r2, [r1, #16]
 8005bc8:	6900      	ldr	r0, [r0, #16]
 8005bca:	b530      	push	{r4, r5, lr}
 8005bcc:	1a80      	subs	r0, r0, r2
 8005bce:	d10e      	bne.n	8005bee <__mcmp+0x2a>
 8005bd0:	3314      	adds	r3, #20
 8005bd2:	3114      	adds	r1, #20
 8005bd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005bd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005bdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005be0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005be4:	4295      	cmp	r5, r2
 8005be6:	d003      	beq.n	8005bf0 <__mcmp+0x2c>
 8005be8:	d205      	bcs.n	8005bf6 <__mcmp+0x32>
 8005bea:	f04f 30ff 	mov.w	r0, #4294967295
 8005bee:	bd30      	pop	{r4, r5, pc}
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	d3f3      	bcc.n	8005bdc <__mcmp+0x18>
 8005bf4:	e7fb      	b.n	8005bee <__mcmp+0x2a>
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	e7f9      	b.n	8005bee <__mcmp+0x2a>
	...

08005bfc <__mdiff>:
 8005bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	4689      	mov	r9, r1
 8005c02:	4606      	mov	r6, r0
 8005c04:	4611      	mov	r1, r2
 8005c06:	4648      	mov	r0, r9
 8005c08:	4614      	mov	r4, r2
 8005c0a:	f7ff ffdb 	bl	8005bc4 <__mcmp>
 8005c0e:	1e05      	subs	r5, r0, #0
 8005c10:	d112      	bne.n	8005c38 <__mdiff+0x3c>
 8005c12:	4629      	mov	r1, r5
 8005c14:	4630      	mov	r0, r6
 8005c16:	f7ff fd19 	bl	800564c <_Balloc>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	b928      	cbnz	r0, 8005c2a <__mdiff+0x2e>
 8005c1e:	f240 2137 	movw	r1, #567	@ 0x237
 8005c22:	4b3e      	ldr	r3, [pc, #248]	@ (8005d1c <__mdiff+0x120>)
 8005c24:	483e      	ldr	r0, [pc, #248]	@ (8005d20 <__mdiff+0x124>)
 8005c26:	f001 fa6f 	bl	8007108 <__assert_func>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c30:	4610      	mov	r0, r2
 8005c32:	b003      	add	sp, #12
 8005c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c38:	bfbc      	itt	lt
 8005c3a:	464b      	movlt	r3, r9
 8005c3c:	46a1      	movlt	r9, r4
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c44:	bfba      	itte	lt
 8005c46:	461c      	movlt	r4, r3
 8005c48:	2501      	movlt	r5, #1
 8005c4a:	2500      	movge	r5, #0
 8005c4c:	f7ff fcfe 	bl	800564c <_Balloc>
 8005c50:	4602      	mov	r2, r0
 8005c52:	b918      	cbnz	r0, 8005c5c <__mdiff+0x60>
 8005c54:	f240 2145 	movw	r1, #581	@ 0x245
 8005c58:	4b30      	ldr	r3, [pc, #192]	@ (8005d1c <__mdiff+0x120>)
 8005c5a:	e7e3      	b.n	8005c24 <__mdiff+0x28>
 8005c5c:	f100 0b14 	add.w	fp, r0, #20
 8005c60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005c64:	f109 0310 	add.w	r3, r9, #16
 8005c68:	60c5      	str	r5, [r0, #12]
 8005c6a:	f04f 0c00 	mov.w	ip, #0
 8005c6e:	f109 0514 	add.w	r5, r9, #20
 8005c72:	46d9      	mov	r9, fp
 8005c74:	6926      	ldr	r6, [r4, #16]
 8005c76:	f104 0e14 	add.w	lr, r4, #20
 8005c7a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005c7e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	9b01      	ldr	r3, [sp, #4]
 8005c86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005c8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005c8e:	b281      	uxth	r1, r0
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	fa1f f38a 	uxth.w	r3, sl
 8005c96:	1a5b      	subs	r3, r3, r1
 8005c98:	0c00      	lsrs	r0, r0, #16
 8005c9a:	4463      	add	r3, ip
 8005c9c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005ca0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005caa:	4576      	cmp	r6, lr
 8005cac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cb0:	f849 3b04 	str.w	r3, [r9], #4
 8005cb4:	d8e6      	bhi.n	8005c84 <__mdiff+0x88>
 8005cb6:	1b33      	subs	r3, r6, r4
 8005cb8:	3b15      	subs	r3, #21
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	3415      	adds	r4, #21
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	42a6      	cmp	r6, r4
 8005cc4:	bf38      	it	cc
 8005cc6:	2304      	movcc	r3, #4
 8005cc8:	441d      	add	r5, r3
 8005cca:	445b      	add	r3, fp
 8005ccc:	461e      	mov	r6, r3
 8005cce:	462c      	mov	r4, r5
 8005cd0:	4544      	cmp	r4, r8
 8005cd2:	d30e      	bcc.n	8005cf2 <__mdiff+0xf6>
 8005cd4:	f108 0103 	add.w	r1, r8, #3
 8005cd8:	1b49      	subs	r1, r1, r5
 8005cda:	f021 0103 	bic.w	r1, r1, #3
 8005cde:	3d03      	subs	r5, #3
 8005ce0:	45a8      	cmp	r8, r5
 8005ce2:	bf38      	it	cc
 8005ce4:	2100      	movcc	r1, #0
 8005ce6:	440b      	add	r3, r1
 8005ce8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005cec:	b199      	cbz	r1, 8005d16 <__mdiff+0x11a>
 8005cee:	6117      	str	r7, [r2, #16]
 8005cf0:	e79e      	b.n	8005c30 <__mdiff+0x34>
 8005cf2:	46e6      	mov	lr, ip
 8005cf4:	f854 1b04 	ldr.w	r1, [r4], #4
 8005cf8:	fa1f fc81 	uxth.w	ip, r1
 8005cfc:	44f4      	add	ip, lr
 8005cfe:	0c08      	lsrs	r0, r1, #16
 8005d00:	4471      	add	r1, lr
 8005d02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005d06:	b289      	uxth	r1, r1
 8005d08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005d0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d10:	f846 1b04 	str.w	r1, [r6], #4
 8005d14:	e7dc      	b.n	8005cd0 <__mdiff+0xd4>
 8005d16:	3f01      	subs	r7, #1
 8005d18:	e7e6      	b.n	8005ce8 <__mdiff+0xec>
 8005d1a:	bf00      	nop
 8005d1c:	08007ee7 	.word	0x08007ee7
 8005d20:	08007ef8 	.word	0x08007ef8

08005d24 <__ulp>:
 8005d24:	4b0e      	ldr	r3, [pc, #56]	@ (8005d60 <__ulp+0x3c>)
 8005d26:	400b      	ands	r3, r1
 8005d28:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	dc08      	bgt.n	8005d42 <__ulp+0x1e>
 8005d30:	425b      	negs	r3, r3
 8005d32:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005d36:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005d3a:	da04      	bge.n	8005d46 <__ulp+0x22>
 8005d3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005d40:	4113      	asrs	r3, r2
 8005d42:	2200      	movs	r2, #0
 8005d44:	e008      	b.n	8005d58 <__ulp+0x34>
 8005d46:	f1a2 0314 	sub.w	r3, r2, #20
 8005d4a:	2b1e      	cmp	r3, #30
 8005d4c:	bfd6      	itet	le
 8005d4e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005d52:	2201      	movgt	r2, #1
 8005d54:	40da      	lsrle	r2, r3
 8005d56:	2300      	movs	r3, #0
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	7ff00000 	.word	0x7ff00000

08005d64 <__b2d>:
 8005d64:	6902      	ldr	r2, [r0, #16]
 8005d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d68:	f100 0614 	add.w	r6, r0, #20
 8005d6c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005d70:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005d74:	4f1e      	ldr	r7, [pc, #120]	@ (8005df0 <__b2d+0x8c>)
 8005d76:	4620      	mov	r0, r4
 8005d78:	f7ff fd5a 	bl	8005830 <__hi0bits>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f1c0 0020 	rsb	r0, r0, #32
 8005d82:	2b0a      	cmp	r3, #10
 8005d84:	f1a2 0504 	sub.w	r5, r2, #4
 8005d88:	6008      	str	r0, [r1, #0]
 8005d8a:	dc12      	bgt.n	8005db2 <__b2d+0x4e>
 8005d8c:	42ae      	cmp	r6, r5
 8005d8e:	bf2c      	ite	cs
 8005d90:	2200      	movcs	r2, #0
 8005d92:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005d96:	f1c3 0c0b 	rsb	ip, r3, #11
 8005d9a:	3315      	adds	r3, #21
 8005d9c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005da0:	fa04 f303 	lsl.w	r3, r4, r3
 8005da4:	fa22 f20c 	lsr.w	r2, r2, ip
 8005da8:	ea4e 0107 	orr.w	r1, lr, r7
 8005dac:	431a      	orrs	r2, r3
 8005dae:	4610      	mov	r0, r2
 8005db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005db2:	42ae      	cmp	r6, r5
 8005db4:	bf36      	itet	cc
 8005db6:	f1a2 0508 	subcc.w	r5, r2, #8
 8005dba:	2200      	movcs	r2, #0
 8005dbc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005dc0:	3b0b      	subs	r3, #11
 8005dc2:	d012      	beq.n	8005dea <__b2d+0x86>
 8005dc4:	f1c3 0720 	rsb	r7, r3, #32
 8005dc8:	fa22 f107 	lsr.w	r1, r2, r7
 8005dcc:	409c      	lsls	r4, r3
 8005dce:	430c      	orrs	r4, r1
 8005dd0:	42b5      	cmp	r5, r6
 8005dd2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005dd6:	bf94      	ite	ls
 8005dd8:	2400      	movls	r4, #0
 8005dda:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005dde:	409a      	lsls	r2, r3
 8005de0:	40fc      	lsrs	r4, r7
 8005de2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005de6:	4322      	orrs	r2, r4
 8005de8:	e7e1      	b.n	8005dae <__b2d+0x4a>
 8005dea:	ea44 0107 	orr.w	r1, r4, r7
 8005dee:	e7de      	b.n	8005dae <__b2d+0x4a>
 8005df0:	3ff00000 	.word	0x3ff00000

08005df4 <__d2b>:
 8005df4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005df8:	2101      	movs	r1, #1
 8005dfa:	4690      	mov	r8, r2
 8005dfc:	4699      	mov	r9, r3
 8005dfe:	9e08      	ldr	r6, [sp, #32]
 8005e00:	f7ff fc24 	bl	800564c <_Balloc>
 8005e04:	4604      	mov	r4, r0
 8005e06:	b930      	cbnz	r0, 8005e16 <__d2b+0x22>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	f240 310f 	movw	r1, #783	@ 0x30f
 8005e0e:	4b23      	ldr	r3, [pc, #140]	@ (8005e9c <__d2b+0xa8>)
 8005e10:	4823      	ldr	r0, [pc, #140]	@ (8005ea0 <__d2b+0xac>)
 8005e12:	f001 f979 	bl	8007108 <__assert_func>
 8005e16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e1e:	b10d      	cbz	r5, 8005e24 <__d2b+0x30>
 8005e20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	f1b8 0300 	subs.w	r3, r8, #0
 8005e2a:	d024      	beq.n	8005e76 <__d2b+0x82>
 8005e2c:	4668      	mov	r0, sp
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	f7ff fd1d 	bl	800586e <__lo0bits>
 8005e34:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005e38:	b1d8      	cbz	r0, 8005e72 <__d2b+0x7e>
 8005e3a:	f1c0 0320 	rsb	r3, r0, #32
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	430b      	orrs	r3, r1
 8005e44:	40c2      	lsrs	r2, r0
 8005e46:	6163      	str	r3, [r4, #20]
 8005e48:	9201      	str	r2, [sp, #4]
 8005e4a:	9b01      	ldr	r3, [sp, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	bf0c      	ite	eq
 8005e50:	2201      	moveq	r2, #1
 8005e52:	2202      	movne	r2, #2
 8005e54:	61a3      	str	r3, [r4, #24]
 8005e56:	6122      	str	r2, [r4, #16]
 8005e58:	b1ad      	cbz	r5, 8005e86 <__d2b+0x92>
 8005e5a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005e5e:	4405      	add	r5, r0
 8005e60:	6035      	str	r5, [r6, #0]
 8005e62:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e68:	6018      	str	r0, [r3, #0]
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	b002      	add	sp, #8
 8005e6e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005e72:	6161      	str	r1, [r4, #20]
 8005e74:	e7e9      	b.n	8005e4a <__d2b+0x56>
 8005e76:	a801      	add	r0, sp, #4
 8005e78:	f7ff fcf9 	bl	800586e <__lo0bits>
 8005e7c:	9b01      	ldr	r3, [sp, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	6163      	str	r3, [r4, #20]
 8005e82:	3020      	adds	r0, #32
 8005e84:	e7e7      	b.n	8005e56 <__d2b+0x62>
 8005e86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005e8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e8e:	6030      	str	r0, [r6, #0]
 8005e90:	6918      	ldr	r0, [r3, #16]
 8005e92:	f7ff fccd 	bl	8005830 <__hi0bits>
 8005e96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e9a:	e7e4      	b.n	8005e66 <__d2b+0x72>
 8005e9c:	08007ee7 	.word	0x08007ee7
 8005ea0:	08007ef8 	.word	0x08007ef8

08005ea4 <__ratio>:
 8005ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	e9cd 1000 	strd	r1, r0, [sp]
 8005eae:	a902      	add	r1, sp, #8
 8005eb0:	f7ff ff58 	bl	8005d64 <__b2d>
 8005eb4:	468b      	mov	fp, r1
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	460f      	mov	r7, r1
 8005eba:	9800      	ldr	r0, [sp, #0]
 8005ebc:	a903      	add	r1, sp, #12
 8005ebe:	f7ff ff51 	bl	8005d64 <__b2d>
 8005ec2:	460d      	mov	r5, r1
 8005ec4:	9b01      	ldr	r3, [sp, #4]
 8005ec6:	4689      	mov	r9, r1
 8005ec8:	6919      	ldr	r1, [r3, #16]
 8005eca:	9b00      	ldr	r3, [sp, #0]
 8005ecc:	4604      	mov	r4, r0
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	1ac9      	subs	r1, r1, r3
 8005ed4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005ed8:	1a9b      	subs	r3, r3, r2
 8005eda:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bfcd      	iteet	gt
 8005ee2:	463a      	movgt	r2, r7
 8005ee4:	462a      	movle	r2, r5
 8005ee6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005eea:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005eee:	bfd8      	it	le
 8005ef0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	4659      	mov	r1, fp
 8005efa:	f7fa fc17 	bl	800072c <__aeabi_ddiv>
 8005efe:	b005      	add	sp, #20
 8005f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f04 <__copybits>:
 8005f04:	3901      	subs	r1, #1
 8005f06:	b570      	push	{r4, r5, r6, lr}
 8005f08:	1149      	asrs	r1, r1, #5
 8005f0a:	6914      	ldr	r4, [r2, #16]
 8005f0c:	3101      	adds	r1, #1
 8005f0e:	f102 0314 	add.w	r3, r2, #20
 8005f12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005f16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005f1a:	1f05      	subs	r5, r0, #4
 8005f1c:	42a3      	cmp	r3, r4
 8005f1e:	d30c      	bcc.n	8005f3a <__copybits+0x36>
 8005f20:	1aa3      	subs	r3, r4, r2
 8005f22:	3b11      	subs	r3, #17
 8005f24:	f023 0303 	bic.w	r3, r3, #3
 8005f28:	3211      	adds	r2, #17
 8005f2a:	42a2      	cmp	r2, r4
 8005f2c:	bf88      	it	hi
 8005f2e:	2300      	movhi	r3, #0
 8005f30:	4418      	add	r0, r3
 8005f32:	2300      	movs	r3, #0
 8005f34:	4288      	cmp	r0, r1
 8005f36:	d305      	bcc.n	8005f44 <__copybits+0x40>
 8005f38:	bd70      	pop	{r4, r5, r6, pc}
 8005f3a:	f853 6b04 	ldr.w	r6, [r3], #4
 8005f3e:	f845 6f04 	str.w	r6, [r5, #4]!
 8005f42:	e7eb      	b.n	8005f1c <__copybits+0x18>
 8005f44:	f840 3b04 	str.w	r3, [r0], #4
 8005f48:	e7f4      	b.n	8005f34 <__copybits+0x30>

08005f4a <__any_on>:
 8005f4a:	f100 0214 	add.w	r2, r0, #20
 8005f4e:	6900      	ldr	r0, [r0, #16]
 8005f50:	114b      	asrs	r3, r1, #5
 8005f52:	4298      	cmp	r0, r3
 8005f54:	b510      	push	{r4, lr}
 8005f56:	db11      	blt.n	8005f7c <__any_on+0x32>
 8005f58:	dd0a      	ble.n	8005f70 <__any_on+0x26>
 8005f5a:	f011 011f 	ands.w	r1, r1, #31
 8005f5e:	d007      	beq.n	8005f70 <__any_on+0x26>
 8005f60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005f64:	fa24 f001 	lsr.w	r0, r4, r1
 8005f68:	fa00 f101 	lsl.w	r1, r0, r1
 8005f6c:	428c      	cmp	r4, r1
 8005f6e:	d10b      	bne.n	8005f88 <__any_on+0x3e>
 8005f70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d803      	bhi.n	8005f80 <__any_on+0x36>
 8005f78:	2000      	movs	r0, #0
 8005f7a:	bd10      	pop	{r4, pc}
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	e7f7      	b.n	8005f70 <__any_on+0x26>
 8005f80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f84:	2900      	cmp	r1, #0
 8005f86:	d0f5      	beq.n	8005f74 <__any_on+0x2a>
 8005f88:	2001      	movs	r0, #1
 8005f8a:	e7f6      	b.n	8005f7a <__any_on+0x30>

08005f8c <sulp>:
 8005f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f90:	460f      	mov	r7, r1
 8005f92:	4690      	mov	r8, r2
 8005f94:	f7ff fec6 	bl	8005d24 <__ulp>
 8005f98:	4604      	mov	r4, r0
 8005f9a:	460d      	mov	r5, r1
 8005f9c:	f1b8 0f00 	cmp.w	r8, #0
 8005fa0:	d011      	beq.n	8005fc6 <sulp+0x3a>
 8005fa2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005fa6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dd0b      	ble.n	8005fc6 <sulp+0x3a>
 8005fae:	2400      	movs	r4, #0
 8005fb0:	051b      	lsls	r3, r3, #20
 8005fb2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005fb6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005fba:	4622      	mov	r2, r4
 8005fbc:	462b      	mov	r3, r5
 8005fbe:	f7fa fa8b 	bl	80004d8 <__aeabi_dmul>
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	460d      	mov	r5, r1
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	4629      	mov	r1, r5
 8005fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005fd0 <_strtod_l>:
 8005fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	b09f      	sub	sp, #124	@ 0x7c
 8005fd6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005fd8:	2200      	movs	r2, #0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	921a      	str	r2, [sp, #104]	@ 0x68
 8005fde:	f04f 0a00 	mov.w	sl, #0
 8005fe2:	f04f 0b00 	mov.w	fp, #0
 8005fe6:	460a      	mov	r2, r1
 8005fe8:	9005      	str	r0, [sp, #20]
 8005fea:	9219      	str	r2, [sp, #100]	@ 0x64
 8005fec:	7811      	ldrb	r1, [r2, #0]
 8005fee:	292b      	cmp	r1, #43	@ 0x2b
 8005ff0:	d048      	beq.n	8006084 <_strtod_l+0xb4>
 8005ff2:	d836      	bhi.n	8006062 <_strtod_l+0x92>
 8005ff4:	290d      	cmp	r1, #13
 8005ff6:	d830      	bhi.n	800605a <_strtod_l+0x8a>
 8005ff8:	2908      	cmp	r1, #8
 8005ffa:	d830      	bhi.n	800605e <_strtod_l+0x8e>
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	d039      	beq.n	8006074 <_strtod_l+0xa4>
 8006000:	2200      	movs	r2, #0
 8006002:	920e      	str	r2, [sp, #56]	@ 0x38
 8006004:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006006:	782a      	ldrb	r2, [r5, #0]
 8006008:	2a30      	cmp	r2, #48	@ 0x30
 800600a:	f040 80b0 	bne.w	800616e <_strtod_l+0x19e>
 800600e:	786a      	ldrb	r2, [r5, #1]
 8006010:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006014:	2a58      	cmp	r2, #88	@ 0x58
 8006016:	d16c      	bne.n	80060f2 <_strtod_l+0x122>
 8006018:	9302      	str	r3, [sp, #8]
 800601a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800601c:	4a8f      	ldr	r2, [pc, #572]	@ (800625c <_strtod_l+0x28c>)
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	ab1a      	add	r3, sp, #104	@ 0x68
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	9805      	ldr	r0, [sp, #20]
 8006026:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006028:	a919      	add	r1, sp, #100	@ 0x64
 800602a:	f001 f907 	bl	800723c <__gethex>
 800602e:	f010 060f 	ands.w	r6, r0, #15
 8006032:	4604      	mov	r4, r0
 8006034:	d005      	beq.n	8006042 <_strtod_l+0x72>
 8006036:	2e06      	cmp	r6, #6
 8006038:	d126      	bne.n	8006088 <_strtod_l+0xb8>
 800603a:	2300      	movs	r3, #0
 800603c:	3501      	adds	r5, #1
 800603e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006040:	930e      	str	r3, [sp, #56]	@ 0x38
 8006042:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006044:	2b00      	cmp	r3, #0
 8006046:	f040 8582 	bne.w	8006b4e <_strtod_l+0xb7e>
 800604a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800604c:	b1bb      	cbz	r3, 800607e <_strtod_l+0xae>
 800604e:	4650      	mov	r0, sl
 8006050:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006054:	b01f      	add	sp, #124	@ 0x7c
 8006056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605a:	2920      	cmp	r1, #32
 800605c:	d1d0      	bne.n	8006000 <_strtod_l+0x30>
 800605e:	3201      	adds	r2, #1
 8006060:	e7c3      	b.n	8005fea <_strtod_l+0x1a>
 8006062:	292d      	cmp	r1, #45	@ 0x2d
 8006064:	d1cc      	bne.n	8006000 <_strtod_l+0x30>
 8006066:	2101      	movs	r1, #1
 8006068:	910e      	str	r1, [sp, #56]	@ 0x38
 800606a:	1c51      	adds	r1, r2, #1
 800606c:	9119      	str	r1, [sp, #100]	@ 0x64
 800606e:	7852      	ldrb	r2, [r2, #1]
 8006070:	2a00      	cmp	r2, #0
 8006072:	d1c7      	bne.n	8006004 <_strtod_l+0x34>
 8006074:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006076:	9419      	str	r4, [sp, #100]	@ 0x64
 8006078:	2b00      	cmp	r3, #0
 800607a:	f040 8566 	bne.w	8006b4a <_strtod_l+0xb7a>
 800607e:	4650      	mov	r0, sl
 8006080:	4659      	mov	r1, fp
 8006082:	e7e7      	b.n	8006054 <_strtod_l+0x84>
 8006084:	2100      	movs	r1, #0
 8006086:	e7ef      	b.n	8006068 <_strtod_l+0x98>
 8006088:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800608a:	b13a      	cbz	r2, 800609c <_strtod_l+0xcc>
 800608c:	2135      	movs	r1, #53	@ 0x35
 800608e:	a81c      	add	r0, sp, #112	@ 0x70
 8006090:	f7ff ff38 	bl	8005f04 <__copybits>
 8006094:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006096:	9805      	ldr	r0, [sp, #20]
 8006098:	f7ff fb18 	bl	80056cc <_Bfree>
 800609c:	3e01      	subs	r6, #1
 800609e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80060a0:	2e04      	cmp	r6, #4
 80060a2:	d806      	bhi.n	80060b2 <_strtod_l+0xe2>
 80060a4:	e8df f006 	tbb	[pc, r6]
 80060a8:	201d0314 	.word	0x201d0314
 80060ac:	14          	.byte	0x14
 80060ad:	00          	.byte	0x00
 80060ae:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80060b2:	05e1      	lsls	r1, r4, #23
 80060b4:	bf48      	it	mi
 80060b6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80060ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80060be:	0d1b      	lsrs	r3, r3, #20
 80060c0:	051b      	lsls	r3, r3, #20
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1bd      	bne.n	8006042 <_strtod_l+0x72>
 80060c6:	f7fe fb17 	bl	80046f8 <__errno>
 80060ca:	2322      	movs	r3, #34	@ 0x22
 80060cc:	6003      	str	r3, [r0, #0]
 80060ce:	e7b8      	b.n	8006042 <_strtod_l+0x72>
 80060d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80060d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80060d8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80060dc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80060e0:	e7e7      	b.n	80060b2 <_strtod_l+0xe2>
 80060e2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006260 <_strtod_l+0x290>
 80060e6:	e7e4      	b.n	80060b2 <_strtod_l+0xe2>
 80060e8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80060ec:	f04f 3aff 	mov.w	sl, #4294967295
 80060f0:	e7df      	b.n	80060b2 <_strtod_l+0xe2>
 80060f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80060f8:	785b      	ldrb	r3, [r3, #1]
 80060fa:	2b30      	cmp	r3, #48	@ 0x30
 80060fc:	d0f9      	beq.n	80060f2 <_strtod_l+0x122>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d09f      	beq.n	8006042 <_strtod_l+0x72>
 8006102:	2301      	movs	r3, #1
 8006104:	2700      	movs	r7, #0
 8006106:	220a      	movs	r2, #10
 8006108:	46b9      	mov	r9, r7
 800610a:	9308      	str	r3, [sp, #32]
 800610c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800610e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006110:	930c      	str	r3, [sp, #48]	@ 0x30
 8006112:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006114:	7805      	ldrb	r5, [r0, #0]
 8006116:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800611a:	b2d9      	uxtb	r1, r3
 800611c:	2909      	cmp	r1, #9
 800611e:	d928      	bls.n	8006172 <_strtod_l+0x1a2>
 8006120:	2201      	movs	r2, #1
 8006122:	4950      	ldr	r1, [pc, #320]	@ (8006264 <_strtod_l+0x294>)
 8006124:	f000 ffc8 	bl	80070b8 <strncmp>
 8006128:	2800      	cmp	r0, #0
 800612a:	d032      	beq.n	8006192 <_strtod_l+0x1c2>
 800612c:	2000      	movs	r0, #0
 800612e:	462a      	mov	r2, r5
 8006130:	4603      	mov	r3, r0
 8006132:	464d      	mov	r5, r9
 8006134:	900a      	str	r0, [sp, #40]	@ 0x28
 8006136:	2a65      	cmp	r2, #101	@ 0x65
 8006138:	d001      	beq.n	800613e <_strtod_l+0x16e>
 800613a:	2a45      	cmp	r2, #69	@ 0x45
 800613c:	d114      	bne.n	8006168 <_strtod_l+0x198>
 800613e:	b91d      	cbnz	r5, 8006148 <_strtod_l+0x178>
 8006140:	9a08      	ldr	r2, [sp, #32]
 8006142:	4302      	orrs	r2, r0
 8006144:	d096      	beq.n	8006074 <_strtod_l+0xa4>
 8006146:	2500      	movs	r5, #0
 8006148:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800614a:	1c62      	adds	r2, r4, #1
 800614c:	9219      	str	r2, [sp, #100]	@ 0x64
 800614e:	7862      	ldrb	r2, [r4, #1]
 8006150:	2a2b      	cmp	r2, #43	@ 0x2b
 8006152:	d07a      	beq.n	800624a <_strtod_l+0x27a>
 8006154:	2a2d      	cmp	r2, #45	@ 0x2d
 8006156:	d07e      	beq.n	8006256 <_strtod_l+0x286>
 8006158:	f04f 0c00 	mov.w	ip, #0
 800615c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006160:	2909      	cmp	r1, #9
 8006162:	f240 8085 	bls.w	8006270 <_strtod_l+0x2a0>
 8006166:	9419      	str	r4, [sp, #100]	@ 0x64
 8006168:	f04f 0800 	mov.w	r8, #0
 800616c:	e0a5      	b.n	80062ba <_strtod_l+0x2ea>
 800616e:	2300      	movs	r3, #0
 8006170:	e7c8      	b.n	8006104 <_strtod_l+0x134>
 8006172:	f1b9 0f08 	cmp.w	r9, #8
 8006176:	bfd8      	it	le
 8006178:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800617a:	f100 0001 	add.w	r0, r0, #1
 800617e:	bfd6      	itet	le
 8006180:	fb02 3301 	mlale	r3, r2, r1, r3
 8006184:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006188:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800618a:	f109 0901 	add.w	r9, r9, #1
 800618e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006190:	e7bf      	b.n	8006112 <_strtod_l+0x142>
 8006192:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	9219      	str	r2, [sp, #100]	@ 0x64
 8006198:	785a      	ldrb	r2, [r3, #1]
 800619a:	f1b9 0f00 	cmp.w	r9, #0
 800619e:	d03b      	beq.n	8006218 <_strtod_l+0x248>
 80061a0:	464d      	mov	r5, r9
 80061a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80061a4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80061a8:	2b09      	cmp	r3, #9
 80061aa:	d912      	bls.n	80061d2 <_strtod_l+0x202>
 80061ac:	2301      	movs	r3, #1
 80061ae:	e7c2      	b.n	8006136 <_strtod_l+0x166>
 80061b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061b2:	3001      	adds	r0, #1
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	9219      	str	r2, [sp, #100]	@ 0x64
 80061b8:	785a      	ldrb	r2, [r3, #1]
 80061ba:	2a30      	cmp	r2, #48	@ 0x30
 80061bc:	d0f8      	beq.n	80061b0 <_strtod_l+0x1e0>
 80061be:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	f200 84c8 	bhi.w	8006b58 <_strtod_l+0xb88>
 80061c8:	900a      	str	r0, [sp, #40]	@ 0x28
 80061ca:	2000      	movs	r0, #0
 80061cc:	4605      	mov	r5, r0
 80061ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80061d2:	3a30      	subs	r2, #48	@ 0x30
 80061d4:	f100 0301 	add.w	r3, r0, #1
 80061d8:	d018      	beq.n	800620c <_strtod_l+0x23c>
 80061da:	462e      	mov	r6, r5
 80061dc:	f04f 0e0a 	mov.w	lr, #10
 80061e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061e2:	4419      	add	r1, r3
 80061e4:	910a      	str	r1, [sp, #40]	@ 0x28
 80061e6:	1c71      	adds	r1, r6, #1
 80061e8:	eba1 0c05 	sub.w	ip, r1, r5
 80061ec:	4563      	cmp	r3, ip
 80061ee:	dc15      	bgt.n	800621c <_strtod_l+0x24c>
 80061f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80061f4:	182b      	adds	r3, r5, r0
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	f105 0501 	add.w	r5, r5, #1
 80061fc:	4405      	add	r5, r0
 80061fe:	dc1a      	bgt.n	8006236 <_strtod_l+0x266>
 8006200:	230a      	movs	r3, #10
 8006202:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006204:	fb03 2301 	mla	r3, r3, r1, r2
 8006208:	930b      	str	r3, [sp, #44]	@ 0x2c
 800620a:	2300      	movs	r3, #0
 800620c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800620e:	4618      	mov	r0, r3
 8006210:	1c51      	adds	r1, r2, #1
 8006212:	9119      	str	r1, [sp, #100]	@ 0x64
 8006214:	7852      	ldrb	r2, [r2, #1]
 8006216:	e7c5      	b.n	80061a4 <_strtod_l+0x1d4>
 8006218:	4648      	mov	r0, r9
 800621a:	e7ce      	b.n	80061ba <_strtod_l+0x1ea>
 800621c:	2e08      	cmp	r6, #8
 800621e:	dc05      	bgt.n	800622c <_strtod_l+0x25c>
 8006220:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006222:	fb0e f606 	mul.w	r6, lr, r6
 8006226:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006228:	460e      	mov	r6, r1
 800622a:	e7dc      	b.n	80061e6 <_strtod_l+0x216>
 800622c:	2910      	cmp	r1, #16
 800622e:	bfd8      	it	le
 8006230:	fb0e f707 	mulle.w	r7, lr, r7
 8006234:	e7f8      	b.n	8006228 <_strtod_l+0x258>
 8006236:	2b0f      	cmp	r3, #15
 8006238:	bfdc      	itt	le
 800623a:	230a      	movle	r3, #10
 800623c:	fb03 2707 	mlale	r7, r3, r7, r2
 8006240:	e7e3      	b.n	800620a <_strtod_l+0x23a>
 8006242:	2300      	movs	r3, #0
 8006244:	930a      	str	r3, [sp, #40]	@ 0x28
 8006246:	2301      	movs	r3, #1
 8006248:	e77a      	b.n	8006140 <_strtod_l+0x170>
 800624a:	f04f 0c00 	mov.w	ip, #0
 800624e:	1ca2      	adds	r2, r4, #2
 8006250:	9219      	str	r2, [sp, #100]	@ 0x64
 8006252:	78a2      	ldrb	r2, [r4, #2]
 8006254:	e782      	b.n	800615c <_strtod_l+0x18c>
 8006256:	f04f 0c01 	mov.w	ip, #1
 800625a:	e7f8      	b.n	800624e <_strtod_l+0x27e>
 800625c:	0800811c 	.word	0x0800811c
 8006260:	7ff00000 	.word	0x7ff00000
 8006264:	08007f51 	.word	0x08007f51
 8006268:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800626a:	1c51      	adds	r1, r2, #1
 800626c:	9119      	str	r1, [sp, #100]	@ 0x64
 800626e:	7852      	ldrb	r2, [r2, #1]
 8006270:	2a30      	cmp	r2, #48	@ 0x30
 8006272:	d0f9      	beq.n	8006268 <_strtod_l+0x298>
 8006274:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006278:	2908      	cmp	r1, #8
 800627a:	f63f af75 	bhi.w	8006168 <_strtod_l+0x198>
 800627e:	f04f 080a 	mov.w	r8, #10
 8006282:	3a30      	subs	r2, #48	@ 0x30
 8006284:	9209      	str	r2, [sp, #36]	@ 0x24
 8006286:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006288:	920f      	str	r2, [sp, #60]	@ 0x3c
 800628a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800628c:	1c56      	adds	r6, r2, #1
 800628e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006290:	7852      	ldrb	r2, [r2, #1]
 8006292:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006296:	f1be 0f09 	cmp.w	lr, #9
 800629a:	d939      	bls.n	8006310 <_strtod_l+0x340>
 800629c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800629e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80062a2:	1a76      	subs	r6, r6, r1
 80062a4:	2e08      	cmp	r6, #8
 80062a6:	dc03      	bgt.n	80062b0 <_strtod_l+0x2e0>
 80062a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062aa:	4588      	cmp	r8, r1
 80062ac:	bfa8      	it	ge
 80062ae:	4688      	movge	r8, r1
 80062b0:	f1bc 0f00 	cmp.w	ip, #0
 80062b4:	d001      	beq.n	80062ba <_strtod_l+0x2ea>
 80062b6:	f1c8 0800 	rsb	r8, r8, #0
 80062ba:	2d00      	cmp	r5, #0
 80062bc:	d14e      	bne.n	800635c <_strtod_l+0x38c>
 80062be:	9908      	ldr	r1, [sp, #32]
 80062c0:	4308      	orrs	r0, r1
 80062c2:	f47f aebe 	bne.w	8006042 <_strtod_l+0x72>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f47f aed4 	bne.w	8006074 <_strtod_l+0xa4>
 80062cc:	2a69      	cmp	r2, #105	@ 0x69
 80062ce:	d028      	beq.n	8006322 <_strtod_l+0x352>
 80062d0:	dc25      	bgt.n	800631e <_strtod_l+0x34e>
 80062d2:	2a49      	cmp	r2, #73	@ 0x49
 80062d4:	d025      	beq.n	8006322 <_strtod_l+0x352>
 80062d6:	2a4e      	cmp	r2, #78	@ 0x4e
 80062d8:	f47f aecc 	bne.w	8006074 <_strtod_l+0xa4>
 80062dc:	4999      	ldr	r1, [pc, #612]	@ (8006544 <_strtod_l+0x574>)
 80062de:	a819      	add	r0, sp, #100	@ 0x64
 80062e0:	f001 f9ce 	bl	8007680 <__match>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	f43f aec5 	beq.w	8006074 <_strtod_l+0xa4>
 80062ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b28      	cmp	r3, #40	@ 0x28
 80062f0:	d12e      	bne.n	8006350 <_strtod_l+0x380>
 80062f2:	4995      	ldr	r1, [pc, #596]	@ (8006548 <_strtod_l+0x578>)
 80062f4:	aa1c      	add	r2, sp, #112	@ 0x70
 80062f6:	a819      	add	r0, sp, #100	@ 0x64
 80062f8:	f001 f9d6 	bl	80076a8 <__hexnan>
 80062fc:	2805      	cmp	r0, #5
 80062fe:	d127      	bne.n	8006350 <_strtod_l+0x380>
 8006300:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006302:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006306:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800630a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800630e:	e698      	b.n	8006042 <_strtod_l+0x72>
 8006310:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006312:	fb08 2101 	mla	r1, r8, r1, r2
 8006316:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800631a:	9209      	str	r2, [sp, #36]	@ 0x24
 800631c:	e7b5      	b.n	800628a <_strtod_l+0x2ba>
 800631e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006320:	e7da      	b.n	80062d8 <_strtod_l+0x308>
 8006322:	498a      	ldr	r1, [pc, #552]	@ (800654c <_strtod_l+0x57c>)
 8006324:	a819      	add	r0, sp, #100	@ 0x64
 8006326:	f001 f9ab 	bl	8007680 <__match>
 800632a:	2800      	cmp	r0, #0
 800632c:	f43f aea2 	beq.w	8006074 <_strtod_l+0xa4>
 8006330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006332:	4987      	ldr	r1, [pc, #540]	@ (8006550 <_strtod_l+0x580>)
 8006334:	3b01      	subs	r3, #1
 8006336:	a819      	add	r0, sp, #100	@ 0x64
 8006338:	9319      	str	r3, [sp, #100]	@ 0x64
 800633a:	f001 f9a1 	bl	8007680 <__match>
 800633e:	b910      	cbnz	r0, 8006346 <_strtod_l+0x376>
 8006340:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006342:	3301      	adds	r3, #1
 8006344:	9319      	str	r3, [sp, #100]	@ 0x64
 8006346:	f04f 0a00 	mov.w	sl, #0
 800634a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8006554 <_strtod_l+0x584>
 800634e:	e678      	b.n	8006042 <_strtod_l+0x72>
 8006350:	4881      	ldr	r0, [pc, #516]	@ (8006558 <_strtod_l+0x588>)
 8006352:	f000 fed3 	bl	80070fc <nan>
 8006356:	4682      	mov	sl, r0
 8006358:	468b      	mov	fp, r1
 800635a:	e672      	b.n	8006042 <_strtod_l+0x72>
 800635c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800635e:	f1b9 0f00 	cmp.w	r9, #0
 8006362:	bf08      	it	eq
 8006364:	46a9      	moveq	r9, r5
 8006366:	eba8 0303 	sub.w	r3, r8, r3
 800636a:	2d10      	cmp	r5, #16
 800636c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800636e:	462c      	mov	r4, r5
 8006370:	9309      	str	r3, [sp, #36]	@ 0x24
 8006372:	bfa8      	it	ge
 8006374:	2410      	movge	r4, #16
 8006376:	f7fa f835 	bl	80003e4 <__aeabi_ui2d>
 800637a:	2d09      	cmp	r5, #9
 800637c:	4682      	mov	sl, r0
 800637e:	468b      	mov	fp, r1
 8006380:	dc11      	bgt.n	80063a6 <_strtod_l+0x3d6>
 8006382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	f43f ae5c 	beq.w	8006042 <_strtod_l+0x72>
 800638a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638c:	dd76      	ble.n	800647c <_strtod_l+0x4ac>
 800638e:	2b16      	cmp	r3, #22
 8006390:	dc5d      	bgt.n	800644e <_strtod_l+0x47e>
 8006392:	4972      	ldr	r1, [pc, #456]	@ (800655c <_strtod_l+0x58c>)
 8006394:	4652      	mov	r2, sl
 8006396:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800639a:	465b      	mov	r3, fp
 800639c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063a0:	f7fa f89a 	bl	80004d8 <__aeabi_dmul>
 80063a4:	e7d7      	b.n	8006356 <_strtod_l+0x386>
 80063a6:	4b6d      	ldr	r3, [pc, #436]	@ (800655c <_strtod_l+0x58c>)
 80063a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80063b0:	f7fa f892 	bl	80004d8 <__aeabi_dmul>
 80063b4:	4682      	mov	sl, r0
 80063b6:	4638      	mov	r0, r7
 80063b8:	468b      	mov	fp, r1
 80063ba:	f7fa f813 	bl	80003e4 <__aeabi_ui2d>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4650      	mov	r0, sl
 80063c4:	4659      	mov	r1, fp
 80063c6:	f7f9 fed1 	bl	800016c <__adddf3>
 80063ca:	2d0f      	cmp	r5, #15
 80063cc:	4682      	mov	sl, r0
 80063ce:	468b      	mov	fp, r1
 80063d0:	ddd7      	ble.n	8006382 <_strtod_l+0x3b2>
 80063d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d4:	1b2c      	subs	r4, r5, r4
 80063d6:	441c      	add	r4, r3
 80063d8:	2c00      	cmp	r4, #0
 80063da:	f340 8093 	ble.w	8006504 <_strtod_l+0x534>
 80063de:	f014 030f 	ands.w	r3, r4, #15
 80063e2:	d00a      	beq.n	80063fa <_strtod_l+0x42a>
 80063e4:	495d      	ldr	r1, [pc, #372]	@ (800655c <_strtod_l+0x58c>)
 80063e6:	4652      	mov	r2, sl
 80063e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063f0:	465b      	mov	r3, fp
 80063f2:	f7fa f871 	bl	80004d8 <__aeabi_dmul>
 80063f6:	4682      	mov	sl, r0
 80063f8:	468b      	mov	fp, r1
 80063fa:	f034 040f 	bics.w	r4, r4, #15
 80063fe:	d073      	beq.n	80064e8 <_strtod_l+0x518>
 8006400:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006404:	dd49      	ble.n	800649a <_strtod_l+0x4ca>
 8006406:	2400      	movs	r4, #0
 8006408:	46a0      	mov	r8, r4
 800640a:	46a1      	mov	r9, r4
 800640c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800640e:	2322      	movs	r3, #34	@ 0x22
 8006410:	f04f 0a00 	mov.w	sl, #0
 8006414:	9a05      	ldr	r2, [sp, #20]
 8006416:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8006554 <_strtod_l+0x584>
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800641e:	2b00      	cmp	r3, #0
 8006420:	f43f ae0f 	beq.w	8006042 <_strtod_l+0x72>
 8006424:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006426:	9805      	ldr	r0, [sp, #20]
 8006428:	f7ff f950 	bl	80056cc <_Bfree>
 800642c:	4649      	mov	r1, r9
 800642e:	9805      	ldr	r0, [sp, #20]
 8006430:	f7ff f94c 	bl	80056cc <_Bfree>
 8006434:	4641      	mov	r1, r8
 8006436:	9805      	ldr	r0, [sp, #20]
 8006438:	f7ff f948 	bl	80056cc <_Bfree>
 800643c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800643e:	9805      	ldr	r0, [sp, #20]
 8006440:	f7ff f944 	bl	80056cc <_Bfree>
 8006444:	4621      	mov	r1, r4
 8006446:	9805      	ldr	r0, [sp, #20]
 8006448:	f7ff f940 	bl	80056cc <_Bfree>
 800644c:	e5f9      	b.n	8006042 <_strtod_l+0x72>
 800644e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006450:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006454:	4293      	cmp	r3, r2
 8006456:	dbbc      	blt.n	80063d2 <_strtod_l+0x402>
 8006458:	4c40      	ldr	r4, [pc, #256]	@ (800655c <_strtod_l+0x58c>)
 800645a:	f1c5 050f 	rsb	r5, r5, #15
 800645e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006462:	4652      	mov	r2, sl
 8006464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006468:	465b      	mov	r3, fp
 800646a:	f7fa f835 	bl	80004d8 <__aeabi_dmul>
 800646e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006470:	1b5d      	subs	r5, r3, r5
 8006472:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006476:	e9d4 2300 	ldrd	r2, r3, [r4]
 800647a:	e791      	b.n	80063a0 <_strtod_l+0x3d0>
 800647c:	3316      	adds	r3, #22
 800647e:	dba8      	blt.n	80063d2 <_strtod_l+0x402>
 8006480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006482:	4650      	mov	r0, sl
 8006484:	eba3 0808 	sub.w	r8, r3, r8
 8006488:	4b34      	ldr	r3, [pc, #208]	@ (800655c <_strtod_l+0x58c>)
 800648a:	4659      	mov	r1, fp
 800648c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006490:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006494:	f7fa f94a 	bl	800072c <__aeabi_ddiv>
 8006498:	e75d      	b.n	8006356 <_strtod_l+0x386>
 800649a:	2300      	movs	r3, #0
 800649c:	4650      	mov	r0, sl
 800649e:	4659      	mov	r1, fp
 80064a0:	461e      	mov	r6, r3
 80064a2:	4f2f      	ldr	r7, [pc, #188]	@ (8006560 <_strtod_l+0x590>)
 80064a4:	1124      	asrs	r4, r4, #4
 80064a6:	2c01      	cmp	r4, #1
 80064a8:	dc21      	bgt.n	80064ee <_strtod_l+0x51e>
 80064aa:	b10b      	cbz	r3, 80064b0 <_strtod_l+0x4e0>
 80064ac:	4682      	mov	sl, r0
 80064ae:	468b      	mov	fp, r1
 80064b0:	492b      	ldr	r1, [pc, #172]	@ (8006560 <_strtod_l+0x590>)
 80064b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80064b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80064ba:	4652      	mov	r2, sl
 80064bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064c0:	465b      	mov	r3, fp
 80064c2:	f7fa f809 	bl	80004d8 <__aeabi_dmul>
 80064c6:	4b23      	ldr	r3, [pc, #140]	@ (8006554 <_strtod_l+0x584>)
 80064c8:	460a      	mov	r2, r1
 80064ca:	400b      	ands	r3, r1
 80064cc:	4925      	ldr	r1, [pc, #148]	@ (8006564 <_strtod_l+0x594>)
 80064ce:	4682      	mov	sl, r0
 80064d0:	428b      	cmp	r3, r1
 80064d2:	d898      	bhi.n	8006406 <_strtod_l+0x436>
 80064d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80064d8:	428b      	cmp	r3, r1
 80064da:	bf86      	itte	hi
 80064dc:	f04f 3aff 	movhi.w	sl, #4294967295
 80064e0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006568 <_strtod_l+0x598>
 80064e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80064e8:	2300      	movs	r3, #0
 80064ea:	9308      	str	r3, [sp, #32]
 80064ec:	e076      	b.n	80065dc <_strtod_l+0x60c>
 80064ee:	07e2      	lsls	r2, r4, #31
 80064f0:	d504      	bpl.n	80064fc <_strtod_l+0x52c>
 80064f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f6:	f7f9 ffef 	bl	80004d8 <__aeabi_dmul>
 80064fa:	2301      	movs	r3, #1
 80064fc:	3601      	adds	r6, #1
 80064fe:	1064      	asrs	r4, r4, #1
 8006500:	3708      	adds	r7, #8
 8006502:	e7d0      	b.n	80064a6 <_strtod_l+0x4d6>
 8006504:	d0f0      	beq.n	80064e8 <_strtod_l+0x518>
 8006506:	4264      	negs	r4, r4
 8006508:	f014 020f 	ands.w	r2, r4, #15
 800650c:	d00a      	beq.n	8006524 <_strtod_l+0x554>
 800650e:	4b13      	ldr	r3, [pc, #76]	@ (800655c <_strtod_l+0x58c>)
 8006510:	4650      	mov	r0, sl
 8006512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006516:	4659      	mov	r1, fp
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	f7fa f906 	bl	800072c <__aeabi_ddiv>
 8006520:	4682      	mov	sl, r0
 8006522:	468b      	mov	fp, r1
 8006524:	1124      	asrs	r4, r4, #4
 8006526:	d0df      	beq.n	80064e8 <_strtod_l+0x518>
 8006528:	2c1f      	cmp	r4, #31
 800652a:	dd1f      	ble.n	800656c <_strtod_l+0x59c>
 800652c:	2400      	movs	r4, #0
 800652e:	46a0      	mov	r8, r4
 8006530:	46a1      	mov	r9, r4
 8006532:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006534:	2322      	movs	r3, #34	@ 0x22
 8006536:	9a05      	ldr	r2, [sp, #20]
 8006538:	f04f 0a00 	mov.w	sl, #0
 800653c:	f04f 0b00 	mov.w	fp, #0
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	e76b      	b.n	800641c <_strtod_l+0x44c>
 8006544:	08007e3f 	.word	0x08007e3f
 8006548:	08008108 	.word	0x08008108
 800654c:	08007e37 	.word	0x08007e37
 8006550:	08007e6e 	.word	0x08007e6e
 8006554:	7ff00000 	.word	0x7ff00000
 8006558:	08007fa7 	.word	0x08007fa7
 800655c:	08008040 	.word	0x08008040
 8006560:	08008018 	.word	0x08008018
 8006564:	7ca00000 	.word	0x7ca00000
 8006568:	7fefffff 	.word	0x7fefffff
 800656c:	f014 0310 	ands.w	r3, r4, #16
 8006570:	bf18      	it	ne
 8006572:	236a      	movne	r3, #106	@ 0x6a
 8006574:	4650      	mov	r0, sl
 8006576:	9308      	str	r3, [sp, #32]
 8006578:	4659      	mov	r1, fp
 800657a:	2300      	movs	r3, #0
 800657c:	4e77      	ldr	r6, [pc, #476]	@ (800675c <_strtod_l+0x78c>)
 800657e:	07e7      	lsls	r7, r4, #31
 8006580:	d504      	bpl.n	800658c <_strtod_l+0x5bc>
 8006582:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006586:	f7f9 ffa7 	bl	80004d8 <__aeabi_dmul>
 800658a:	2301      	movs	r3, #1
 800658c:	1064      	asrs	r4, r4, #1
 800658e:	f106 0608 	add.w	r6, r6, #8
 8006592:	d1f4      	bne.n	800657e <_strtod_l+0x5ae>
 8006594:	b10b      	cbz	r3, 800659a <_strtod_l+0x5ca>
 8006596:	4682      	mov	sl, r0
 8006598:	468b      	mov	fp, r1
 800659a:	9b08      	ldr	r3, [sp, #32]
 800659c:	b1b3      	cbz	r3, 80065cc <_strtod_l+0x5fc>
 800659e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80065a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	4659      	mov	r1, fp
 80065aa:	dd0f      	ble.n	80065cc <_strtod_l+0x5fc>
 80065ac:	2b1f      	cmp	r3, #31
 80065ae:	dd58      	ble.n	8006662 <_strtod_l+0x692>
 80065b0:	2b34      	cmp	r3, #52	@ 0x34
 80065b2:	bfd8      	it	le
 80065b4:	f04f 33ff 	movle.w	r3, #4294967295
 80065b8:	f04f 0a00 	mov.w	sl, #0
 80065bc:	bfcf      	iteee	gt
 80065be:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80065c2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80065c6:	4093      	lslle	r3, r2
 80065c8:	ea03 0b01 	andle.w	fp, r3, r1
 80065cc:	2200      	movs	r2, #0
 80065ce:	2300      	movs	r3, #0
 80065d0:	4650      	mov	r0, sl
 80065d2:	4659      	mov	r1, fp
 80065d4:	f7fa f9e8 	bl	80009a8 <__aeabi_dcmpeq>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d1a7      	bne.n	800652c <_strtod_l+0x55c>
 80065dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065de:	464a      	mov	r2, r9
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80065e4:	462b      	mov	r3, r5
 80065e6:	9805      	ldr	r0, [sp, #20]
 80065e8:	f7ff f8d8 	bl	800579c <__s2b>
 80065ec:	900b      	str	r0, [sp, #44]	@ 0x2c
 80065ee:	2800      	cmp	r0, #0
 80065f0:	f43f af09 	beq.w	8006406 <_strtod_l+0x436>
 80065f4:	2400      	movs	r4, #0
 80065f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	eba3 0308 	sub.w	r3, r3, r8
 8006600:	bfa8      	it	ge
 8006602:	2300      	movge	r3, #0
 8006604:	46a0      	mov	r8, r4
 8006606:	9312      	str	r3, [sp, #72]	@ 0x48
 8006608:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800660c:	9316      	str	r3, [sp, #88]	@ 0x58
 800660e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006610:	9805      	ldr	r0, [sp, #20]
 8006612:	6859      	ldr	r1, [r3, #4]
 8006614:	f7ff f81a 	bl	800564c <_Balloc>
 8006618:	4681      	mov	r9, r0
 800661a:	2800      	cmp	r0, #0
 800661c:	f43f aef7 	beq.w	800640e <_strtod_l+0x43e>
 8006620:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006622:	300c      	adds	r0, #12
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	f103 010c 	add.w	r1, r3, #12
 800662a:	3202      	adds	r2, #2
 800662c:	0092      	lsls	r2, r2, #2
 800662e:	f7fe f89e 	bl	800476e <memcpy>
 8006632:	ab1c      	add	r3, sp, #112	@ 0x70
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	4652      	mov	r2, sl
 800663c:	465b      	mov	r3, fp
 800663e:	9805      	ldr	r0, [sp, #20]
 8006640:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006644:	f7ff fbd6 	bl	8005df4 <__d2b>
 8006648:	901a      	str	r0, [sp, #104]	@ 0x68
 800664a:	2800      	cmp	r0, #0
 800664c:	f43f aedf 	beq.w	800640e <_strtod_l+0x43e>
 8006650:	2101      	movs	r1, #1
 8006652:	9805      	ldr	r0, [sp, #20]
 8006654:	f7ff f938 	bl	80058c8 <__i2b>
 8006658:	4680      	mov	r8, r0
 800665a:	b948      	cbnz	r0, 8006670 <_strtod_l+0x6a0>
 800665c:	f04f 0800 	mov.w	r8, #0
 8006660:	e6d5      	b.n	800640e <_strtod_l+0x43e>
 8006662:	f04f 32ff 	mov.w	r2, #4294967295
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	ea03 0a0a 	and.w	sl, r3, sl
 800666e:	e7ad      	b.n	80065cc <_strtod_l+0x5fc>
 8006670:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006672:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006674:	2d00      	cmp	r5, #0
 8006676:	bfab      	itete	ge
 8006678:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800667a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800667c:	18ef      	addge	r7, r5, r3
 800667e:	1b5e      	sublt	r6, r3, r5
 8006680:	9b08      	ldr	r3, [sp, #32]
 8006682:	bfa8      	it	ge
 8006684:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006686:	eba5 0503 	sub.w	r5, r5, r3
 800668a:	4415      	add	r5, r2
 800668c:	4b34      	ldr	r3, [pc, #208]	@ (8006760 <_strtod_l+0x790>)
 800668e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006692:	bfb8      	it	lt
 8006694:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006696:	429d      	cmp	r5, r3
 8006698:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800669c:	da50      	bge.n	8006740 <_strtod_l+0x770>
 800669e:	1b5b      	subs	r3, r3, r5
 80066a0:	2b1f      	cmp	r3, #31
 80066a2:	f04f 0101 	mov.w	r1, #1
 80066a6:	eba2 0203 	sub.w	r2, r2, r3
 80066aa:	dc3d      	bgt.n	8006728 <_strtod_l+0x758>
 80066ac:	fa01 f303 	lsl.w	r3, r1, r3
 80066b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80066b2:	2300      	movs	r3, #0
 80066b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80066b6:	18bd      	adds	r5, r7, r2
 80066b8:	9b08      	ldr	r3, [sp, #32]
 80066ba:	42af      	cmp	r7, r5
 80066bc:	4416      	add	r6, r2
 80066be:	441e      	add	r6, r3
 80066c0:	463b      	mov	r3, r7
 80066c2:	bfa8      	it	ge
 80066c4:	462b      	movge	r3, r5
 80066c6:	42b3      	cmp	r3, r6
 80066c8:	bfa8      	it	ge
 80066ca:	4633      	movge	r3, r6
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bfc2      	ittt	gt
 80066d0:	1aed      	subgt	r5, r5, r3
 80066d2:	1af6      	subgt	r6, r6, r3
 80066d4:	1aff      	subgt	r7, r7, r3
 80066d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dd16      	ble.n	800670a <_strtod_l+0x73a>
 80066dc:	4641      	mov	r1, r8
 80066de:	461a      	mov	r2, r3
 80066e0:	9805      	ldr	r0, [sp, #20]
 80066e2:	f7ff f9a9 	bl	8005a38 <__pow5mult>
 80066e6:	4680      	mov	r8, r0
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d0b7      	beq.n	800665c <_strtod_l+0x68c>
 80066ec:	4601      	mov	r1, r0
 80066ee:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80066f0:	9805      	ldr	r0, [sp, #20]
 80066f2:	f7ff f8ff 	bl	80058f4 <__multiply>
 80066f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80066f8:	2800      	cmp	r0, #0
 80066fa:	f43f ae88 	beq.w	800640e <_strtod_l+0x43e>
 80066fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006700:	9805      	ldr	r0, [sp, #20]
 8006702:	f7fe ffe3 	bl	80056cc <_Bfree>
 8006706:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006708:	931a      	str	r3, [sp, #104]	@ 0x68
 800670a:	2d00      	cmp	r5, #0
 800670c:	dc1d      	bgt.n	800674a <_strtod_l+0x77a>
 800670e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	dd27      	ble.n	8006764 <_strtod_l+0x794>
 8006714:	4649      	mov	r1, r9
 8006716:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006718:	9805      	ldr	r0, [sp, #20]
 800671a:	f7ff f98d 	bl	8005a38 <__pow5mult>
 800671e:	4681      	mov	r9, r0
 8006720:	bb00      	cbnz	r0, 8006764 <_strtod_l+0x794>
 8006722:	f04f 0900 	mov.w	r9, #0
 8006726:	e672      	b.n	800640e <_strtod_l+0x43e>
 8006728:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800672c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006730:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006734:	35e2      	adds	r5, #226	@ 0xe2
 8006736:	fa01 f305 	lsl.w	r3, r1, r5
 800673a:	9310      	str	r3, [sp, #64]	@ 0x40
 800673c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800673e:	e7ba      	b.n	80066b6 <_strtod_l+0x6e6>
 8006740:	2300      	movs	r3, #0
 8006742:	9310      	str	r3, [sp, #64]	@ 0x40
 8006744:	2301      	movs	r3, #1
 8006746:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006748:	e7b5      	b.n	80066b6 <_strtod_l+0x6e6>
 800674a:	462a      	mov	r2, r5
 800674c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800674e:	9805      	ldr	r0, [sp, #20]
 8006750:	f7ff f9cc 	bl	8005aec <__lshift>
 8006754:	901a      	str	r0, [sp, #104]	@ 0x68
 8006756:	2800      	cmp	r0, #0
 8006758:	d1d9      	bne.n	800670e <_strtod_l+0x73e>
 800675a:	e658      	b.n	800640e <_strtod_l+0x43e>
 800675c:	08008130 	.word	0x08008130
 8006760:	fffffc02 	.word	0xfffffc02
 8006764:	2e00      	cmp	r6, #0
 8006766:	dd07      	ble.n	8006778 <_strtod_l+0x7a8>
 8006768:	4649      	mov	r1, r9
 800676a:	4632      	mov	r2, r6
 800676c:	9805      	ldr	r0, [sp, #20]
 800676e:	f7ff f9bd 	bl	8005aec <__lshift>
 8006772:	4681      	mov	r9, r0
 8006774:	2800      	cmp	r0, #0
 8006776:	d0d4      	beq.n	8006722 <_strtod_l+0x752>
 8006778:	2f00      	cmp	r7, #0
 800677a:	dd08      	ble.n	800678e <_strtod_l+0x7be>
 800677c:	4641      	mov	r1, r8
 800677e:	463a      	mov	r2, r7
 8006780:	9805      	ldr	r0, [sp, #20]
 8006782:	f7ff f9b3 	bl	8005aec <__lshift>
 8006786:	4680      	mov	r8, r0
 8006788:	2800      	cmp	r0, #0
 800678a:	f43f ae40 	beq.w	800640e <_strtod_l+0x43e>
 800678e:	464a      	mov	r2, r9
 8006790:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006792:	9805      	ldr	r0, [sp, #20]
 8006794:	f7ff fa32 	bl	8005bfc <__mdiff>
 8006798:	4604      	mov	r4, r0
 800679a:	2800      	cmp	r0, #0
 800679c:	f43f ae37 	beq.w	800640e <_strtod_l+0x43e>
 80067a0:	68c3      	ldr	r3, [r0, #12]
 80067a2:	4641      	mov	r1, r8
 80067a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80067a6:	2300      	movs	r3, #0
 80067a8:	60c3      	str	r3, [r0, #12]
 80067aa:	f7ff fa0b 	bl	8005bc4 <__mcmp>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	da3d      	bge.n	800682e <_strtod_l+0x85e>
 80067b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067b4:	ea53 030a 	orrs.w	r3, r3, sl
 80067b8:	d163      	bne.n	8006882 <_strtod_l+0x8b2>
 80067ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d15f      	bne.n	8006882 <_strtod_l+0x8b2>
 80067c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067c6:	0d1b      	lsrs	r3, r3, #20
 80067c8:	051b      	lsls	r3, r3, #20
 80067ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80067ce:	d958      	bls.n	8006882 <_strtod_l+0x8b2>
 80067d0:	6963      	ldr	r3, [r4, #20]
 80067d2:	b913      	cbnz	r3, 80067da <_strtod_l+0x80a>
 80067d4:	6923      	ldr	r3, [r4, #16]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	dd53      	ble.n	8006882 <_strtod_l+0x8b2>
 80067da:	4621      	mov	r1, r4
 80067dc:	2201      	movs	r2, #1
 80067de:	9805      	ldr	r0, [sp, #20]
 80067e0:	f7ff f984 	bl	8005aec <__lshift>
 80067e4:	4641      	mov	r1, r8
 80067e6:	4604      	mov	r4, r0
 80067e8:	f7ff f9ec 	bl	8005bc4 <__mcmp>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	dd48      	ble.n	8006882 <_strtod_l+0x8b2>
 80067f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067f4:	9a08      	ldr	r2, [sp, #32]
 80067f6:	0d1b      	lsrs	r3, r3, #20
 80067f8:	051b      	lsls	r3, r3, #20
 80067fa:	2a00      	cmp	r2, #0
 80067fc:	d062      	beq.n	80068c4 <_strtod_l+0x8f4>
 80067fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006802:	d85f      	bhi.n	80068c4 <_strtod_l+0x8f4>
 8006804:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006808:	f67f ae94 	bls.w	8006534 <_strtod_l+0x564>
 800680c:	4650      	mov	r0, sl
 800680e:	4659      	mov	r1, fp
 8006810:	4ba3      	ldr	r3, [pc, #652]	@ (8006aa0 <_strtod_l+0xad0>)
 8006812:	2200      	movs	r2, #0
 8006814:	f7f9 fe60 	bl	80004d8 <__aeabi_dmul>
 8006818:	4ba2      	ldr	r3, [pc, #648]	@ (8006aa4 <_strtod_l+0xad4>)
 800681a:	4682      	mov	sl, r0
 800681c:	400b      	ands	r3, r1
 800681e:	468b      	mov	fp, r1
 8006820:	2b00      	cmp	r3, #0
 8006822:	f47f adff 	bne.w	8006424 <_strtod_l+0x454>
 8006826:	2322      	movs	r3, #34	@ 0x22
 8006828:	9a05      	ldr	r2, [sp, #20]
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	e5fa      	b.n	8006424 <_strtod_l+0x454>
 800682e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006832:	d165      	bne.n	8006900 <_strtod_l+0x930>
 8006834:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006836:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800683a:	b35a      	cbz	r2, 8006894 <_strtod_l+0x8c4>
 800683c:	4a9a      	ldr	r2, [pc, #616]	@ (8006aa8 <_strtod_l+0xad8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d12b      	bne.n	800689a <_strtod_l+0x8ca>
 8006842:	9b08      	ldr	r3, [sp, #32]
 8006844:	4651      	mov	r1, sl
 8006846:	b303      	cbz	r3, 800688a <_strtod_l+0x8ba>
 8006848:	465a      	mov	r2, fp
 800684a:	4b96      	ldr	r3, [pc, #600]	@ (8006aa4 <_strtod_l+0xad4>)
 800684c:	4013      	ands	r3, r2
 800684e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006852:	f04f 32ff 	mov.w	r2, #4294967295
 8006856:	d81b      	bhi.n	8006890 <_strtod_l+0x8c0>
 8006858:	0d1b      	lsrs	r3, r3, #20
 800685a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800685e:	fa02 f303 	lsl.w	r3, r2, r3
 8006862:	4299      	cmp	r1, r3
 8006864:	d119      	bne.n	800689a <_strtod_l+0x8ca>
 8006866:	4b91      	ldr	r3, [pc, #580]	@ (8006aac <_strtod_l+0xadc>)
 8006868:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800686a:	429a      	cmp	r2, r3
 800686c:	d102      	bne.n	8006874 <_strtod_l+0x8a4>
 800686e:	3101      	adds	r1, #1
 8006870:	f43f adcd 	beq.w	800640e <_strtod_l+0x43e>
 8006874:	f04f 0a00 	mov.w	sl, #0
 8006878:	4b8a      	ldr	r3, [pc, #552]	@ (8006aa4 <_strtod_l+0xad4>)
 800687a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800687c:	401a      	ands	r2, r3
 800687e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006882:	9b08      	ldr	r3, [sp, #32]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1c1      	bne.n	800680c <_strtod_l+0x83c>
 8006888:	e5cc      	b.n	8006424 <_strtod_l+0x454>
 800688a:	f04f 33ff 	mov.w	r3, #4294967295
 800688e:	e7e8      	b.n	8006862 <_strtod_l+0x892>
 8006890:	4613      	mov	r3, r2
 8006892:	e7e6      	b.n	8006862 <_strtod_l+0x892>
 8006894:	ea53 030a 	orrs.w	r3, r3, sl
 8006898:	d0aa      	beq.n	80067f0 <_strtod_l+0x820>
 800689a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800689c:	b1db      	cbz	r3, 80068d6 <_strtod_l+0x906>
 800689e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068a0:	4213      	tst	r3, r2
 80068a2:	d0ee      	beq.n	8006882 <_strtod_l+0x8b2>
 80068a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068a6:	4650      	mov	r0, sl
 80068a8:	4659      	mov	r1, fp
 80068aa:	9a08      	ldr	r2, [sp, #32]
 80068ac:	b1bb      	cbz	r3, 80068de <_strtod_l+0x90e>
 80068ae:	f7ff fb6d 	bl	8005f8c <sulp>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068ba:	f7f9 fc57 	bl	800016c <__adddf3>
 80068be:	4682      	mov	sl, r0
 80068c0:	468b      	mov	fp, r1
 80068c2:	e7de      	b.n	8006882 <_strtod_l+0x8b2>
 80068c4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80068c8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80068cc:	f04f 3aff 	mov.w	sl, #4294967295
 80068d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80068d4:	e7d5      	b.n	8006882 <_strtod_l+0x8b2>
 80068d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80068d8:	ea13 0f0a 	tst.w	r3, sl
 80068dc:	e7e1      	b.n	80068a2 <_strtod_l+0x8d2>
 80068de:	f7ff fb55 	bl	8005f8c <sulp>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068ea:	f7f9 fc3d 	bl	8000168 <__aeabi_dsub>
 80068ee:	2200      	movs	r2, #0
 80068f0:	2300      	movs	r3, #0
 80068f2:	4682      	mov	sl, r0
 80068f4:	468b      	mov	fp, r1
 80068f6:	f7fa f857 	bl	80009a8 <__aeabi_dcmpeq>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d0c1      	beq.n	8006882 <_strtod_l+0x8b2>
 80068fe:	e619      	b.n	8006534 <_strtod_l+0x564>
 8006900:	4641      	mov	r1, r8
 8006902:	4620      	mov	r0, r4
 8006904:	f7ff face 	bl	8005ea4 <__ratio>
 8006908:	2200      	movs	r2, #0
 800690a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800690e:	4606      	mov	r6, r0
 8006910:	460f      	mov	r7, r1
 8006912:	f7fa f85d 	bl	80009d0 <__aeabi_dcmple>
 8006916:	2800      	cmp	r0, #0
 8006918:	d06d      	beq.n	80069f6 <_strtod_l+0xa26>
 800691a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d178      	bne.n	8006a12 <_strtod_l+0xa42>
 8006920:	f1ba 0f00 	cmp.w	sl, #0
 8006924:	d156      	bne.n	80069d4 <_strtod_l+0xa04>
 8006926:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006928:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800692c:	2b00      	cmp	r3, #0
 800692e:	d158      	bne.n	80069e2 <_strtod_l+0xa12>
 8006930:	2200      	movs	r2, #0
 8006932:	4630      	mov	r0, r6
 8006934:	4639      	mov	r1, r7
 8006936:	4b5e      	ldr	r3, [pc, #376]	@ (8006ab0 <_strtod_l+0xae0>)
 8006938:	f7fa f840 	bl	80009bc <__aeabi_dcmplt>
 800693c:	2800      	cmp	r0, #0
 800693e:	d157      	bne.n	80069f0 <_strtod_l+0xa20>
 8006940:	4630      	mov	r0, r6
 8006942:	4639      	mov	r1, r7
 8006944:	2200      	movs	r2, #0
 8006946:	4b5b      	ldr	r3, [pc, #364]	@ (8006ab4 <_strtod_l+0xae4>)
 8006948:	f7f9 fdc6 	bl	80004d8 <__aeabi_dmul>
 800694c:	4606      	mov	r6, r0
 800694e:	460f      	mov	r7, r1
 8006950:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006954:	9606      	str	r6, [sp, #24]
 8006956:	9307      	str	r3, [sp, #28]
 8006958:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800695c:	4d51      	ldr	r5, [pc, #324]	@ (8006aa4 <_strtod_l+0xad4>)
 800695e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006962:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006964:	401d      	ands	r5, r3
 8006966:	4b54      	ldr	r3, [pc, #336]	@ (8006ab8 <_strtod_l+0xae8>)
 8006968:	429d      	cmp	r5, r3
 800696a:	f040 80ab 	bne.w	8006ac4 <_strtod_l+0xaf4>
 800696e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006970:	4650      	mov	r0, sl
 8006972:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006976:	4659      	mov	r1, fp
 8006978:	f7ff f9d4 	bl	8005d24 <__ulp>
 800697c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006980:	f7f9 fdaa 	bl	80004d8 <__aeabi_dmul>
 8006984:	4652      	mov	r2, sl
 8006986:	465b      	mov	r3, fp
 8006988:	f7f9 fbf0 	bl	800016c <__adddf3>
 800698c:	460b      	mov	r3, r1
 800698e:	4945      	ldr	r1, [pc, #276]	@ (8006aa4 <_strtod_l+0xad4>)
 8006990:	4a4a      	ldr	r2, [pc, #296]	@ (8006abc <_strtod_l+0xaec>)
 8006992:	4019      	ands	r1, r3
 8006994:	4291      	cmp	r1, r2
 8006996:	4682      	mov	sl, r0
 8006998:	d942      	bls.n	8006a20 <_strtod_l+0xa50>
 800699a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800699c:	4b43      	ldr	r3, [pc, #268]	@ (8006aac <_strtod_l+0xadc>)
 800699e:	429a      	cmp	r2, r3
 80069a0:	d103      	bne.n	80069aa <_strtod_l+0x9da>
 80069a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069a4:	3301      	adds	r3, #1
 80069a6:	f43f ad32 	beq.w	800640e <_strtod_l+0x43e>
 80069aa:	f04f 3aff 	mov.w	sl, #4294967295
 80069ae:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8006aac <_strtod_l+0xadc>
 80069b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069b4:	9805      	ldr	r0, [sp, #20]
 80069b6:	f7fe fe89 	bl	80056cc <_Bfree>
 80069ba:	4649      	mov	r1, r9
 80069bc:	9805      	ldr	r0, [sp, #20]
 80069be:	f7fe fe85 	bl	80056cc <_Bfree>
 80069c2:	4641      	mov	r1, r8
 80069c4:	9805      	ldr	r0, [sp, #20]
 80069c6:	f7fe fe81 	bl	80056cc <_Bfree>
 80069ca:	4621      	mov	r1, r4
 80069cc:	9805      	ldr	r0, [sp, #20]
 80069ce:	f7fe fe7d 	bl	80056cc <_Bfree>
 80069d2:	e61c      	b.n	800660e <_strtod_l+0x63e>
 80069d4:	f1ba 0f01 	cmp.w	sl, #1
 80069d8:	d103      	bne.n	80069e2 <_strtod_l+0xa12>
 80069da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f43f ada9 	beq.w	8006534 <_strtod_l+0x564>
 80069e2:	2200      	movs	r2, #0
 80069e4:	4b36      	ldr	r3, [pc, #216]	@ (8006ac0 <_strtod_l+0xaf0>)
 80069e6:	2600      	movs	r6, #0
 80069e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069ec:	4f30      	ldr	r7, [pc, #192]	@ (8006ab0 <_strtod_l+0xae0>)
 80069ee:	e7b3      	b.n	8006958 <_strtod_l+0x988>
 80069f0:	2600      	movs	r6, #0
 80069f2:	4f30      	ldr	r7, [pc, #192]	@ (8006ab4 <_strtod_l+0xae4>)
 80069f4:	e7ac      	b.n	8006950 <_strtod_l+0x980>
 80069f6:	4630      	mov	r0, r6
 80069f8:	4639      	mov	r1, r7
 80069fa:	4b2e      	ldr	r3, [pc, #184]	@ (8006ab4 <_strtod_l+0xae4>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	f7f9 fd6b 	bl	80004d8 <__aeabi_dmul>
 8006a02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a04:	4606      	mov	r6, r0
 8006a06:	460f      	mov	r7, r1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0a1      	beq.n	8006950 <_strtod_l+0x980>
 8006a0c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006a10:	e7a2      	b.n	8006958 <_strtod_l+0x988>
 8006a12:	2200      	movs	r2, #0
 8006a14:	4b26      	ldr	r3, [pc, #152]	@ (8006ab0 <_strtod_l+0xae0>)
 8006a16:	4616      	mov	r6, r2
 8006a18:	461f      	mov	r7, r3
 8006a1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a1e:	e79b      	b.n	8006958 <_strtod_l+0x988>
 8006a20:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006a24:	9b08      	ldr	r3, [sp, #32]
 8006a26:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1c1      	bne.n	80069b2 <_strtod_l+0x9e2>
 8006a2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006a32:	0d1b      	lsrs	r3, r3, #20
 8006a34:	051b      	lsls	r3, r3, #20
 8006a36:	429d      	cmp	r5, r3
 8006a38:	d1bb      	bne.n	80069b2 <_strtod_l+0x9e2>
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	f7fa f893 	bl	8000b68 <__aeabi_d2lz>
 8006a42:	f7f9 fd1b 	bl	800047c <__aeabi_l2d>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	4639      	mov	r1, r7
 8006a4e:	f7f9 fb8b 	bl	8000168 <__aeabi_dsub>
 8006a52:	460b      	mov	r3, r1
 8006a54:	4602      	mov	r2, r0
 8006a56:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006a5a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006a5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a60:	ea46 060a 	orr.w	r6, r6, sl
 8006a64:	431e      	orrs	r6, r3
 8006a66:	d06a      	beq.n	8006b3e <_strtod_l+0xb6e>
 8006a68:	a309      	add	r3, pc, #36	@ (adr r3, 8006a90 <_strtod_l+0xac0>)
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f7f9 ffa5 	bl	80009bc <__aeabi_dcmplt>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	f47f acd6 	bne.w	8006424 <_strtod_l+0x454>
 8006a78:	a307      	add	r3, pc, #28	@ (adr r3, 8006a98 <_strtod_l+0xac8>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a82:	f7f9 ffb9 	bl	80009f8 <__aeabi_dcmpgt>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d093      	beq.n	80069b2 <_strtod_l+0x9e2>
 8006a8a:	e4cb      	b.n	8006424 <_strtod_l+0x454>
 8006a8c:	f3af 8000 	nop.w
 8006a90:	94a03595 	.word	0x94a03595
 8006a94:	3fdfffff 	.word	0x3fdfffff
 8006a98:	35afe535 	.word	0x35afe535
 8006a9c:	3fe00000 	.word	0x3fe00000
 8006aa0:	39500000 	.word	0x39500000
 8006aa4:	7ff00000 	.word	0x7ff00000
 8006aa8:	000fffff 	.word	0x000fffff
 8006aac:	7fefffff 	.word	0x7fefffff
 8006ab0:	3ff00000 	.word	0x3ff00000
 8006ab4:	3fe00000 	.word	0x3fe00000
 8006ab8:	7fe00000 	.word	0x7fe00000
 8006abc:	7c9fffff 	.word	0x7c9fffff
 8006ac0:	bff00000 	.word	0xbff00000
 8006ac4:	9b08      	ldr	r3, [sp, #32]
 8006ac6:	b323      	cbz	r3, 8006b12 <_strtod_l+0xb42>
 8006ac8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006acc:	d821      	bhi.n	8006b12 <_strtod_l+0xb42>
 8006ace:	a328      	add	r3, pc, #160	@ (adr r3, 8006b70 <_strtod_l+0xba0>)
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	4639      	mov	r1, r7
 8006ad8:	f7f9 ff7a 	bl	80009d0 <__aeabi_dcmple>
 8006adc:	b1a0      	cbz	r0, 8006b08 <_strtod_l+0xb38>
 8006ade:	4639      	mov	r1, r7
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f7f9 ffd1 	bl	8000a88 <__aeabi_d2uiz>
 8006ae6:	2801      	cmp	r0, #1
 8006ae8:	bf38      	it	cc
 8006aea:	2001      	movcc	r0, #1
 8006aec:	f7f9 fc7a 	bl	80003e4 <__aeabi_ui2d>
 8006af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006af2:	4606      	mov	r6, r0
 8006af4:	460f      	mov	r7, r1
 8006af6:	b9fb      	cbnz	r3, 8006b38 <_strtod_l+0xb68>
 8006af8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006afc:	9014      	str	r0, [sp, #80]	@ 0x50
 8006afe:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006b04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006b08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006b0e:	1b5b      	subs	r3, r3, r5
 8006b10:	9311      	str	r3, [sp, #68]	@ 0x44
 8006b12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006b1a:	f7ff f903 	bl	8005d24 <__ulp>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4650      	mov	r0, sl
 8006b24:	4659      	mov	r1, fp
 8006b26:	f7f9 fcd7 	bl	80004d8 <__aeabi_dmul>
 8006b2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006b2e:	f7f9 fb1d 	bl	800016c <__adddf3>
 8006b32:	4682      	mov	sl, r0
 8006b34:	468b      	mov	fp, r1
 8006b36:	e775      	b.n	8006a24 <_strtod_l+0xa54>
 8006b38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006b3c:	e7e0      	b.n	8006b00 <_strtod_l+0xb30>
 8006b3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006b78 <_strtod_l+0xba8>)
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	f7f9 ff3a 	bl	80009bc <__aeabi_dcmplt>
 8006b48:	e79d      	b.n	8006a86 <_strtod_l+0xab6>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b50:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	f7ff ba79 	b.w	800604a <_strtod_l+0x7a>
 8006b58:	2a65      	cmp	r2, #101	@ 0x65
 8006b5a:	f43f ab72 	beq.w	8006242 <_strtod_l+0x272>
 8006b5e:	2a45      	cmp	r2, #69	@ 0x45
 8006b60:	f43f ab6f 	beq.w	8006242 <_strtod_l+0x272>
 8006b64:	2301      	movs	r3, #1
 8006b66:	f7ff bbaa 	b.w	80062be <_strtod_l+0x2ee>
 8006b6a:	bf00      	nop
 8006b6c:	f3af 8000 	nop.w
 8006b70:	ffc00000 	.word	0xffc00000
 8006b74:	41dfffff 	.word	0x41dfffff
 8006b78:	94a03595 	.word	0x94a03595
 8006b7c:	3fcfffff 	.word	0x3fcfffff

08006b80 <_strtod_r>:
 8006b80:	4b01      	ldr	r3, [pc, #4]	@ (8006b88 <_strtod_r+0x8>)
 8006b82:	f7ff ba25 	b.w	8005fd0 <_strtod_l>
 8006b86:	bf00      	nop
 8006b88:	2000006c 	.word	0x2000006c

08006b8c <_strtol_l.isra.0>:
 8006b8c:	2b24      	cmp	r3, #36	@ 0x24
 8006b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b92:	4686      	mov	lr, r0
 8006b94:	4690      	mov	r8, r2
 8006b96:	d801      	bhi.n	8006b9c <_strtol_l.isra.0+0x10>
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d106      	bne.n	8006baa <_strtol_l.isra.0+0x1e>
 8006b9c:	f7fd fdac 	bl	80046f8 <__errno>
 8006ba0:	2316      	movs	r3, #22
 8006ba2:	6003      	str	r3, [r0, #0]
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006baa:	460d      	mov	r5, r1
 8006bac:	4833      	ldr	r0, [pc, #204]	@ (8006c7c <_strtol_l.isra.0+0xf0>)
 8006bae:	462a      	mov	r2, r5
 8006bb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bb4:	5d06      	ldrb	r6, [r0, r4]
 8006bb6:	f016 0608 	ands.w	r6, r6, #8
 8006bba:	d1f8      	bne.n	8006bae <_strtol_l.isra.0+0x22>
 8006bbc:	2c2d      	cmp	r4, #45	@ 0x2d
 8006bbe:	d110      	bne.n	8006be2 <_strtol_l.isra.0+0x56>
 8006bc0:	2601      	movs	r6, #1
 8006bc2:	782c      	ldrb	r4, [r5, #0]
 8006bc4:	1c95      	adds	r5, r2, #2
 8006bc6:	f033 0210 	bics.w	r2, r3, #16
 8006bca:	d115      	bne.n	8006bf8 <_strtol_l.isra.0+0x6c>
 8006bcc:	2c30      	cmp	r4, #48	@ 0x30
 8006bce:	d10d      	bne.n	8006bec <_strtol_l.isra.0+0x60>
 8006bd0:	782a      	ldrb	r2, [r5, #0]
 8006bd2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006bd6:	2a58      	cmp	r2, #88	@ 0x58
 8006bd8:	d108      	bne.n	8006bec <_strtol_l.isra.0+0x60>
 8006bda:	786c      	ldrb	r4, [r5, #1]
 8006bdc:	3502      	adds	r5, #2
 8006bde:	2310      	movs	r3, #16
 8006be0:	e00a      	b.n	8006bf8 <_strtol_l.isra.0+0x6c>
 8006be2:	2c2b      	cmp	r4, #43	@ 0x2b
 8006be4:	bf04      	itt	eq
 8006be6:	782c      	ldrbeq	r4, [r5, #0]
 8006be8:	1c95      	addeq	r5, r2, #2
 8006bea:	e7ec      	b.n	8006bc6 <_strtol_l.isra.0+0x3a>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1f6      	bne.n	8006bde <_strtol_l.isra.0+0x52>
 8006bf0:	2c30      	cmp	r4, #48	@ 0x30
 8006bf2:	bf14      	ite	ne
 8006bf4:	230a      	movne	r3, #10
 8006bf6:	2308      	moveq	r3, #8
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006bfe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006c02:	fbbc f9f3 	udiv	r9, ip, r3
 8006c06:	4610      	mov	r0, r2
 8006c08:	fb03 ca19 	mls	sl, r3, r9, ip
 8006c0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006c10:	2f09      	cmp	r7, #9
 8006c12:	d80f      	bhi.n	8006c34 <_strtol_l.isra.0+0xa8>
 8006c14:	463c      	mov	r4, r7
 8006c16:	42a3      	cmp	r3, r4
 8006c18:	dd1b      	ble.n	8006c52 <_strtol_l.isra.0+0xc6>
 8006c1a:	1c57      	adds	r7, r2, #1
 8006c1c:	d007      	beq.n	8006c2e <_strtol_l.isra.0+0xa2>
 8006c1e:	4581      	cmp	r9, r0
 8006c20:	d314      	bcc.n	8006c4c <_strtol_l.isra.0+0xc0>
 8006c22:	d101      	bne.n	8006c28 <_strtol_l.isra.0+0x9c>
 8006c24:	45a2      	cmp	sl, r4
 8006c26:	db11      	blt.n	8006c4c <_strtol_l.isra.0+0xc0>
 8006c28:	2201      	movs	r2, #1
 8006c2a:	fb00 4003 	mla	r0, r0, r3, r4
 8006c2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c32:	e7eb      	b.n	8006c0c <_strtol_l.isra.0+0x80>
 8006c34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006c38:	2f19      	cmp	r7, #25
 8006c3a:	d801      	bhi.n	8006c40 <_strtol_l.isra.0+0xb4>
 8006c3c:	3c37      	subs	r4, #55	@ 0x37
 8006c3e:	e7ea      	b.n	8006c16 <_strtol_l.isra.0+0x8a>
 8006c40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006c44:	2f19      	cmp	r7, #25
 8006c46:	d804      	bhi.n	8006c52 <_strtol_l.isra.0+0xc6>
 8006c48:	3c57      	subs	r4, #87	@ 0x57
 8006c4a:	e7e4      	b.n	8006c16 <_strtol_l.isra.0+0x8a>
 8006c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c50:	e7ed      	b.n	8006c2e <_strtol_l.isra.0+0xa2>
 8006c52:	1c53      	adds	r3, r2, #1
 8006c54:	d108      	bne.n	8006c68 <_strtol_l.isra.0+0xdc>
 8006c56:	2322      	movs	r3, #34	@ 0x22
 8006c58:	4660      	mov	r0, ip
 8006c5a:	f8ce 3000 	str.w	r3, [lr]
 8006c5e:	f1b8 0f00 	cmp.w	r8, #0
 8006c62:	d0a0      	beq.n	8006ba6 <_strtol_l.isra.0+0x1a>
 8006c64:	1e69      	subs	r1, r5, #1
 8006c66:	e006      	b.n	8006c76 <_strtol_l.isra.0+0xea>
 8006c68:	b106      	cbz	r6, 8006c6c <_strtol_l.isra.0+0xe0>
 8006c6a:	4240      	negs	r0, r0
 8006c6c:	f1b8 0f00 	cmp.w	r8, #0
 8006c70:	d099      	beq.n	8006ba6 <_strtol_l.isra.0+0x1a>
 8006c72:	2a00      	cmp	r2, #0
 8006c74:	d1f6      	bne.n	8006c64 <_strtol_l.isra.0+0xd8>
 8006c76:	f8c8 1000 	str.w	r1, [r8]
 8006c7a:	e794      	b.n	8006ba6 <_strtol_l.isra.0+0x1a>
 8006c7c:	08008159 	.word	0x08008159

08006c80 <_strtol_r>:
 8006c80:	f7ff bf84 	b.w	8006b8c <_strtol_l.isra.0>

08006c84 <__ssputs_r>:
 8006c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	461f      	mov	r7, r3
 8006c8a:	688e      	ldr	r6, [r1, #8]
 8006c8c:	4682      	mov	sl, r0
 8006c8e:	42be      	cmp	r6, r7
 8006c90:	460c      	mov	r4, r1
 8006c92:	4690      	mov	r8, r2
 8006c94:	680b      	ldr	r3, [r1, #0]
 8006c96:	d82d      	bhi.n	8006cf4 <__ssputs_r+0x70>
 8006c98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ca0:	d026      	beq.n	8006cf0 <__ssputs_r+0x6c>
 8006ca2:	6965      	ldr	r5, [r4, #20]
 8006ca4:	6909      	ldr	r1, [r1, #16]
 8006ca6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006caa:	eba3 0901 	sub.w	r9, r3, r1
 8006cae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cb2:	1c7b      	adds	r3, r7, #1
 8006cb4:	444b      	add	r3, r9
 8006cb6:	106d      	asrs	r5, r5, #1
 8006cb8:	429d      	cmp	r5, r3
 8006cba:	bf38      	it	cc
 8006cbc:	461d      	movcc	r5, r3
 8006cbe:	0553      	lsls	r3, r2, #21
 8006cc0:	d527      	bpl.n	8006d12 <__ssputs_r+0x8e>
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	f7fe fc36 	bl	8005534 <_malloc_r>
 8006cc8:	4606      	mov	r6, r0
 8006cca:	b360      	cbz	r0, 8006d26 <__ssputs_r+0xa2>
 8006ccc:	464a      	mov	r2, r9
 8006cce:	6921      	ldr	r1, [r4, #16]
 8006cd0:	f7fd fd4d 	bl	800476e <memcpy>
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cde:	81a3      	strh	r3, [r4, #12]
 8006ce0:	6126      	str	r6, [r4, #16]
 8006ce2:	444e      	add	r6, r9
 8006ce4:	6026      	str	r6, [r4, #0]
 8006ce6:	463e      	mov	r6, r7
 8006ce8:	6165      	str	r5, [r4, #20]
 8006cea:	eba5 0509 	sub.w	r5, r5, r9
 8006cee:	60a5      	str	r5, [r4, #8]
 8006cf0:	42be      	cmp	r6, r7
 8006cf2:	d900      	bls.n	8006cf6 <__ssputs_r+0x72>
 8006cf4:	463e      	mov	r6, r7
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	6820      	ldr	r0, [r4, #0]
 8006cfc:	f000 f9c2 	bl	8007084 <memmove>
 8006d00:	2000      	movs	r0, #0
 8006d02:	68a3      	ldr	r3, [r4, #8]
 8006d04:	1b9b      	subs	r3, r3, r6
 8006d06:	60a3      	str	r3, [r4, #8]
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	4433      	add	r3, r6
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d12:	462a      	mov	r2, r5
 8006d14:	f000 fd75 	bl	8007802 <_realloc_r>
 8006d18:	4606      	mov	r6, r0
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d1e0      	bne.n	8006ce0 <__ssputs_r+0x5c>
 8006d1e:	4650      	mov	r0, sl
 8006d20:	6921      	ldr	r1, [r4, #16]
 8006d22:	f7fe fb95 	bl	8005450 <_free_r>
 8006d26:	230c      	movs	r3, #12
 8006d28:	f8ca 3000 	str.w	r3, [sl]
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d36:	81a3      	strh	r3, [r4, #12]
 8006d38:	e7e9      	b.n	8006d0e <__ssputs_r+0x8a>
	...

08006d3c <_svfiprintf_r>:
 8006d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d40:	4698      	mov	r8, r3
 8006d42:	898b      	ldrh	r3, [r1, #12]
 8006d44:	4607      	mov	r7, r0
 8006d46:	061b      	lsls	r3, r3, #24
 8006d48:	460d      	mov	r5, r1
 8006d4a:	4614      	mov	r4, r2
 8006d4c:	b09d      	sub	sp, #116	@ 0x74
 8006d4e:	d510      	bpl.n	8006d72 <_svfiprintf_r+0x36>
 8006d50:	690b      	ldr	r3, [r1, #16]
 8006d52:	b973      	cbnz	r3, 8006d72 <_svfiprintf_r+0x36>
 8006d54:	2140      	movs	r1, #64	@ 0x40
 8006d56:	f7fe fbed 	bl	8005534 <_malloc_r>
 8006d5a:	6028      	str	r0, [r5, #0]
 8006d5c:	6128      	str	r0, [r5, #16]
 8006d5e:	b930      	cbnz	r0, 8006d6e <_svfiprintf_r+0x32>
 8006d60:	230c      	movs	r3, #12
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	b01d      	add	sp, #116	@ 0x74
 8006d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6e:	2340      	movs	r3, #64	@ 0x40
 8006d70:	616b      	str	r3, [r5, #20]
 8006d72:	2300      	movs	r3, #0
 8006d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d76:	2320      	movs	r3, #32
 8006d78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d7c:	2330      	movs	r3, #48	@ 0x30
 8006d7e:	f04f 0901 	mov.w	r9, #1
 8006d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d86:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006f20 <_svfiprintf_r+0x1e4>
 8006d8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d8e:	4623      	mov	r3, r4
 8006d90:	469a      	mov	sl, r3
 8006d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d96:	b10a      	cbz	r2, 8006d9c <_svfiprintf_r+0x60>
 8006d98:	2a25      	cmp	r2, #37	@ 0x25
 8006d9a:	d1f9      	bne.n	8006d90 <_svfiprintf_r+0x54>
 8006d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8006da0:	d00b      	beq.n	8006dba <_svfiprintf_r+0x7e>
 8006da2:	465b      	mov	r3, fp
 8006da4:	4622      	mov	r2, r4
 8006da6:	4629      	mov	r1, r5
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7ff ff6b 	bl	8006c84 <__ssputs_r>
 8006dae:	3001      	adds	r0, #1
 8006db0:	f000 80a7 	beq.w	8006f02 <_svfiprintf_r+0x1c6>
 8006db4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006db6:	445a      	add	r2, fp
 8006db8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dba:	f89a 3000 	ldrb.w	r3, [sl]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 809f 	beq.w	8006f02 <_svfiprintf_r+0x1c6>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dce:	f10a 0a01 	add.w	sl, sl, #1
 8006dd2:	9304      	str	r3, [sp, #16]
 8006dd4:	9307      	str	r3, [sp, #28]
 8006dd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006dda:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ddc:	4654      	mov	r4, sl
 8006dde:	2205      	movs	r2, #5
 8006de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de4:	484e      	ldr	r0, [pc, #312]	@ (8006f20 <_svfiprintf_r+0x1e4>)
 8006de6:	f7fd fcb4 	bl	8004752 <memchr>
 8006dea:	9a04      	ldr	r2, [sp, #16]
 8006dec:	b9d8      	cbnz	r0, 8006e26 <_svfiprintf_r+0xea>
 8006dee:	06d0      	lsls	r0, r2, #27
 8006df0:	bf44      	itt	mi
 8006df2:	2320      	movmi	r3, #32
 8006df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006df8:	0711      	lsls	r1, r2, #28
 8006dfa:	bf44      	itt	mi
 8006dfc:	232b      	movmi	r3, #43	@ 0x2b
 8006dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e02:	f89a 3000 	ldrb.w	r3, [sl]
 8006e06:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e08:	d015      	beq.n	8006e36 <_svfiprintf_r+0xfa>
 8006e0a:	4654      	mov	r4, sl
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	f04f 0c0a 	mov.w	ip, #10
 8006e12:	9a07      	ldr	r2, [sp, #28]
 8006e14:	4621      	mov	r1, r4
 8006e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e1a:	3b30      	subs	r3, #48	@ 0x30
 8006e1c:	2b09      	cmp	r3, #9
 8006e1e:	d94b      	bls.n	8006eb8 <_svfiprintf_r+0x17c>
 8006e20:	b1b0      	cbz	r0, 8006e50 <_svfiprintf_r+0x114>
 8006e22:	9207      	str	r2, [sp, #28]
 8006e24:	e014      	b.n	8006e50 <_svfiprintf_r+0x114>
 8006e26:	eba0 0308 	sub.w	r3, r0, r8
 8006e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	46a2      	mov	sl, r4
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	e7d2      	b.n	8006ddc <_svfiprintf_r+0xa0>
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	1d19      	adds	r1, r3, #4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	9103      	str	r1, [sp, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	bfbb      	ittet	lt
 8006e42:	425b      	neglt	r3, r3
 8006e44:	f042 0202 	orrlt.w	r2, r2, #2
 8006e48:	9307      	strge	r3, [sp, #28]
 8006e4a:	9307      	strlt	r3, [sp, #28]
 8006e4c:	bfb8      	it	lt
 8006e4e:	9204      	strlt	r2, [sp, #16]
 8006e50:	7823      	ldrb	r3, [r4, #0]
 8006e52:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e54:	d10a      	bne.n	8006e6c <_svfiprintf_r+0x130>
 8006e56:	7863      	ldrb	r3, [r4, #1]
 8006e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e5a:	d132      	bne.n	8006ec2 <_svfiprintf_r+0x186>
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	3402      	adds	r4, #2
 8006e60:	1d1a      	adds	r2, r3, #4
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	9203      	str	r2, [sp, #12]
 8006e66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e6a:	9305      	str	r3, [sp, #20]
 8006e6c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006f24 <_svfiprintf_r+0x1e8>
 8006e70:	2203      	movs	r2, #3
 8006e72:	4650      	mov	r0, sl
 8006e74:	7821      	ldrb	r1, [r4, #0]
 8006e76:	f7fd fc6c 	bl	8004752 <memchr>
 8006e7a:	b138      	cbz	r0, 8006e8c <_svfiprintf_r+0x150>
 8006e7c:	2240      	movs	r2, #64	@ 0x40
 8006e7e:	9b04      	ldr	r3, [sp, #16]
 8006e80:	eba0 000a 	sub.w	r0, r0, sl
 8006e84:	4082      	lsls	r2, r0
 8006e86:	4313      	orrs	r3, r2
 8006e88:	3401      	adds	r4, #1
 8006e8a:	9304      	str	r3, [sp, #16]
 8006e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e90:	2206      	movs	r2, #6
 8006e92:	4825      	ldr	r0, [pc, #148]	@ (8006f28 <_svfiprintf_r+0x1ec>)
 8006e94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e98:	f7fd fc5b 	bl	8004752 <memchr>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d036      	beq.n	8006f0e <_svfiprintf_r+0x1d2>
 8006ea0:	4b22      	ldr	r3, [pc, #136]	@ (8006f2c <_svfiprintf_r+0x1f0>)
 8006ea2:	bb1b      	cbnz	r3, 8006eec <_svfiprintf_r+0x1b0>
 8006ea4:	9b03      	ldr	r3, [sp, #12]
 8006ea6:	3307      	adds	r3, #7
 8006ea8:	f023 0307 	bic.w	r3, r3, #7
 8006eac:	3308      	adds	r3, #8
 8006eae:	9303      	str	r3, [sp, #12]
 8006eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb2:	4433      	add	r3, r6
 8006eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eb6:	e76a      	b.n	8006d8e <_svfiprintf_r+0x52>
 8006eb8:	460c      	mov	r4, r1
 8006eba:	2001      	movs	r0, #1
 8006ebc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ec0:	e7a8      	b.n	8006e14 <_svfiprintf_r+0xd8>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f04f 0c0a 	mov.w	ip, #10
 8006ec8:	4619      	mov	r1, r3
 8006eca:	3401      	adds	r4, #1
 8006ecc:	9305      	str	r3, [sp, #20]
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ed4:	3a30      	subs	r2, #48	@ 0x30
 8006ed6:	2a09      	cmp	r2, #9
 8006ed8:	d903      	bls.n	8006ee2 <_svfiprintf_r+0x1a6>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0c6      	beq.n	8006e6c <_svfiprintf_r+0x130>
 8006ede:	9105      	str	r1, [sp, #20]
 8006ee0:	e7c4      	b.n	8006e6c <_svfiprintf_r+0x130>
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eea:	e7f0      	b.n	8006ece <_svfiprintf_r+0x192>
 8006eec:	ab03      	add	r3, sp, #12
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	462a      	mov	r2, r5
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8006f30 <_svfiprintf_r+0x1f4>)
 8006ef6:	a904      	add	r1, sp, #16
 8006ef8:	f7fc fcbe 	bl	8003878 <_printf_float>
 8006efc:	1c42      	adds	r2, r0, #1
 8006efe:	4606      	mov	r6, r0
 8006f00:	d1d6      	bne.n	8006eb0 <_svfiprintf_r+0x174>
 8006f02:	89ab      	ldrh	r3, [r5, #12]
 8006f04:	065b      	lsls	r3, r3, #25
 8006f06:	f53f af2d 	bmi.w	8006d64 <_svfiprintf_r+0x28>
 8006f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f0c:	e72c      	b.n	8006d68 <_svfiprintf_r+0x2c>
 8006f0e:	ab03      	add	r3, sp, #12
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	462a      	mov	r2, r5
 8006f14:	4638      	mov	r0, r7
 8006f16:	4b06      	ldr	r3, [pc, #24]	@ (8006f30 <_svfiprintf_r+0x1f4>)
 8006f18:	a904      	add	r1, sp, #16
 8006f1a:	f7fc ff4b 	bl	8003db4 <_printf_i>
 8006f1e:	e7ed      	b.n	8006efc <_svfiprintf_r+0x1c0>
 8006f20:	08007f53 	.word	0x08007f53
 8006f24:	08007f59 	.word	0x08007f59
 8006f28:	08007f5d 	.word	0x08007f5d
 8006f2c:	08003879 	.word	0x08003879
 8006f30:	08006c85 	.word	0x08006c85

08006f34 <__sflush_r>:
 8006f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	0716      	lsls	r6, r2, #28
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	d454      	bmi.n	8006fec <__sflush_r+0xb8>
 8006f42:	684b      	ldr	r3, [r1, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	dc02      	bgt.n	8006f4e <__sflush_r+0x1a>
 8006f48:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	dd48      	ble.n	8006fe0 <__sflush_r+0xac>
 8006f4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f50:	2e00      	cmp	r6, #0
 8006f52:	d045      	beq.n	8006fe0 <__sflush_r+0xac>
 8006f54:	2300      	movs	r3, #0
 8006f56:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f5a:	682f      	ldr	r7, [r5, #0]
 8006f5c:	6a21      	ldr	r1, [r4, #32]
 8006f5e:	602b      	str	r3, [r5, #0]
 8006f60:	d030      	beq.n	8006fc4 <__sflush_r+0x90>
 8006f62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	0759      	lsls	r1, r3, #29
 8006f68:	d505      	bpl.n	8006f76 <__sflush_r+0x42>
 8006f6a:	6863      	ldr	r3, [r4, #4]
 8006f6c:	1ad2      	subs	r2, r2, r3
 8006f6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f70:	b10b      	cbz	r3, 8006f76 <__sflush_r+0x42>
 8006f72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f74:	1ad2      	subs	r2, r2, r3
 8006f76:	2300      	movs	r3, #0
 8006f78:	4628      	mov	r0, r5
 8006f7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f7c:	6a21      	ldr	r1, [r4, #32]
 8006f7e:	47b0      	blx	r6
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	d106      	bne.n	8006f94 <__sflush_r+0x60>
 8006f86:	6829      	ldr	r1, [r5, #0]
 8006f88:	291d      	cmp	r1, #29
 8006f8a:	d82b      	bhi.n	8006fe4 <__sflush_r+0xb0>
 8006f8c:	4a28      	ldr	r2, [pc, #160]	@ (8007030 <__sflush_r+0xfc>)
 8006f8e:	40ca      	lsrs	r2, r1
 8006f90:	07d6      	lsls	r6, r2, #31
 8006f92:	d527      	bpl.n	8006fe4 <__sflush_r+0xb0>
 8006f94:	2200      	movs	r2, #0
 8006f96:	6062      	str	r2, [r4, #4]
 8006f98:	6922      	ldr	r2, [r4, #16]
 8006f9a:	04d9      	lsls	r1, r3, #19
 8006f9c:	6022      	str	r2, [r4, #0]
 8006f9e:	d504      	bpl.n	8006faa <__sflush_r+0x76>
 8006fa0:	1c42      	adds	r2, r0, #1
 8006fa2:	d101      	bne.n	8006fa8 <__sflush_r+0x74>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	b903      	cbnz	r3, 8006faa <__sflush_r+0x76>
 8006fa8:	6560      	str	r0, [r4, #84]	@ 0x54
 8006faa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fac:	602f      	str	r7, [r5, #0]
 8006fae:	b1b9      	cbz	r1, 8006fe0 <__sflush_r+0xac>
 8006fb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fb4:	4299      	cmp	r1, r3
 8006fb6:	d002      	beq.n	8006fbe <__sflush_r+0x8a>
 8006fb8:	4628      	mov	r0, r5
 8006fba:	f7fe fa49 	bl	8005450 <_free_r>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fc2:	e00d      	b.n	8006fe0 <__sflush_r+0xac>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b0      	blx	r6
 8006fca:	4602      	mov	r2, r0
 8006fcc:	1c50      	adds	r0, r2, #1
 8006fce:	d1c9      	bne.n	8006f64 <__sflush_r+0x30>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0c6      	beq.n	8006f64 <__sflush_r+0x30>
 8006fd6:	2b1d      	cmp	r3, #29
 8006fd8:	d001      	beq.n	8006fde <__sflush_r+0xaa>
 8006fda:	2b16      	cmp	r3, #22
 8006fdc:	d11d      	bne.n	800701a <__sflush_r+0xe6>
 8006fde:	602f      	str	r7, [r5, #0]
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	e021      	b.n	8007028 <__sflush_r+0xf4>
 8006fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe8:	b21b      	sxth	r3, r3
 8006fea:	e01a      	b.n	8007022 <__sflush_r+0xee>
 8006fec:	690f      	ldr	r7, [r1, #16]
 8006fee:	2f00      	cmp	r7, #0
 8006ff0:	d0f6      	beq.n	8006fe0 <__sflush_r+0xac>
 8006ff2:	0793      	lsls	r3, r2, #30
 8006ff4:	bf18      	it	ne
 8006ff6:	2300      	movne	r3, #0
 8006ff8:	680e      	ldr	r6, [r1, #0]
 8006ffa:	bf08      	it	eq
 8006ffc:	694b      	ldreq	r3, [r1, #20]
 8006ffe:	1bf6      	subs	r6, r6, r7
 8007000:	600f      	str	r7, [r1, #0]
 8007002:	608b      	str	r3, [r1, #8]
 8007004:	2e00      	cmp	r6, #0
 8007006:	ddeb      	ble.n	8006fe0 <__sflush_r+0xac>
 8007008:	4633      	mov	r3, r6
 800700a:	463a      	mov	r2, r7
 800700c:	4628      	mov	r0, r5
 800700e:	6a21      	ldr	r1, [r4, #32]
 8007010:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007014:	47e0      	blx	ip
 8007016:	2800      	cmp	r0, #0
 8007018:	dc07      	bgt.n	800702a <__sflush_r+0xf6>
 800701a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800701e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007022:	f04f 30ff 	mov.w	r0, #4294967295
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800702a:	4407      	add	r7, r0
 800702c:	1a36      	subs	r6, r6, r0
 800702e:	e7e9      	b.n	8007004 <__sflush_r+0xd0>
 8007030:	20400001 	.word	0x20400001

08007034 <_fflush_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	690b      	ldr	r3, [r1, #16]
 8007038:	4605      	mov	r5, r0
 800703a:	460c      	mov	r4, r1
 800703c:	b913      	cbnz	r3, 8007044 <_fflush_r+0x10>
 800703e:	2500      	movs	r5, #0
 8007040:	4628      	mov	r0, r5
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	b118      	cbz	r0, 800704e <_fflush_r+0x1a>
 8007046:	6a03      	ldr	r3, [r0, #32]
 8007048:	b90b      	cbnz	r3, 800704e <_fflush_r+0x1a>
 800704a:	f7fd fa67 	bl	800451c <__sinit>
 800704e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0f3      	beq.n	800703e <_fflush_r+0xa>
 8007056:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007058:	07d0      	lsls	r0, r2, #31
 800705a:	d404      	bmi.n	8007066 <_fflush_r+0x32>
 800705c:	0599      	lsls	r1, r3, #22
 800705e:	d402      	bmi.n	8007066 <_fflush_r+0x32>
 8007060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007062:	f7fd fb74 	bl	800474e <__retarget_lock_acquire_recursive>
 8007066:	4628      	mov	r0, r5
 8007068:	4621      	mov	r1, r4
 800706a:	f7ff ff63 	bl	8006f34 <__sflush_r>
 800706e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007070:	4605      	mov	r5, r0
 8007072:	07da      	lsls	r2, r3, #31
 8007074:	d4e4      	bmi.n	8007040 <_fflush_r+0xc>
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	059b      	lsls	r3, r3, #22
 800707a:	d4e1      	bmi.n	8007040 <_fflush_r+0xc>
 800707c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800707e:	f7fd fb67 	bl	8004750 <__retarget_lock_release_recursive>
 8007082:	e7dd      	b.n	8007040 <_fflush_r+0xc>

08007084 <memmove>:
 8007084:	4288      	cmp	r0, r1
 8007086:	b510      	push	{r4, lr}
 8007088:	eb01 0402 	add.w	r4, r1, r2
 800708c:	d902      	bls.n	8007094 <memmove+0x10>
 800708e:	4284      	cmp	r4, r0
 8007090:	4623      	mov	r3, r4
 8007092:	d807      	bhi.n	80070a4 <memmove+0x20>
 8007094:	1e43      	subs	r3, r0, #1
 8007096:	42a1      	cmp	r1, r4
 8007098:	d008      	beq.n	80070ac <memmove+0x28>
 800709a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800709e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070a2:	e7f8      	b.n	8007096 <memmove+0x12>
 80070a4:	4601      	mov	r1, r0
 80070a6:	4402      	add	r2, r0
 80070a8:	428a      	cmp	r2, r1
 80070aa:	d100      	bne.n	80070ae <memmove+0x2a>
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070b6:	e7f7      	b.n	80070a8 <memmove+0x24>

080070b8 <strncmp>:
 80070b8:	b510      	push	{r4, lr}
 80070ba:	b16a      	cbz	r2, 80070d8 <strncmp+0x20>
 80070bc:	3901      	subs	r1, #1
 80070be:	1884      	adds	r4, r0, r2
 80070c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d103      	bne.n	80070d4 <strncmp+0x1c>
 80070cc:	42a0      	cmp	r0, r4
 80070ce:	d001      	beq.n	80070d4 <strncmp+0x1c>
 80070d0:	2a00      	cmp	r2, #0
 80070d2:	d1f5      	bne.n	80070c0 <strncmp+0x8>
 80070d4:	1ad0      	subs	r0, r2, r3
 80070d6:	bd10      	pop	{r4, pc}
 80070d8:	4610      	mov	r0, r2
 80070da:	e7fc      	b.n	80070d6 <strncmp+0x1e>

080070dc <_sbrk_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	2300      	movs	r3, #0
 80070e0:	4d05      	ldr	r5, [pc, #20]	@ (80070f8 <_sbrk_r+0x1c>)
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	f7f9 ffb8 	bl	800105c <_sbrk>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_sbrk_r+0x1a>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_sbrk_r+0x1a>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	2000041c 	.word	0x2000041c

080070fc <nan>:
 80070fc:	2000      	movs	r0, #0
 80070fe:	4901      	ldr	r1, [pc, #4]	@ (8007104 <nan+0x8>)
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	7ff80000 	.word	0x7ff80000

08007108 <__assert_func>:
 8007108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800710a:	4614      	mov	r4, r2
 800710c:	461a      	mov	r2, r3
 800710e:	4b09      	ldr	r3, [pc, #36]	@ (8007134 <__assert_func+0x2c>)
 8007110:	4605      	mov	r5, r0
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68d8      	ldr	r0, [r3, #12]
 8007116:	b14c      	cbz	r4, 800712c <__assert_func+0x24>
 8007118:	4b07      	ldr	r3, [pc, #28]	@ (8007138 <__assert_func+0x30>)
 800711a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800711e:	9100      	str	r1, [sp, #0]
 8007120:	462b      	mov	r3, r5
 8007122:	4906      	ldr	r1, [pc, #24]	@ (800713c <__assert_func+0x34>)
 8007124:	f000 fba8 	bl	8007878 <fiprintf>
 8007128:	f000 fbb8 	bl	800789c <abort>
 800712c:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <__assert_func+0x38>)
 800712e:	461c      	mov	r4, r3
 8007130:	e7f3      	b.n	800711a <__assert_func+0x12>
 8007132:	bf00      	nop
 8007134:	2000001c 	.word	0x2000001c
 8007138:	08007f6c 	.word	0x08007f6c
 800713c:	08007f79 	.word	0x08007f79
 8007140:	08007fa7 	.word	0x08007fa7

08007144 <_calloc_r>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	fba1 5402 	umull	r5, r4, r1, r2
 800714a:	b934      	cbnz	r4, 800715a <_calloc_r+0x16>
 800714c:	4629      	mov	r1, r5
 800714e:	f7fe f9f1 	bl	8005534 <_malloc_r>
 8007152:	4606      	mov	r6, r0
 8007154:	b928      	cbnz	r0, 8007162 <_calloc_r+0x1e>
 8007156:	4630      	mov	r0, r6
 8007158:	bd70      	pop	{r4, r5, r6, pc}
 800715a:	220c      	movs	r2, #12
 800715c:	2600      	movs	r6, #0
 800715e:	6002      	str	r2, [r0, #0]
 8007160:	e7f9      	b.n	8007156 <_calloc_r+0x12>
 8007162:	462a      	mov	r2, r5
 8007164:	4621      	mov	r1, r4
 8007166:	f7fd fa74 	bl	8004652 <memset>
 800716a:	e7f4      	b.n	8007156 <_calloc_r+0x12>

0800716c <rshift>:
 800716c:	6903      	ldr	r3, [r0, #16]
 800716e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007172:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007176:	f100 0414 	add.w	r4, r0, #20
 800717a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800717e:	dd46      	ble.n	800720e <rshift+0xa2>
 8007180:	f011 011f 	ands.w	r1, r1, #31
 8007184:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007188:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800718c:	d10c      	bne.n	80071a8 <rshift+0x3c>
 800718e:	4629      	mov	r1, r5
 8007190:	f100 0710 	add.w	r7, r0, #16
 8007194:	42b1      	cmp	r1, r6
 8007196:	d335      	bcc.n	8007204 <rshift+0x98>
 8007198:	1a9b      	subs	r3, r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	1eea      	subs	r2, r5, #3
 800719e:	4296      	cmp	r6, r2
 80071a0:	bf38      	it	cc
 80071a2:	2300      	movcc	r3, #0
 80071a4:	4423      	add	r3, r4
 80071a6:	e015      	b.n	80071d4 <rshift+0x68>
 80071a8:	46a1      	mov	r9, r4
 80071aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80071ae:	f1c1 0820 	rsb	r8, r1, #32
 80071b2:	40cf      	lsrs	r7, r1
 80071b4:	f105 0e04 	add.w	lr, r5, #4
 80071b8:	4576      	cmp	r6, lr
 80071ba:	46f4      	mov	ip, lr
 80071bc:	d816      	bhi.n	80071ec <rshift+0x80>
 80071be:	1a9a      	subs	r2, r3, r2
 80071c0:	0092      	lsls	r2, r2, #2
 80071c2:	3a04      	subs	r2, #4
 80071c4:	3501      	adds	r5, #1
 80071c6:	42ae      	cmp	r6, r5
 80071c8:	bf38      	it	cc
 80071ca:	2200      	movcc	r2, #0
 80071cc:	18a3      	adds	r3, r4, r2
 80071ce:	50a7      	str	r7, [r4, r2]
 80071d0:	b107      	cbz	r7, 80071d4 <rshift+0x68>
 80071d2:	3304      	adds	r3, #4
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	eba3 0204 	sub.w	r2, r3, r4
 80071da:	bf08      	it	eq
 80071dc:	2300      	moveq	r3, #0
 80071de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80071e2:	6102      	str	r2, [r0, #16]
 80071e4:	bf08      	it	eq
 80071e6:	6143      	streq	r3, [r0, #20]
 80071e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071ec:	f8dc c000 	ldr.w	ip, [ip]
 80071f0:	fa0c fc08 	lsl.w	ip, ip, r8
 80071f4:	ea4c 0707 	orr.w	r7, ip, r7
 80071f8:	f849 7b04 	str.w	r7, [r9], #4
 80071fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007200:	40cf      	lsrs	r7, r1
 8007202:	e7d9      	b.n	80071b8 <rshift+0x4c>
 8007204:	f851 cb04 	ldr.w	ip, [r1], #4
 8007208:	f847 cf04 	str.w	ip, [r7, #4]!
 800720c:	e7c2      	b.n	8007194 <rshift+0x28>
 800720e:	4623      	mov	r3, r4
 8007210:	e7e0      	b.n	80071d4 <rshift+0x68>

08007212 <__hexdig_fun>:
 8007212:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007216:	2b09      	cmp	r3, #9
 8007218:	d802      	bhi.n	8007220 <__hexdig_fun+0xe>
 800721a:	3820      	subs	r0, #32
 800721c:	b2c0      	uxtb	r0, r0
 800721e:	4770      	bx	lr
 8007220:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007224:	2b05      	cmp	r3, #5
 8007226:	d801      	bhi.n	800722c <__hexdig_fun+0x1a>
 8007228:	3847      	subs	r0, #71	@ 0x47
 800722a:	e7f7      	b.n	800721c <__hexdig_fun+0xa>
 800722c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007230:	2b05      	cmp	r3, #5
 8007232:	d801      	bhi.n	8007238 <__hexdig_fun+0x26>
 8007234:	3827      	subs	r0, #39	@ 0x27
 8007236:	e7f1      	b.n	800721c <__hexdig_fun+0xa>
 8007238:	2000      	movs	r0, #0
 800723a:	4770      	bx	lr

0800723c <__gethex>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	468a      	mov	sl, r1
 8007242:	4690      	mov	r8, r2
 8007244:	b085      	sub	sp, #20
 8007246:	9302      	str	r3, [sp, #8]
 8007248:	680b      	ldr	r3, [r1, #0]
 800724a:	9001      	str	r0, [sp, #4]
 800724c:	1c9c      	adds	r4, r3, #2
 800724e:	46a1      	mov	r9, r4
 8007250:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007254:	2830      	cmp	r0, #48	@ 0x30
 8007256:	d0fa      	beq.n	800724e <__gethex+0x12>
 8007258:	eba9 0303 	sub.w	r3, r9, r3
 800725c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007260:	f7ff ffd7 	bl	8007212 <__hexdig_fun>
 8007264:	4605      	mov	r5, r0
 8007266:	2800      	cmp	r0, #0
 8007268:	d168      	bne.n	800733c <__gethex+0x100>
 800726a:	2201      	movs	r2, #1
 800726c:	4648      	mov	r0, r9
 800726e:	499f      	ldr	r1, [pc, #636]	@ (80074ec <__gethex+0x2b0>)
 8007270:	f7ff ff22 	bl	80070b8 <strncmp>
 8007274:	4607      	mov	r7, r0
 8007276:	2800      	cmp	r0, #0
 8007278:	d167      	bne.n	800734a <__gethex+0x10e>
 800727a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800727e:	4626      	mov	r6, r4
 8007280:	f7ff ffc7 	bl	8007212 <__hexdig_fun>
 8007284:	2800      	cmp	r0, #0
 8007286:	d062      	beq.n	800734e <__gethex+0x112>
 8007288:	4623      	mov	r3, r4
 800728a:	7818      	ldrb	r0, [r3, #0]
 800728c:	4699      	mov	r9, r3
 800728e:	2830      	cmp	r0, #48	@ 0x30
 8007290:	f103 0301 	add.w	r3, r3, #1
 8007294:	d0f9      	beq.n	800728a <__gethex+0x4e>
 8007296:	f7ff ffbc 	bl	8007212 <__hexdig_fun>
 800729a:	fab0 f580 	clz	r5, r0
 800729e:	f04f 0b01 	mov.w	fp, #1
 80072a2:	096d      	lsrs	r5, r5, #5
 80072a4:	464a      	mov	r2, r9
 80072a6:	4616      	mov	r6, r2
 80072a8:	7830      	ldrb	r0, [r6, #0]
 80072aa:	3201      	adds	r2, #1
 80072ac:	f7ff ffb1 	bl	8007212 <__hexdig_fun>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d1f8      	bne.n	80072a6 <__gethex+0x6a>
 80072b4:	2201      	movs	r2, #1
 80072b6:	4630      	mov	r0, r6
 80072b8:	498c      	ldr	r1, [pc, #560]	@ (80074ec <__gethex+0x2b0>)
 80072ba:	f7ff fefd 	bl	80070b8 <strncmp>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d13f      	bne.n	8007342 <__gethex+0x106>
 80072c2:	b944      	cbnz	r4, 80072d6 <__gethex+0x9a>
 80072c4:	1c74      	adds	r4, r6, #1
 80072c6:	4622      	mov	r2, r4
 80072c8:	4616      	mov	r6, r2
 80072ca:	7830      	ldrb	r0, [r6, #0]
 80072cc:	3201      	adds	r2, #1
 80072ce:	f7ff ffa0 	bl	8007212 <__hexdig_fun>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d1f8      	bne.n	80072c8 <__gethex+0x8c>
 80072d6:	1ba4      	subs	r4, r4, r6
 80072d8:	00a7      	lsls	r7, r4, #2
 80072da:	7833      	ldrb	r3, [r6, #0]
 80072dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80072e0:	2b50      	cmp	r3, #80	@ 0x50
 80072e2:	d13e      	bne.n	8007362 <__gethex+0x126>
 80072e4:	7873      	ldrb	r3, [r6, #1]
 80072e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80072e8:	d033      	beq.n	8007352 <__gethex+0x116>
 80072ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80072ec:	d034      	beq.n	8007358 <__gethex+0x11c>
 80072ee:	2400      	movs	r4, #0
 80072f0:	1c71      	adds	r1, r6, #1
 80072f2:	7808      	ldrb	r0, [r1, #0]
 80072f4:	f7ff ff8d 	bl	8007212 <__hexdig_fun>
 80072f8:	1e43      	subs	r3, r0, #1
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b18      	cmp	r3, #24
 80072fe:	d830      	bhi.n	8007362 <__gethex+0x126>
 8007300:	f1a0 0210 	sub.w	r2, r0, #16
 8007304:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007308:	f7ff ff83 	bl	8007212 <__hexdig_fun>
 800730c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007310:	fa5f fc8c 	uxtb.w	ip, ip
 8007314:	f1bc 0f18 	cmp.w	ip, #24
 8007318:	f04f 030a 	mov.w	r3, #10
 800731c:	d91e      	bls.n	800735c <__gethex+0x120>
 800731e:	b104      	cbz	r4, 8007322 <__gethex+0xe6>
 8007320:	4252      	negs	r2, r2
 8007322:	4417      	add	r7, r2
 8007324:	f8ca 1000 	str.w	r1, [sl]
 8007328:	b1ed      	cbz	r5, 8007366 <__gethex+0x12a>
 800732a:	f1bb 0f00 	cmp.w	fp, #0
 800732e:	bf0c      	ite	eq
 8007330:	2506      	moveq	r5, #6
 8007332:	2500      	movne	r5, #0
 8007334:	4628      	mov	r0, r5
 8007336:	b005      	add	sp, #20
 8007338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733c:	2500      	movs	r5, #0
 800733e:	462c      	mov	r4, r5
 8007340:	e7b0      	b.n	80072a4 <__gethex+0x68>
 8007342:	2c00      	cmp	r4, #0
 8007344:	d1c7      	bne.n	80072d6 <__gethex+0x9a>
 8007346:	4627      	mov	r7, r4
 8007348:	e7c7      	b.n	80072da <__gethex+0x9e>
 800734a:	464e      	mov	r6, r9
 800734c:	462f      	mov	r7, r5
 800734e:	2501      	movs	r5, #1
 8007350:	e7c3      	b.n	80072da <__gethex+0x9e>
 8007352:	2400      	movs	r4, #0
 8007354:	1cb1      	adds	r1, r6, #2
 8007356:	e7cc      	b.n	80072f2 <__gethex+0xb6>
 8007358:	2401      	movs	r4, #1
 800735a:	e7fb      	b.n	8007354 <__gethex+0x118>
 800735c:	fb03 0002 	mla	r0, r3, r2, r0
 8007360:	e7ce      	b.n	8007300 <__gethex+0xc4>
 8007362:	4631      	mov	r1, r6
 8007364:	e7de      	b.n	8007324 <__gethex+0xe8>
 8007366:	4629      	mov	r1, r5
 8007368:	eba6 0309 	sub.w	r3, r6, r9
 800736c:	3b01      	subs	r3, #1
 800736e:	2b07      	cmp	r3, #7
 8007370:	dc0a      	bgt.n	8007388 <__gethex+0x14c>
 8007372:	9801      	ldr	r0, [sp, #4]
 8007374:	f7fe f96a 	bl	800564c <_Balloc>
 8007378:	4604      	mov	r4, r0
 800737a:	b940      	cbnz	r0, 800738e <__gethex+0x152>
 800737c:	4602      	mov	r2, r0
 800737e:	21e4      	movs	r1, #228	@ 0xe4
 8007380:	4b5b      	ldr	r3, [pc, #364]	@ (80074f0 <__gethex+0x2b4>)
 8007382:	485c      	ldr	r0, [pc, #368]	@ (80074f4 <__gethex+0x2b8>)
 8007384:	f7ff fec0 	bl	8007108 <__assert_func>
 8007388:	3101      	adds	r1, #1
 800738a:	105b      	asrs	r3, r3, #1
 800738c:	e7ef      	b.n	800736e <__gethex+0x132>
 800738e:	2300      	movs	r3, #0
 8007390:	f100 0a14 	add.w	sl, r0, #20
 8007394:	4655      	mov	r5, sl
 8007396:	469b      	mov	fp, r3
 8007398:	45b1      	cmp	r9, r6
 800739a:	d337      	bcc.n	800740c <__gethex+0x1d0>
 800739c:	f845 bb04 	str.w	fp, [r5], #4
 80073a0:	eba5 050a 	sub.w	r5, r5, sl
 80073a4:	10ad      	asrs	r5, r5, #2
 80073a6:	6125      	str	r5, [r4, #16]
 80073a8:	4658      	mov	r0, fp
 80073aa:	f7fe fa41 	bl	8005830 <__hi0bits>
 80073ae:	016d      	lsls	r5, r5, #5
 80073b0:	f8d8 6000 	ldr.w	r6, [r8]
 80073b4:	1a2d      	subs	r5, r5, r0
 80073b6:	42b5      	cmp	r5, r6
 80073b8:	dd54      	ble.n	8007464 <__gethex+0x228>
 80073ba:	1bad      	subs	r5, r5, r6
 80073bc:	4629      	mov	r1, r5
 80073be:	4620      	mov	r0, r4
 80073c0:	f7fe fdc3 	bl	8005f4a <__any_on>
 80073c4:	4681      	mov	r9, r0
 80073c6:	b178      	cbz	r0, 80073e8 <__gethex+0x1ac>
 80073c8:	f04f 0901 	mov.w	r9, #1
 80073cc:	1e6b      	subs	r3, r5, #1
 80073ce:	1159      	asrs	r1, r3, #5
 80073d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80073d4:	f003 021f 	and.w	r2, r3, #31
 80073d8:	fa09 f202 	lsl.w	r2, r9, r2
 80073dc:	420a      	tst	r2, r1
 80073de:	d003      	beq.n	80073e8 <__gethex+0x1ac>
 80073e0:	454b      	cmp	r3, r9
 80073e2:	dc36      	bgt.n	8007452 <__gethex+0x216>
 80073e4:	f04f 0902 	mov.w	r9, #2
 80073e8:	4629      	mov	r1, r5
 80073ea:	4620      	mov	r0, r4
 80073ec:	f7ff febe 	bl	800716c <rshift>
 80073f0:	442f      	add	r7, r5
 80073f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073f6:	42bb      	cmp	r3, r7
 80073f8:	da42      	bge.n	8007480 <__gethex+0x244>
 80073fa:	4621      	mov	r1, r4
 80073fc:	9801      	ldr	r0, [sp, #4]
 80073fe:	f7fe f965 	bl	80056cc <_Bfree>
 8007402:	2300      	movs	r3, #0
 8007404:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007406:	25a3      	movs	r5, #163	@ 0xa3
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	e793      	b.n	8007334 <__gethex+0xf8>
 800740c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007410:	2a2e      	cmp	r2, #46	@ 0x2e
 8007412:	d012      	beq.n	800743a <__gethex+0x1fe>
 8007414:	2b20      	cmp	r3, #32
 8007416:	d104      	bne.n	8007422 <__gethex+0x1e6>
 8007418:	f845 bb04 	str.w	fp, [r5], #4
 800741c:	f04f 0b00 	mov.w	fp, #0
 8007420:	465b      	mov	r3, fp
 8007422:	7830      	ldrb	r0, [r6, #0]
 8007424:	9303      	str	r3, [sp, #12]
 8007426:	f7ff fef4 	bl	8007212 <__hexdig_fun>
 800742a:	9b03      	ldr	r3, [sp, #12]
 800742c:	f000 000f 	and.w	r0, r0, #15
 8007430:	4098      	lsls	r0, r3
 8007432:	ea4b 0b00 	orr.w	fp, fp, r0
 8007436:	3304      	adds	r3, #4
 8007438:	e7ae      	b.n	8007398 <__gethex+0x15c>
 800743a:	45b1      	cmp	r9, r6
 800743c:	d8ea      	bhi.n	8007414 <__gethex+0x1d8>
 800743e:	2201      	movs	r2, #1
 8007440:	4630      	mov	r0, r6
 8007442:	492a      	ldr	r1, [pc, #168]	@ (80074ec <__gethex+0x2b0>)
 8007444:	9303      	str	r3, [sp, #12]
 8007446:	f7ff fe37 	bl	80070b8 <strncmp>
 800744a:	9b03      	ldr	r3, [sp, #12]
 800744c:	2800      	cmp	r0, #0
 800744e:	d1e1      	bne.n	8007414 <__gethex+0x1d8>
 8007450:	e7a2      	b.n	8007398 <__gethex+0x15c>
 8007452:	4620      	mov	r0, r4
 8007454:	1ea9      	subs	r1, r5, #2
 8007456:	f7fe fd78 	bl	8005f4a <__any_on>
 800745a:	2800      	cmp	r0, #0
 800745c:	d0c2      	beq.n	80073e4 <__gethex+0x1a8>
 800745e:	f04f 0903 	mov.w	r9, #3
 8007462:	e7c1      	b.n	80073e8 <__gethex+0x1ac>
 8007464:	da09      	bge.n	800747a <__gethex+0x23e>
 8007466:	1b75      	subs	r5, r6, r5
 8007468:	4621      	mov	r1, r4
 800746a:	462a      	mov	r2, r5
 800746c:	9801      	ldr	r0, [sp, #4]
 800746e:	f7fe fb3d 	bl	8005aec <__lshift>
 8007472:	4604      	mov	r4, r0
 8007474:	1b7f      	subs	r7, r7, r5
 8007476:	f100 0a14 	add.w	sl, r0, #20
 800747a:	f04f 0900 	mov.w	r9, #0
 800747e:	e7b8      	b.n	80073f2 <__gethex+0x1b6>
 8007480:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007484:	42bd      	cmp	r5, r7
 8007486:	dd6f      	ble.n	8007568 <__gethex+0x32c>
 8007488:	1bed      	subs	r5, r5, r7
 800748a:	42ae      	cmp	r6, r5
 800748c:	dc34      	bgt.n	80074f8 <__gethex+0x2bc>
 800748e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d022      	beq.n	80074dc <__gethex+0x2a0>
 8007496:	2b03      	cmp	r3, #3
 8007498:	d024      	beq.n	80074e4 <__gethex+0x2a8>
 800749a:	2b01      	cmp	r3, #1
 800749c:	d115      	bne.n	80074ca <__gethex+0x28e>
 800749e:	42ae      	cmp	r6, r5
 80074a0:	d113      	bne.n	80074ca <__gethex+0x28e>
 80074a2:	2e01      	cmp	r6, #1
 80074a4:	d10b      	bne.n	80074be <__gethex+0x282>
 80074a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80074aa:	9a02      	ldr	r2, [sp, #8]
 80074ac:	2562      	movs	r5, #98	@ 0x62
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	2301      	movs	r3, #1
 80074b2:	6123      	str	r3, [r4, #16]
 80074b4:	f8ca 3000 	str.w	r3, [sl]
 80074b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074ba:	601c      	str	r4, [r3, #0]
 80074bc:	e73a      	b.n	8007334 <__gethex+0xf8>
 80074be:	4620      	mov	r0, r4
 80074c0:	1e71      	subs	r1, r6, #1
 80074c2:	f7fe fd42 	bl	8005f4a <__any_on>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d1ed      	bne.n	80074a6 <__gethex+0x26a>
 80074ca:	4621      	mov	r1, r4
 80074cc:	9801      	ldr	r0, [sp, #4]
 80074ce:	f7fe f8fd 	bl	80056cc <_Bfree>
 80074d2:	2300      	movs	r3, #0
 80074d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074d6:	2550      	movs	r5, #80	@ 0x50
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	e72b      	b.n	8007334 <__gethex+0xf8>
 80074dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f3      	bne.n	80074ca <__gethex+0x28e>
 80074e2:	e7e0      	b.n	80074a6 <__gethex+0x26a>
 80074e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1dd      	bne.n	80074a6 <__gethex+0x26a>
 80074ea:	e7ee      	b.n	80074ca <__gethex+0x28e>
 80074ec:	08007f51 	.word	0x08007f51
 80074f0:	08007ee7 	.word	0x08007ee7
 80074f4:	08007fa8 	.word	0x08007fa8
 80074f8:	1e6f      	subs	r7, r5, #1
 80074fa:	f1b9 0f00 	cmp.w	r9, #0
 80074fe:	d130      	bne.n	8007562 <__gethex+0x326>
 8007500:	b127      	cbz	r7, 800750c <__gethex+0x2d0>
 8007502:	4639      	mov	r1, r7
 8007504:	4620      	mov	r0, r4
 8007506:	f7fe fd20 	bl	8005f4a <__any_on>
 800750a:	4681      	mov	r9, r0
 800750c:	2301      	movs	r3, #1
 800750e:	4629      	mov	r1, r5
 8007510:	1b76      	subs	r6, r6, r5
 8007512:	2502      	movs	r5, #2
 8007514:	117a      	asrs	r2, r7, #5
 8007516:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800751a:	f007 071f 	and.w	r7, r7, #31
 800751e:	40bb      	lsls	r3, r7
 8007520:	4213      	tst	r3, r2
 8007522:	4620      	mov	r0, r4
 8007524:	bf18      	it	ne
 8007526:	f049 0902 	orrne.w	r9, r9, #2
 800752a:	f7ff fe1f 	bl	800716c <rshift>
 800752e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007532:	f1b9 0f00 	cmp.w	r9, #0
 8007536:	d047      	beq.n	80075c8 <__gethex+0x38c>
 8007538:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800753c:	2b02      	cmp	r3, #2
 800753e:	d015      	beq.n	800756c <__gethex+0x330>
 8007540:	2b03      	cmp	r3, #3
 8007542:	d017      	beq.n	8007574 <__gethex+0x338>
 8007544:	2b01      	cmp	r3, #1
 8007546:	d109      	bne.n	800755c <__gethex+0x320>
 8007548:	f019 0f02 	tst.w	r9, #2
 800754c:	d006      	beq.n	800755c <__gethex+0x320>
 800754e:	f8da 3000 	ldr.w	r3, [sl]
 8007552:	ea49 0903 	orr.w	r9, r9, r3
 8007556:	f019 0f01 	tst.w	r9, #1
 800755a:	d10e      	bne.n	800757a <__gethex+0x33e>
 800755c:	f045 0510 	orr.w	r5, r5, #16
 8007560:	e032      	b.n	80075c8 <__gethex+0x38c>
 8007562:	f04f 0901 	mov.w	r9, #1
 8007566:	e7d1      	b.n	800750c <__gethex+0x2d0>
 8007568:	2501      	movs	r5, #1
 800756a:	e7e2      	b.n	8007532 <__gethex+0x2f6>
 800756c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800756e:	f1c3 0301 	rsb	r3, r3, #1
 8007572:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f0      	beq.n	800755c <__gethex+0x320>
 800757a:	f04f 0c00 	mov.w	ip, #0
 800757e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007582:	f104 0314 	add.w	r3, r4, #20
 8007586:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800758a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800758e:	4618      	mov	r0, r3
 8007590:	f853 2b04 	ldr.w	r2, [r3], #4
 8007594:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007598:	d01b      	beq.n	80075d2 <__gethex+0x396>
 800759a:	3201      	adds	r2, #1
 800759c:	6002      	str	r2, [r0, #0]
 800759e:	2d02      	cmp	r5, #2
 80075a0:	f104 0314 	add.w	r3, r4, #20
 80075a4:	d13c      	bne.n	8007620 <__gethex+0x3e4>
 80075a6:	f8d8 2000 	ldr.w	r2, [r8]
 80075aa:	3a01      	subs	r2, #1
 80075ac:	42b2      	cmp	r2, r6
 80075ae:	d109      	bne.n	80075c4 <__gethex+0x388>
 80075b0:	2201      	movs	r2, #1
 80075b2:	1171      	asrs	r1, r6, #5
 80075b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075b8:	f006 061f 	and.w	r6, r6, #31
 80075bc:	fa02 f606 	lsl.w	r6, r2, r6
 80075c0:	421e      	tst	r6, r3
 80075c2:	d13a      	bne.n	800763a <__gethex+0x3fe>
 80075c4:	f045 0520 	orr.w	r5, r5, #32
 80075c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075ca:	601c      	str	r4, [r3, #0]
 80075cc:	9b02      	ldr	r3, [sp, #8]
 80075ce:	601f      	str	r7, [r3, #0]
 80075d0:	e6b0      	b.n	8007334 <__gethex+0xf8>
 80075d2:	4299      	cmp	r1, r3
 80075d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80075d8:	d8d9      	bhi.n	800758e <__gethex+0x352>
 80075da:	68a3      	ldr	r3, [r4, #8]
 80075dc:	459b      	cmp	fp, r3
 80075de:	db17      	blt.n	8007610 <__gethex+0x3d4>
 80075e0:	6861      	ldr	r1, [r4, #4]
 80075e2:	9801      	ldr	r0, [sp, #4]
 80075e4:	3101      	adds	r1, #1
 80075e6:	f7fe f831 	bl	800564c <_Balloc>
 80075ea:	4681      	mov	r9, r0
 80075ec:	b918      	cbnz	r0, 80075f6 <__gethex+0x3ba>
 80075ee:	4602      	mov	r2, r0
 80075f0:	2184      	movs	r1, #132	@ 0x84
 80075f2:	4b19      	ldr	r3, [pc, #100]	@ (8007658 <__gethex+0x41c>)
 80075f4:	e6c5      	b.n	8007382 <__gethex+0x146>
 80075f6:	6922      	ldr	r2, [r4, #16]
 80075f8:	f104 010c 	add.w	r1, r4, #12
 80075fc:	3202      	adds	r2, #2
 80075fe:	0092      	lsls	r2, r2, #2
 8007600:	300c      	adds	r0, #12
 8007602:	f7fd f8b4 	bl	800476e <memcpy>
 8007606:	4621      	mov	r1, r4
 8007608:	9801      	ldr	r0, [sp, #4]
 800760a:	f7fe f85f 	bl	80056cc <_Bfree>
 800760e:	464c      	mov	r4, r9
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	6122      	str	r2, [r4, #16]
 8007616:	2201      	movs	r2, #1
 8007618:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800761c:	615a      	str	r2, [r3, #20]
 800761e:	e7be      	b.n	800759e <__gethex+0x362>
 8007620:	6922      	ldr	r2, [r4, #16]
 8007622:	455a      	cmp	r2, fp
 8007624:	dd0b      	ble.n	800763e <__gethex+0x402>
 8007626:	2101      	movs	r1, #1
 8007628:	4620      	mov	r0, r4
 800762a:	f7ff fd9f 	bl	800716c <rshift>
 800762e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007632:	3701      	adds	r7, #1
 8007634:	42bb      	cmp	r3, r7
 8007636:	f6ff aee0 	blt.w	80073fa <__gethex+0x1be>
 800763a:	2501      	movs	r5, #1
 800763c:	e7c2      	b.n	80075c4 <__gethex+0x388>
 800763e:	f016 061f 	ands.w	r6, r6, #31
 8007642:	d0fa      	beq.n	800763a <__gethex+0x3fe>
 8007644:	4453      	add	r3, sl
 8007646:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800764a:	f7fe f8f1 	bl	8005830 <__hi0bits>
 800764e:	f1c6 0620 	rsb	r6, r6, #32
 8007652:	42b0      	cmp	r0, r6
 8007654:	dbe7      	blt.n	8007626 <__gethex+0x3ea>
 8007656:	e7f0      	b.n	800763a <__gethex+0x3fe>
 8007658:	08007ee7 	.word	0x08007ee7

0800765c <L_shift>:
 800765c:	f1c2 0208 	rsb	r2, r2, #8
 8007660:	0092      	lsls	r2, r2, #2
 8007662:	b570      	push	{r4, r5, r6, lr}
 8007664:	f1c2 0620 	rsb	r6, r2, #32
 8007668:	6843      	ldr	r3, [r0, #4]
 800766a:	6804      	ldr	r4, [r0, #0]
 800766c:	fa03 f506 	lsl.w	r5, r3, r6
 8007670:	432c      	orrs	r4, r5
 8007672:	40d3      	lsrs	r3, r2
 8007674:	6004      	str	r4, [r0, #0]
 8007676:	f840 3f04 	str.w	r3, [r0, #4]!
 800767a:	4288      	cmp	r0, r1
 800767c:	d3f4      	bcc.n	8007668 <L_shift+0xc>
 800767e:	bd70      	pop	{r4, r5, r6, pc}

08007680 <__match>:
 8007680:	b530      	push	{r4, r5, lr}
 8007682:	6803      	ldr	r3, [r0, #0]
 8007684:	3301      	adds	r3, #1
 8007686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800768a:	b914      	cbnz	r4, 8007692 <__match+0x12>
 800768c:	6003      	str	r3, [r0, #0]
 800768e:	2001      	movs	r0, #1
 8007690:	bd30      	pop	{r4, r5, pc}
 8007692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007696:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800769a:	2d19      	cmp	r5, #25
 800769c:	bf98      	it	ls
 800769e:	3220      	addls	r2, #32
 80076a0:	42a2      	cmp	r2, r4
 80076a2:	d0f0      	beq.n	8007686 <__match+0x6>
 80076a4:	2000      	movs	r0, #0
 80076a6:	e7f3      	b.n	8007690 <__match+0x10>

080076a8 <__hexnan>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	2500      	movs	r5, #0
 80076ae:	680b      	ldr	r3, [r1, #0]
 80076b0:	4682      	mov	sl, r0
 80076b2:	115e      	asrs	r6, r3, #5
 80076b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80076b8:	f013 031f 	ands.w	r3, r3, #31
 80076bc:	bf18      	it	ne
 80076be:	3604      	addne	r6, #4
 80076c0:	1f37      	subs	r7, r6, #4
 80076c2:	4690      	mov	r8, r2
 80076c4:	46b9      	mov	r9, r7
 80076c6:	463c      	mov	r4, r7
 80076c8:	46ab      	mov	fp, r5
 80076ca:	b087      	sub	sp, #28
 80076cc:	6801      	ldr	r1, [r0, #0]
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	f846 5c04 	str.w	r5, [r6, #-4]
 80076d4:	9502      	str	r5, [sp, #8]
 80076d6:	784a      	ldrb	r2, [r1, #1]
 80076d8:	1c4b      	adds	r3, r1, #1
 80076da:	9303      	str	r3, [sp, #12]
 80076dc:	b342      	cbz	r2, 8007730 <__hexnan+0x88>
 80076de:	4610      	mov	r0, r2
 80076e0:	9105      	str	r1, [sp, #20]
 80076e2:	9204      	str	r2, [sp, #16]
 80076e4:	f7ff fd95 	bl	8007212 <__hexdig_fun>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d151      	bne.n	8007790 <__hexnan+0xe8>
 80076ec:	9a04      	ldr	r2, [sp, #16]
 80076ee:	9905      	ldr	r1, [sp, #20]
 80076f0:	2a20      	cmp	r2, #32
 80076f2:	d818      	bhi.n	8007726 <__hexnan+0x7e>
 80076f4:	9b02      	ldr	r3, [sp, #8]
 80076f6:	459b      	cmp	fp, r3
 80076f8:	dd13      	ble.n	8007722 <__hexnan+0x7a>
 80076fa:	454c      	cmp	r4, r9
 80076fc:	d206      	bcs.n	800770c <__hexnan+0x64>
 80076fe:	2d07      	cmp	r5, #7
 8007700:	dc04      	bgt.n	800770c <__hexnan+0x64>
 8007702:	462a      	mov	r2, r5
 8007704:	4649      	mov	r1, r9
 8007706:	4620      	mov	r0, r4
 8007708:	f7ff ffa8 	bl	800765c <L_shift>
 800770c:	4544      	cmp	r4, r8
 800770e:	d952      	bls.n	80077b6 <__hexnan+0x10e>
 8007710:	2300      	movs	r3, #0
 8007712:	f1a4 0904 	sub.w	r9, r4, #4
 8007716:	f844 3c04 	str.w	r3, [r4, #-4]
 800771a:	461d      	mov	r5, r3
 800771c:	464c      	mov	r4, r9
 800771e:	f8cd b008 	str.w	fp, [sp, #8]
 8007722:	9903      	ldr	r1, [sp, #12]
 8007724:	e7d7      	b.n	80076d6 <__hexnan+0x2e>
 8007726:	2a29      	cmp	r2, #41	@ 0x29
 8007728:	d157      	bne.n	80077da <__hexnan+0x132>
 800772a:	3102      	adds	r1, #2
 800772c:	f8ca 1000 	str.w	r1, [sl]
 8007730:	f1bb 0f00 	cmp.w	fp, #0
 8007734:	d051      	beq.n	80077da <__hexnan+0x132>
 8007736:	454c      	cmp	r4, r9
 8007738:	d206      	bcs.n	8007748 <__hexnan+0xa0>
 800773a:	2d07      	cmp	r5, #7
 800773c:	dc04      	bgt.n	8007748 <__hexnan+0xa0>
 800773e:	462a      	mov	r2, r5
 8007740:	4649      	mov	r1, r9
 8007742:	4620      	mov	r0, r4
 8007744:	f7ff ff8a 	bl	800765c <L_shift>
 8007748:	4544      	cmp	r4, r8
 800774a:	d936      	bls.n	80077ba <__hexnan+0x112>
 800774c:	4623      	mov	r3, r4
 800774e:	f1a8 0204 	sub.w	r2, r8, #4
 8007752:	f853 1b04 	ldr.w	r1, [r3], #4
 8007756:	429f      	cmp	r7, r3
 8007758:	f842 1f04 	str.w	r1, [r2, #4]!
 800775c:	d2f9      	bcs.n	8007752 <__hexnan+0xaa>
 800775e:	1b3b      	subs	r3, r7, r4
 8007760:	f023 0303 	bic.w	r3, r3, #3
 8007764:	3304      	adds	r3, #4
 8007766:	3401      	adds	r4, #1
 8007768:	3e03      	subs	r6, #3
 800776a:	42b4      	cmp	r4, r6
 800776c:	bf88      	it	hi
 800776e:	2304      	movhi	r3, #4
 8007770:	2200      	movs	r2, #0
 8007772:	4443      	add	r3, r8
 8007774:	f843 2b04 	str.w	r2, [r3], #4
 8007778:	429f      	cmp	r7, r3
 800777a:	d2fb      	bcs.n	8007774 <__hexnan+0xcc>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	b91b      	cbnz	r3, 8007788 <__hexnan+0xe0>
 8007780:	4547      	cmp	r7, r8
 8007782:	d128      	bne.n	80077d6 <__hexnan+0x12e>
 8007784:	2301      	movs	r3, #1
 8007786:	603b      	str	r3, [r7, #0]
 8007788:	2005      	movs	r0, #5
 800778a:	b007      	add	sp, #28
 800778c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007790:	3501      	adds	r5, #1
 8007792:	2d08      	cmp	r5, #8
 8007794:	f10b 0b01 	add.w	fp, fp, #1
 8007798:	dd06      	ble.n	80077a8 <__hexnan+0x100>
 800779a:	4544      	cmp	r4, r8
 800779c:	d9c1      	bls.n	8007722 <__hexnan+0x7a>
 800779e:	2300      	movs	r3, #0
 80077a0:	2501      	movs	r5, #1
 80077a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80077a6:	3c04      	subs	r4, #4
 80077a8:	6822      	ldr	r2, [r4, #0]
 80077aa:	f000 000f 	and.w	r0, r0, #15
 80077ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80077b2:	6020      	str	r0, [r4, #0]
 80077b4:	e7b5      	b.n	8007722 <__hexnan+0x7a>
 80077b6:	2508      	movs	r5, #8
 80077b8:	e7b3      	b.n	8007722 <__hexnan+0x7a>
 80077ba:	9b01      	ldr	r3, [sp, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0dd      	beq.n	800777c <__hexnan+0xd4>
 80077c0:	f04f 32ff 	mov.w	r2, #4294967295
 80077c4:	f1c3 0320 	rsb	r3, r3, #32
 80077c8:	40da      	lsrs	r2, r3
 80077ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80077ce:	4013      	ands	r3, r2
 80077d0:	f846 3c04 	str.w	r3, [r6, #-4]
 80077d4:	e7d2      	b.n	800777c <__hexnan+0xd4>
 80077d6:	3f04      	subs	r7, #4
 80077d8:	e7d0      	b.n	800777c <__hexnan+0xd4>
 80077da:	2004      	movs	r0, #4
 80077dc:	e7d5      	b.n	800778a <__hexnan+0xe2>

080077de <__ascii_mbtowc>:
 80077de:	b082      	sub	sp, #8
 80077e0:	b901      	cbnz	r1, 80077e4 <__ascii_mbtowc+0x6>
 80077e2:	a901      	add	r1, sp, #4
 80077e4:	b142      	cbz	r2, 80077f8 <__ascii_mbtowc+0x1a>
 80077e6:	b14b      	cbz	r3, 80077fc <__ascii_mbtowc+0x1e>
 80077e8:	7813      	ldrb	r3, [r2, #0]
 80077ea:	600b      	str	r3, [r1, #0]
 80077ec:	7812      	ldrb	r2, [r2, #0]
 80077ee:	1e10      	subs	r0, r2, #0
 80077f0:	bf18      	it	ne
 80077f2:	2001      	movne	r0, #1
 80077f4:	b002      	add	sp, #8
 80077f6:	4770      	bx	lr
 80077f8:	4610      	mov	r0, r2
 80077fa:	e7fb      	b.n	80077f4 <__ascii_mbtowc+0x16>
 80077fc:	f06f 0001 	mvn.w	r0, #1
 8007800:	e7f8      	b.n	80077f4 <__ascii_mbtowc+0x16>

08007802 <_realloc_r>:
 8007802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007806:	4607      	mov	r7, r0
 8007808:	4614      	mov	r4, r2
 800780a:	460d      	mov	r5, r1
 800780c:	b921      	cbnz	r1, 8007818 <_realloc_r+0x16>
 800780e:	4611      	mov	r1, r2
 8007810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	f7fd be8e 	b.w	8005534 <_malloc_r>
 8007818:	b92a      	cbnz	r2, 8007826 <_realloc_r+0x24>
 800781a:	f7fd fe19 	bl	8005450 <_free_r>
 800781e:	4625      	mov	r5, r4
 8007820:	4628      	mov	r0, r5
 8007822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007826:	f000 f840 	bl	80078aa <_malloc_usable_size_r>
 800782a:	4284      	cmp	r4, r0
 800782c:	4606      	mov	r6, r0
 800782e:	d802      	bhi.n	8007836 <_realloc_r+0x34>
 8007830:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007834:	d8f4      	bhi.n	8007820 <_realloc_r+0x1e>
 8007836:	4621      	mov	r1, r4
 8007838:	4638      	mov	r0, r7
 800783a:	f7fd fe7b 	bl	8005534 <_malloc_r>
 800783e:	4680      	mov	r8, r0
 8007840:	b908      	cbnz	r0, 8007846 <_realloc_r+0x44>
 8007842:	4645      	mov	r5, r8
 8007844:	e7ec      	b.n	8007820 <_realloc_r+0x1e>
 8007846:	42b4      	cmp	r4, r6
 8007848:	4622      	mov	r2, r4
 800784a:	4629      	mov	r1, r5
 800784c:	bf28      	it	cs
 800784e:	4632      	movcs	r2, r6
 8007850:	f7fc ff8d 	bl	800476e <memcpy>
 8007854:	4629      	mov	r1, r5
 8007856:	4638      	mov	r0, r7
 8007858:	f7fd fdfa 	bl	8005450 <_free_r>
 800785c:	e7f1      	b.n	8007842 <_realloc_r+0x40>

0800785e <__ascii_wctomb>:
 800785e:	4603      	mov	r3, r0
 8007860:	4608      	mov	r0, r1
 8007862:	b141      	cbz	r1, 8007876 <__ascii_wctomb+0x18>
 8007864:	2aff      	cmp	r2, #255	@ 0xff
 8007866:	d904      	bls.n	8007872 <__ascii_wctomb+0x14>
 8007868:	228a      	movs	r2, #138	@ 0x8a
 800786a:	f04f 30ff 	mov.w	r0, #4294967295
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	4770      	bx	lr
 8007872:	2001      	movs	r0, #1
 8007874:	700a      	strb	r2, [r1, #0]
 8007876:	4770      	bx	lr

08007878 <fiprintf>:
 8007878:	b40e      	push	{r1, r2, r3}
 800787a:	b503      	push	{r0, r1, lr}
 800787c:	4601      	mov	r1, r0
 800787e:	ab03      	add	r3, sp, #12
 8007880:	4805      	ldr	r0, [pc, #20]	@ (8007898 <fiprintf+0x20>)
 8007882:	f853 2b04 	ldr.w	r2, [r3], #4
 8007886:	6800      	ldr	r0, [r0, #0]
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	f000 f83d 	bl	8007908 <_vfiprintf_r>
 800788e:	b002      	add	sp, #8
 8007890:	f85d eb04 	ldr.w	lr, [sp], #4
 8007894:	b003      	add	sp, #12
 8007896:	4770      	bx	lr
 8007898:	2000001c 	.word	0x2000001c

0800789c <abort>:
 800789c:	2006      	movs	r0, #6
 800789e:	b508      	push	{r3, lr}
 80078a0:	f000 fa06 	bl	8007cb0 <raise>
 80078a4:	2001      	movs	r0, #1
 80078a6:	f7f9 fb64 	bl	8000f72 <_exit>

080078aa <_malloc_usable_size_r>:
 80078aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ae:	1f18      	subs	r0, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	bfbc      	itt	lt
 80078b4:	580b      	ldrlt	r3, [r1, r0]
 80078b6:	18c0      	addlt	r0, r0, r3
 80078b8:	4770      	bx	lr

080078ba <__sfputc_r>:
 80078ba:	6893      	ldr	r3, [r2, #8]
 80078bc:	b410      	push	{r4}
 80078be:	3b01      	subs	r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	6093      	str	r3, [r2, #8]
 80078c4:	da07      	bge.n	80078d6 <__sfputc_r+0x1c>
 80078c6:	6994      	ldr	r4, [r2, #24]
 80078c8:	42a3      	cmp	r3, r4
 80078ca:	db01      	blt.n	80078d0 <__sfputc_r+0x16>
 80078cc:	290a      	cmp	r1, #10
 80078ce:	d102      	bne.n	80078d6 <__sfputc_r+0x1c>
 80078d0:	bc10      	pop	{r4}
 80078d2:	f000 b931 	b.w	8007b38 <__swbuf_r>
 80078d6:	6813      	ldr	r3, [r2, #0]
 80078d8:	1c58      	adds	r0, r3, #1
 80078da:	6010      	str	r0, [r2, #0]
 80078dc:	7019      	strb	r1, [r3, #0]
 80078de:	4608      	mov	r0, r1
 80078e0:	bc10      	pop	{r4}
 80078e2:	4770      	bx	lr

080078e4 <__sfputs_r>:
 80078e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e6:	4606      	mov	r6, r0
 80078e8:	460f      	mov	r7, r1
 80078ea:	4614      	mov	r4, r2
 80078ec:	18d5      	adds	r5, r2, r3
 80078ee:	42ac      	cmp	r4, r5
 80078f0:	d101      	bne.n	80078f6 <__sfputs_r+0x12>
 80078f2:	2000      	movs	r0, #0
 80078f4:	e007      	b.n	8007906 <__sfputs_r+0x22>
 80078f6:	463a      	mov	r2, r7
 80078f8:	4630      	mov	r0, r6
 80078fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078fe:	f7ff ffdc 	bl	80078ba <__sfputc_r>
 8007902:	1c43      	adds	r3, r0, #1
 8007904:	d1f3      	bne.n	80078ee <__sfputs_r+0xa>
 8007906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007908 <_vfiprintf_r>:
 8007908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	460d      	mov	r5, r1
 800790e:	4614      	mov	r4, r2
 8007910:	4698      	mov	r8, r3
 8007912:	4606      	mov	r6, r0
 8007914:	b09d      	sub	sp, #116	@ 0x74
 8007916:	b118      	cbz	r0, 8007920 <_vfiprintf_r+0x18>
 8007918:	6a03      	ldr	r3, [r0, #32]
 800791a:	b90b      	cbnz	r3, 8007920 <_vfiprintf_r+0x18>
 800791c:	f7fc fdfe 	bl	800451c <__sinit>
 8007920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007922:	07d9      	lsls	r1, r3, #31
 8007924:	d405      	bmi.n	8007932 <_vfiprintf_r+0x2a>
 8007926:	89ab      	ldrh	r3, [r5, #12]
 8007928:	059a      	lsls	r2, r3, #22
 800792a:	d402      	bmi.n	8007932 <_vfiprintf_r+0x2a>
 800792c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800792e:	f7fc ff0e 	bl	800474e <__retarget_lock_acquire_recursive>
 8007932:	89ab      	ldrh	r3, [r5, #12]
 8007934:	071b      	lsls	r3, r3, #28
 8007936:	d501      	bpl.n	800793c <_vfiprintf_r+0x34>
 8007938:	692b      	ldr	r3, [r5, #16]
 800793a:	b99b      	cbnz	r3, 8007964 <_vfiprintf_r+0x5c>
 800793c:	4629      	mov	r1, r5
 800793e:	4630      	mov	r0, r6
 8007940:	f000 f938 	bl	8007bb4 <__swsetup_r>
 8007944:	b170      	cbz	r0, 8007964 <_vfiprintf_r+0x5c>
 8007946:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007948:	07dc      	lsls	r4, r3, #31
 800794a:	d504      	bpl.n	8007956 <_vfiprintf_r+0x4e>
 800794c:	f04f 30ff 	mov.w	r0, #4294967295
 8007950:	b01d      	add	sp, #116	@ 0x74
 8007952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007956:	89ab      	ldrh	r3, [r5, #12]
 8007958:	0598      	lsls	r0, r3, #22
 800795a:	d4f7      	bmi.n	800794c <_vfiprintf_r+0x44>
 800795c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800795e:	f7fc fef7 	bl	8004750 <__retarget_lock_release_recursive>
 8007962:	e7f3      	b.n	800794c <_vfiprintf_r+0x44>
 8007964:	2300      	movs	r3, #0
 8007966:	9309      	str	r3, [sp, #36]	@ 0x24
 8007968:	2320      	movs	r3, #32
 800796a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800796e:	2330      	movs	r3, #48	@ 0x30
 8007970:	f04f 0901 	mov.w	r9, #1
 8007974:	f8cd 800c 	str.w	r8, [sp, #12]
 8007978:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007b24 <_vfiprintf_r+0x21c>
 800797c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007980:	4623      	mov	r3, r4
 8007982:	469a      	mov	sl, r3
 8007984:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007988:	b10a      	cbz	r2, 800798e <_vfiprintf_r+0x86>
 800798a:	2a25      	cmp	r2, #37	@ 0x25
 800798c:	d1f9      	bne.n	8007982 <_vfiprintf_r+0x7a>
 800798e:	ebba 0b04 	subs.w	fp, sl, r4
 8007992:	d00b      	beq.n	80079ac <_vfiprintf_r+0xa4>
 8007994:	465b      	mov	r3, fp
 8007996:	4622      	mov	r2, r4
 8007998:	4629      	mov	r1, r5
 800799a:	4630      	mov	r0, r6
 800799c:	f7ff ffa2 	bl	80078e4 <__sfputs_r>
 80079a0:	3001      	adds	r0, #1
 80079a2:	f000 80a7 	beq.w	8007af4 <_vfiprintf_r+0x1ec>
 80079a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079a8:	445a      	add	r2, fp
 80079aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80079ac:	f89a 3000 	ldrb.w	r3, [sl]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 809f 	beq.w	8007af4 <_vfiprintf_r+0x1ec>
 80079b6:	2300      	movs	r3, #0
 80079b8:	f04f 32ff 	mov.w	r2, #4294967295
 80079bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079c0:	f10a 0a01 	add.w	sl, sl, #1
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	9307      	str	r3, [sp, #28]
 80079c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80079ce:	4654      	mov	r4, sl
 80079d0:	2205      	movs	r2, #5
 80079d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d6:	4853      	ldr	r0, [pc, #332]	@ (8007b24 <_vfiprintf_r+0x21c>)
 80079d8:	f7fc febb 	bl	8004752 <memchr>
 80079dc:	9a04      	ldr	r2, [sp, #16]
 80079de:	b9d8      	cbnz	r0, 8007a18 <_vfiprintf_r+0x110>
 80079e0:	06d1      	lsls	r1, r2, #27
 80079e2:	bf44      	itt	mi
 80079e4:	2320      	movmi	r3, #32
 80079e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079ea:	0713      	lsls	r3, r2, #28
 80079ec:	bf44      	itt	mi
 80079ee:	232b      	movmi	r3, #43	@ 0x2b
 80079f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079f4:	f89a 3000 	ldrb.w	r3, [sl]
 80079f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80079fa:	d015      	beq.n	8007a28 <_vfiprintf_r+0x120>
 80079fc:	4654      	mov	r4, sl
 80079fe:	2000      	movs	r0, #0
 8007a00:	f04f 0c0a 	mov.w	ip, #10
 8007a04:	9a07      	ldr	r2, [sp, #28]
 8007a06:	4621      	mov	r1, r4
 8007a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a0c:	3b30      	subs	r3, #48	@ 0x30
 8007a0e:	2b09      	cmp	r3, #9
 8007a10:	d94b      	bls.n	8007aaa <_vfiprintf_r+0x1a2>
 8007a12:	b1b0      	cbz	r0, 8007a42 <_vfiprintf_r+0x13a>
 8007a14:	9207      	str	r2, [sp, #28]
 8007a16:	e014      	b.n	8007a42 <_vfiprintf_r+0x13a>
 8007a18:	eba0 0308 	sub.w	r3, r0, r8
 8007a1c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a20:	4313      	orrs	r3, r2
 8007a22:	46a2      	mov	sl, r4
 8007a24:	9304      	str	r3, [sp, #16]
 8007a26:	e7d2      	b.n	80079ce <_vfiprintf_r+0xc6>
 8007a28:	9b03      	ldr	r3, [sp, #12]
 8007a2a:	1d19      	adds	r1, r3, #4
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	9103      	str	r1, [sp, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bfbb      	ittet	lt
 8007a34:	425b      	neglt	r3, r3
 8007a36:	f042 0202 	orrlt.w	r2, r2, #2
 8007a3a:	9307      	strge	r3, [sp, #28]
 8007a3c:	9307      	strlt	r3, [sp, #28]
 8007a3e:	bfb8      	it	lt
 8007a40:	9204      	strlt	r2, [sp, #16]
 8007a42:	7823      	ldrb	r3, [r4, #0]
 8007a44:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a46:	d10a      	bne.n	8007a5e <_vfiprintf_r+0x156>
 8007a48:	7863      	ldrb	r3, [r4, #1]
 8007a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a4c:	d132      	bne.n	8007ab4 <_vfiprintf_r+0x1ac>
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	3402      	adds	r4, #2
 8007a52:	1d1a      	adds	r2, r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	9203      	str	r2, [sp, #12]
 8007a58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a5c:	9305      	str	r3, [sp, #20]
 8007a5e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007b28 <_vfiprintf_r+0x220>
 8007a62:	2203      	movs	r2, #3
 8007a64:	4650      	mov	r0, sl
 8007a66:	7821      	ldrb	r1, [r4, #0]
 8007a68:	f7fc fe73 	bl	8004752 <memchr>
 8007a6c:	b138      	cbz	r0, 8007a7e <_vfiprintf_r+0x176>
 8007a6e:	2240      	movs	r2, #64	@ 0x40
 8007a70:	9b04      	ldr	r3, [sp, #16]
 8007a72:	eba0 000a 	sub.w	r0, r0, sl
 8007a76:	4082      	lsls	r2, r0
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	3401      	adds	r4, #1
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a82:	2206      	movs	r2, #6
 8007a84:	4829      	ldr	r0, [pc, #164]	@ (8007b2c <_vfiprintf_r+0x224>)
 8007a86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a8a:	f7fc fe62 	bl	8004752 <memchr>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d03f      	beq.n	8007b12 <_vfiprintf_r+0x20a>
 8007a92:	4b27      	ldr	r3, [pc, #156]	@ (8007b30 <_vfiprintf_r+0x228>)
 8007a94:	bb1b      	cbnz	r3, 8007ade <_vfiprintf_r+0x1d6>
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	3307      	adds	r3, #7
 8007a9a:	f023 0307 	bic.w	r3, r3, #7
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	9303      	str	r3, [sp, #12]
 8007aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa4:	443b      	add	r3, r7
 8007aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aa8:	e76a      	b.n	8007980 <_vfiprintf_r+0x78>
 8007aaa:	460c      	mov	r4, r1
 8007aac:	2001      	movs	r0, #1
 8007aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ab2:	e7a8      	b.n	8007a06 <_vfiprintf_r+0xfe>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f04f 0c0a 	mov.w	ip, #10
 8007aba:	4619      	mov	r1, r3
 8007abc:	3401      	adds	r4, #1
 8007abe:	9305      	str	r3, [sp, #20]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ac6:	3a30      	subs	r2, #48	@ 0x30
 8007ac8:	2a09      	cmp	r2, #9
 8007aca:	d903      	bls.n	8007ad4 <_vfiprintf_r+0x1cc>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0c6      	beq.n	8007a5e <_vfiprintf_r+0x156>
 8007ad0:	9105      	str	r1, [sp, #20]
 8007ad2:	e7c4      	b.n	8007a5e <_vfiprintf_r+0x156>
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007adc:	e7f0      	b.n	8007ac0 <_vfiprintf_r+0x1b8>
 8007ade:	ab03      	add	r3, sp, #12
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	462a      	mov	r2, r5
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	4b13      	ldr	r3, [pc, #76]	@ (8007b34 <_vfiprintf_r+0x22c>)
 8007ae8:	a904      	add	r1, sp, #16
 8007aea:	f7fb fec5 	bl	8003878 <_printf_float>
 8007aee:	4607      	mov	r7, r0
 8007af0:	1c78      	adds	r0, r7, #1
 8007af2:	d1d6      	bne.n	8007aa2 <_vfiprintf_r+0x19a>
 8007af4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007af6:	07d9      	lsls	r1, r3, #31
 8007af8:	d405      	bmi.n	8007b06 <_vfiprintf_r+0x1fe>
 8007afa:	89ab      	ldrh	r3, [r5, #12]
 8007afc:	059a      	lsls	r2, r3, #22
 8007afe:	d402      	bmi.n	8007b06 <_vfiprintf_r+0x1fe>
 8007b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b02:	f7fc fe25 	bl	8004750 <__retarget_lock_release_recursive>
 8007b06:	89ab      	ldrh	r3, [r5, #12]
 8007b08:	065b      	lsls	r3, r3, #25
 8007b0a:	f53f af1f 	bmi.w	800794c <_vfiprintf_r+0x44>
 8007b0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b10:	e71e      	b.n	8007950 <_vfiprintf_r+0x48>
 8007b12:	ab03      	add	r3, sp, #12
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	462a      	mov	r2, r5
 8007b18:	4630      	mov	r0, r6
 8007b1a:	4b06      	ldr	r3, [pc, #24]	@ (8007b34 <_vfiprintf_r+0x22c>)
 8007b1c:	a904      	add	r1, sp, #16
 8007b1e:	f7fc f949 	bl	8003db4 <_printf_i>
 8007b22:	e7e4      	b.n	8007aee <_vfiprintf_r+0x1e6>
 8007b24:	08007f53 	.word	0x08007f53
 8007b28:	08007f59 	.word	0x08007f59
 8007b2c:	08007f5d 	.word	0x08007f5d
 8007b30:	08003879 	.word	0x08003879
 8007b34:	080078e5 	.word	0x080078e5

08007b38 <__swbuf_r>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	460e      	mov	r6, r1
 8007b3c:	4614      	mov	r4, r2
 8007b3e:	4605      	mov	r5, r0
 8007b40:	b118      	cbz	r0, 8007b4a <__swbuf_r+0x12>
 8007b42:	6a03      	ldr	r3, [r0, #32]
 8007b44:	b90b      	cbnz	r3, 8007b4a <__swbuf_r+0x12>
 8007b46:	f7fc fce9 	bl	800451c <__sinit>
 8007b4a:	69a3      	ldr	r3, [r4, #24]
 8007b4c:	60a3      	str	r3, [r4, #8]
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	071a      	lsls	r2, r3, #28
 8007b52:	d501      	bpl.n	8007b58 <__swbuf_r+0x20>
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	b943      	cbnz	r3, 8007b6a <__swbuf_r+0x32>
 8007b58:	4621      	mov	r1, r4
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f000 f82a 	bl	8007bb4 <__swsetup_r>
 8007b60:	b118      	cbz	r0, 8007b6a <__swbuf_r+0x32>
 8007b62:	f04f 37ff 	mov.w	r7, #4294967295
 8007b66:	4638      	mov	r0, r7
 8007b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	6922      	ldr	r2, [r4, #16]
 8007b6e:	b2f6      	uxtb	r6, r6
 8007b70:	1a98      	subs	r0, r3, r2
 8007b72:	6963      	ldr	r3, [r4, #20]
 8007b74:	4637      	mov	r7, r6
 8007b76:	4283      	cmp	r3, r0
 8007b78:	dc05      	bgt.n	8007b86 <__swbuf_r+0x4e>
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f7ff fa59 	bl	8007034 <_fflush_r>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d1ed      	bne.n	8007b62 <__swbuf_r+0x2a>
 8007b86:	68a3      	ldr	r3, [r4, #8]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	60a3      	str	r3, [r4, #8]
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	6022      	str	r2, [r4, #0]
 8007b92:	701e      	strb	r6, [r3, #0]
 8007b94:	6962      	ldr	r2, [r4, #20]
 8007b96:	1c43      	adds	r3, r0, #1
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d004      	beq.n	8007ba6 <__swbuf_r+0x6e>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	07db      	lsls	r3, r3, #31
 8007ba0:	d5e1      	bpl.n	8007b66 <__swbuf_r+0x2e>
 8007ba2:	2e0a      	cmp	r6, #10
 8007ba4:	d1df      	bne.n	8007b66 <__swbuf_r+0x2e>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f7ff fa43 	bl	8007034 <_fflush_r>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d0d9      	beq.n	8007b66 <__swbuf_r+0x2e>
 8007bb2:	e7d6      	b.n	8007b62 <__swbuf_r+0x2a>

08007bb4 <__swsetup_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4b29      	ldr	r3, [pc, #164]	@ (8007c5c <__swsetup_r+0xa8>)
 8007bb8:	4605      	mov	r5, r0
 8007bba:	6818      	ldr	r0, [r3, #0]
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	b118      	cbz	r0, 8007bc8 <__swsetup_r+0x14>
 8007bc0:	6a03      	ldr	r3, [r0, #32]
 8007bc2:	b90b      	cbnz	r3, 8007bc8 <__swsetup_r+0x14>
 8007bc4:	f7fc fcaa 	bl	800451c <__sinit>
 8007bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bcc:	0719      	lsls	r1, r3, #28
 8007bce:	d422      	bmi.n	8007c16 <__swsetup_r+0x62>
 8007bd0:	06da      	lsls	r2, r3, #27
 8007bd2:	d407      	bmi.n	8007be4 <__swsetup_r+0x30>
 8007bd4:	2209      	movs	r2, #9
 8007bd6:	602a      	str	r2, [r5, #0]
 8007bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007be0:	81a3      	strh	r3, [r4, #12]
 8007be2:	e033      	b.n	8007c4c <__swsetup_r+0x98>
 8007be4:	0758      	lsls	r0, r3, #29
 8007be6:	d512      	bpl.n	8007c0e <__swsetup_r+0x5a>
 8007be8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bea:	b141      	cbz	r1, 8007bfe <__swsetup_r+0x4a>
 8007bec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	d002      	beq.n	8007bfa <__swsetup_r+0x46>
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f7fd fc2b 	bl	8005450 <_free_r>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	2300      	movs	r3, #0
 8007c08:	6063      	str	r3, [r4, #4]
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	f043 0308 	orr.w	r3, r3, #8
 8007c14:	81a3      	strh	r3, [r4, #12]
 8007c16:	6923      	ldr	r3, [r4, #16]
 8007c18:	b94b      	cbnz	r3, 8007c2e <__swsetup_r+0x7a>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c24:	d003      	beq.n	8007c2e <__swsetup_r+0x7a>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 f882 	bl	8007d32 <__smakebuf_r>
 8007c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c32:	f013 0201 	ands.w	r2, r3, #1
 8007c36:	d00a      	beq.n	8007c4e <__swsetup_r+0x9a>
 8007c38:	2200      	movs	r2, #0
 8007c3a:	60a2      	str	r2, [r4, #8]
 8007c3c:	6962      	ldr	r2, [r4, #20]
 8007c3e:	4252      	negs	r2, r2
 8007c40:	61a2      	str	r2, [r4, #24]
 8007c42:	6922      	ldr	r2, [r4, #16]
 8007c44:	b942      	cbnz	r2, 8007c58 <__swsetup_r+0xa4>
 8007c46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c4a:	d1c5      	bne.n	8007bd8 <__swsetup_r+0x24>
 8007c4c:	bd38      	pop	{r3, r4, r5, pc}
 8007c4e:	0799      	lsls	r1, r3, #30
 8007c50:	bf58      	it	pl
 8007c52:	6962      	ldrpl	r2, [r4, #20]
 8007c54:	60a2      	str	r2, [r4, #8]
 8007c56:	e7f4      	b.n	8007c42 <__swsetup_r+0x8e>
 8007c58:	2000      	movs	r0, #0
 8007c5a:	e7f7      	b.n	8007c4c <__swsetup_r+0x98>
 8007c5c:	2000001c 	.word	0x2000001c

08007c60 <_raise_r>:
 8007c60:	291f      	cmp	r1, #31
 8007c62:	b538      	push	{r3, r4, r5, lr}
 8007c64:	4605      	mov	r5, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	d904      	bls.n	8007c74 <_raise_r+0x14>
 8007c6a:	2316      	movs	r3, #22
 8007c6c:	6003      	str	r3, [r0, #0]
 8007c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c76:	b112      	cbz	r2, 8007c7e <_raise_r+0x1e>
 8007c78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c7c:	b94b      	cbnz	r3, 8007c92 <_raise_r+0x32>
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 f830 	bl	8007ce4 <_getpid_r>
 8007c84:	4622      	mov	r2, r4
 8007c86:	4601      	mov	r1, r0
 8007c88:	4628      	mov	r0, r5
 8007c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c8e:	f000 b817 	b.w	8007cc0 <_kill_r>
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d00a      	beq.n	8007cac <_raise_r+0x4c>
 8007c96:	1c59      	adds	r1, r3, #1
 8007c98:	d103      	bne.n	8007ca2 <_raise_r+0x42>
 8007c9a:	2316      	movs	r3, #22
 8007c9c:	6003      	str	r3, [r0, #0]
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	e7e7      	b.n	8007c72 <_raise_r+0x12>
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007caa:	4798      	blx	r3
 8007cac:	2000      	movs	r0, #0
 8007cae:	e7e0      	b.n	8007c72 <_raise_r+0x12>

08007cb0 <raise>:
 8007cb0:	4b02      	ldr	r3, [pc, #8]	@ (8007cbc <raise+0xc>)
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	f7ff bfd3 	b.w	8007c60 <_raise_r>
 8007cba:	bf00      	nop
 8007cbc:	2000001c 	.word	0x2000001c

08007cc0 <_kill_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	4d06      	ldr	r5, [pc, #24]	@ (8007ce0 <_kill_r+0x20>)
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4608      	mov	r0, r1
 8007cca:	4611      	mov	r1, r2
 8007ccc:	602b      	str	r3, [r5, #0]
 8007cce:	f7f9 f940 	bl	8000f52 <_kill>
 8007cd2:	1c43      	adds	r3, r0, #1
 8007cd4:	d102      	bne.n	8007cdc <_kill_r+0x1c>
 8007cd6:	682b      	ldr	r3, [r5, #0]
 8007cd8:	b103      	cbz	r3, 8007cdc <_kill_r+0x1c>
 8007cda:	6023      	str	r3, [r4, #0]
 8007cdc:	bd38      	pop	{r3, r4, r5, pc}
 8007cde:	bf00      	nop
 8007ce0:	2000041c 	.word	0x2000041c

08007ce4 <_getpid_r>:
 8007ce4:	f7f9 b92e 	b.w	8000f44 <_getpid>

08007ce8 <__swhatbuf_r>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	460c      	mov	r4, r1
 8007cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf0:	4615      	mov	r5, r2
 8007cf2:	2900      	cmp	r1, #0
 8007cf4:	461e      	mov	r6, r3
 8007cf6:	b096      	sub	sp, #88	@ 0x58
 8007cf8:	da0c      	bge.n	8007d14 <__swhatbuf_r+0x2c>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d02:	bf14      	ite	ne
 8007d04:	2340      	movne	r3, #64	@ 0x40
 8007d06:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	6031      	str	r1, [r6, #0]
 8007d0e:	602b      	str	r3, [r5, #0]
 8007d10:	b016      	add	sp, #88	@ 0x58
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	466a      	mov	r2, sp
 8007d16:	f000 f849 	bl	8007dac <_fstat_r>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	dbed      	blt.n	8007cfa <__swhatbuf_r+0x12>
 8007d1e:	9901      	ldr	r1, [sp, #4]
 8007d20:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d24:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d28:	4259      	negs	r1, r3
 8007d2a:	4159      	adcs	r1, r3
 8007d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d30:	e7eb      	b.n	8007d0a <__swhatbuf_r+0x22>

08007d32 <__smakebuf_r>:
 8007d32:	898b      	ldrh	r3, [r1, #12]
 8007d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d36:	079d      	lsls	r5, r3, #30
 8007d38:	4606      	mov	r6, r0
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	d507      	bpl.n	8007d4e <__smakebuf_r+0x1c>
 8007d3e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d42:	6023      	str	r3, [r4, #0]
 8007d44:	6123      	str	r3, [r4, #16]
 8007d46:	2301      	movs	r3, #1
 8007d48:	6163      	str	r3, [r4, #20]
 8007d4a:	b003      	add	sp, #12
 8007d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d4e:	466a      	mov	r2, sp
 8007d50:	ab01      	add	r3, sp, #4
 8007d52:	f7ff ffc9 	bl	8007ce8 <__swhatbuf_r>
 8007d56:	9f00      	ldr	r7, [sp, #0]
 8007d58:	4605      	mov	r5, r0
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7fd fbe9 	bl	8005534 <_malloc_r>
 8007d62:	b948      	cbnz	r0, 8007d78 <__smakebuf_r+0x46>
 8007d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d68:	059a      	lsls	r2, r3, #22
 8007d6a:	d4ee      	bmi.n	8007d4a <__smakebuf_r+0x18>
 8007d6c:	f023 0303 	bic.w	r3, r3, #3
 8007d70:	f043 0302 	orr.w	r3, r3, #2
 8007d74:	81a3      	strh	r3, [r4, #12]
 8007d76:	e7e2      	b.n	8007d3e <__smakebuf_r+0xc>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	9b01      	ldr	r3, [sp, #4]
 8007d86:	6020      	str	r0, [r4, #0]
 8007d88:	b15b      	cbz	r3, 8007da2 <__smakebuf_r+0x70>
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d90:	f000 f81e 	bl	8007dd0 <_isatty_r>
 8007d94:	b128      	cbz	r0, 8007da2 <__smakebuf_r+0x70>
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	f023 0303 	bic.w	r3, r3, #3
 8007d9c:	f043 0301 	orr.w	r3, r3, #1
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	431d      	orrs	r5, r3
 8007da6:	81a5      	strh	r5, [r4, #12]
 8007da8:	e7cf      	b.n	8007d4a <__smakebuf_r+0x18>
	...

08007dac <_fstat_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	2300      	movs	r3, #0
 8007db0:	4d06      	ldr	r5, [pc, #24]	@ (8007dcc <_fstat_r+0x20>)
 8007db2:	4604      	mov	r4, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	4611      	mov	r1, r2
 8007db8:	602b      	str	r3, [r5, #0]
 8007dba:	f7f9 f929 	bl	8001010 <_fstat>
 8007dbe:	1c43      	adds	r3, r0, #1
 8007dc0:	d102      	bne.n	8007dc8 <_fstat_r+0x1c>
 8007dc2:	682b      	ldr	r3, [r5, #0]
 8007dc4:	b103      	cbz	r3, 8007dc8 <_fstat_r+0x1c>
 8007dc6:	6023      	str	r3, [r4, #0]
 8007dc8:	bd38      	pop	{r3, r4, r5, pc}
 8007dca:	bf00      	nop
 8007dcc:	2000041c 	.word	0x2000041c

08007dd0 <_isatty_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	4d05      	ldr	r5, [pc, #20]	@ (8007dec <_isatty_r+0x1c>)
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	4608      	mov	r0, r1
 8007dda:	602b      	str	r3, [r5, #0]
 8007ddc:	f7f9 f927 	bl	800102e <_isatty>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d102      	bne.n	8007dea <_isatty_r+0x1a>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	b103      	cbz	r3, 8007dea <_isatty_r+0x1a>
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	2000041c 	.word	0x2000041c

08007df0 <_init>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	bf00      	nop
 8007df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df6:	bc08      	pop	{r3}
 8007df8:	469e      	mov	lr, r3
 8007dfa:	4770      	bx	lr

08007dfc <_fini>:
 8007dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfe:	bf00      	nop
 8007e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e02:	bc08      	pop	{r3}
 8007e04:	469e      	mov	lr, r3
 8007e06:	4770      	bx	lr
